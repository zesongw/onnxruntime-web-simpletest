{"version":3,"file":"ort.webgl.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.webgpu = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (options.norm?.mean !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (options.norm?.bias !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float16':\n        return onnx.TensorProto.DataType.FLOAT16;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","webgpu","logLevelInternal","logLevel","value","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","offset","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","String","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","AttributeWithCacheKeyImpl","attribute","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","onnx","AttributeProto","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","obj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","version","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","Math","ceil","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","a","c","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","build","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","min","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","len","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","bind","logInternal","stack","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","response","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","FLOAT16","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","isInteger","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","fn","arguments","pending","apply","base64","string","b64","s64","parts","chunk","fromCharCode","invalidEncoding","charCodeAt","test","EventEmitter","_listeners","prototype","on","evt","off","listeners","emit","args","f32","f8b","le","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","alloc","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","out","random","equals","other","isEmpty","toJSON","WebAssembly","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","message","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","tag","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","process","versions","global","window","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","enumerable","globalThis","Function","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}