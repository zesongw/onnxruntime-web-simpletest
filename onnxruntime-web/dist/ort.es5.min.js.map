{"version":3,"file":"ort.es5.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.webgpu = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (options.norm?.mean !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (options.norm?.bias !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float16':\n        return onnx.TensorProto.DataType.FLOAT16;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, data: Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    const backend = new WebGpuBackend();\n    await backend.initialize();\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              const data = module.HEAPU8.subarray(dataOffset, dataOffset + size);\n\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, data);\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<typeof env.logLevel>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(env.logLevel!);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (env.debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseEluAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu = (context: ComputeContext, attributes: EluAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const parseEluAttributes = (attributes: Record<string, unknown>): EluAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {getInstance, initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n\n      // TODO: support JSEP in worker\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n\n    // init JSEP if available\n    await initJsep(getInstance());\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\nimport {logLevelStringToEnum} from './wasm-common';\n\nlet ortInit: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'uint16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.15.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={899:function(e,r){\\\"use strict\\\";var n=this&&this.__read||function(e,r){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,o=n.call(e),i=[];try{for(;(void 0===r||r-- >0)&&!(t=o.next()).done;)i.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.iterateExtraOptions=void 0,r.iterateExtraOptions=function(e,t,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=n(e,2),u=i[0],s=i[1],c=t?t+u:u;if(\\\"object\\\"==typeof s)(0,r.iterateExtraOptions)(s,c+\\\".\\\",a,o);else if(\\\"string\\\"==typeof s||\\\"number\\\"==typeof s)o(c,s.toString());else{if(\\\"boolean\\\"!=typeof s)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof s));o(c,s?\\\"1\\\":\\\"0\\\")}}))}},918:function(e,r,n){\\\"use strict\\\";Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.setRunOptions=void 0;var t=n(899),a=n(444),o=n(263);r.setRunOptions=function(e){var r=(0,o.getInstance)(),n=0,i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);var s=0;if(void 0!==(null==e?void 0:e.tag)&&(s=(0,a.allocWasmString)(e.tag,i)),0===(n=r._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,s)))throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,t.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,t){var o=(0,a.allocWasmString)(e,i),u=(0,a.allocWasmString)(t,i);if(0!==r._OrtAddRunConfigEntry(n,o,u))throw new Error(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(t))})),[n,i]}catch(e){throw 0!==n&&r._OrtReleaseRunOptions(n),i.forEach(r._free),e}}},622:function(e,r,n){\\\"use strict\\\";var t=this&&this.__values||function(e){var r=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=r&&e[r],t=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&t>=e.length&&(e=void 0),{value:e&&e[t++],done:!e}}};throw new TypeError(r?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.setSessionOptions=void 0;var a=n(899),o=n(444),i=n(263);r.setSessionOptions=function(e){var r,n,u,s,c=(0,i.getInstance)(),f=0,l=[],p=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var r=e.extra.session;r.use_ort_model_bytes_directly||(r.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((function(e){return\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)}))&&(e.enableMemPattern=!1)}(p);try{var d=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(null!==(r=p.graphOptimizationLevel)&&void 0!==r?r:\\\"all\\\"),h=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(null!==(n=p.executionMode)&&void 0!==n?n:\\\"sequential\\\"),g=\\\"string\\\"==typeof p.logId?(0,o.allocWasmString)(p.logId,l):0,y=null!==(u=p.logSeverityLevel)&&void 0!==u?u:2;if(!Number.isInteger(y)||y<0||y>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(y));var v=null!==(s=p.logVerbosityLevel)&&void 0!==s?s:0;if(!Number.isInteger(v)||v<0||v>4)throw new Error(\\\"log verbosity level is not valid: \\\".concat(v));var m=\\\"string\\\"==typeof p.optimizedModelFilePath?(0,o.allocWasmString)(p.optimizedModelFilePath,l):0;if(0===(f=c._OrtCreateSessionOptions(d,!!p.enableCpuMemArena,!!p.enableMemPattern,h,!!p.enableProfiling,0,g,y,v,m)))throw new Error(\\\"Can't create session options\\\");return p.executionProviders&&function(e,r,n){var a,u;try{for(var s=t(r),c=s.next();!c.done;c=s.next()){var f=c.value,l=\\\"string\\\"==typeof f?f:f.name;switch(l){case\\\"xnnpack\\\":l=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(l=\\\"WEBNN\\\",\\\"string\\\"!=typeof f){var p=f;if(null==p?void 0:p.deviceType){var d=(0,o.allocWasmString)(\\\"deviceType\\\",n),h=(0,o.allocWasmString)(p.deviceType,n);if(0!==(0,i.getInstance)()._OrtAddSessionConfigEntry(e,d,h))throw new Error(\\\"Can't set a session config entry: 'deviceType' - \\\".concat(p.deviceType))}if((null==p?void 0:p.powerPreference)&&(d=(0,o.allocWasmString)(\\\"powerPreference\\\",n),h=(0,o.allocWasmString)(p.powerPreference,n),0!==(0,i.getInstance)()._OrtAddSessionConfigEntry(e,d,h)))throw new Error(\\\"Can't set a session config entry: 'powerPreference' - \\\".concat(p.powerPreference))}break;case\\\"webgpu\\\":l=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported EP: \\\".concat(l))}var g=(0,o.allocWasmString)(l,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(e,g))throw new Error(\\\"Can't append execution provider: \\\".concat(l))}}catch(e){a={error:e}}finally{try{c&&!c.done&&(u=s.return)&&u.call(s)}finally{if(a)throw a.error}}}(f,p.executionProviders,l),void 0!==p.extra&&(0,a.iterateExtraOptions)(p.extra,\\\"\\\",new WeakSet,(function(e,r){var n=(0,o.allocWasmString)(e,l),t=(0,o.allocWasmString)(r,l);if(0!==c._OrtAddSessionConfigEntry(f,n,t))throw new Error(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(r))})),[f,l]}catch(e){throw 0!==f&&c._OrtReleaseSessionOptions(f),l.forEach(c._free),e}}},444:function(e,r,n){\\\"use strict\\\";Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.allocWasmString=void 0;var t=n(263);r.allocWasmString=function(e,r){var n=(0,t.getInstance)(),a=n.lengthBytesUTF8(e)+1,o=n._malloc(a);return n.stringToUTF8(e,o,a),r.push(o),o}},917:function(e,r){\\\"use strict\\\";Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.logLevelStringToEnum=r.tensorTypeToTypedArrayConstructor=r.getTensorElementSize=r.tensorDataTypeEnumToString=r.tensorDataTypeStringToEnum=void 0,r.tensorDataTypeStringToEnum=function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},r.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:case 10:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},r.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e]},r.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}},r.logLevelStringToEnum=function(e){switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(\\\"unsupported logging level: \\\".concat(e))}}},259:function(e,r,n){\\\"use strict\\\";var t=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(a,o){function i(e){try{s(t.next(e))}catch(e){o(e)}}function u(e){try{s(t.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?a(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(i,u)}s((t=t.apply(e,r||[])).next())}))},a=this&&this.__generator||function(e,r){var n,t,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(s){return function(u){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,u[0]&&(i=0)),i;)try{if(n=1,t&&(a=2&u[0]?t.return:u[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,u[1])).done)return a;switch(t=0,a&&(u=[2&u[0],a.value]),u[0]){case 0:case 1:a=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,t=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!a||u[1]>a[0]&&u[1]<a[3])){i.label=u[1];break}if(6===u[0]&&i.label<a[1]){i.label=a[1],a=u;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(u);break}a[2]&&i.ops.pop(),i.trys.pop();continue}u=r.call(e,i)}catch(e){u=[6,e],t=0}finally{n=a=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,s])}}},o=this&&this.__read||function(e,r){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var t,a,o=n.call(e),i=[];try{for(;(void 0===r||r-- >0)&&!(t=o.next()).done;)i.push(t.value)}catch(e){a={error:e}}finally{try{t&&!t.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__values||function(e){var r=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=r&&e[r],t=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&t>=e.length&&(e=void 0),{value:e&&e[t++],done:!e}}};throw new TypeError(r?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.extractTransferableBuffers=r.endProfiling=r.run=r.releaseSession=r.createSession=r.createSessionFinalize=r.createSessionAllocate=r.initOrt=void 0;var u=n(918),s=n(622),c=n(444),f=n(917),l=n(263);r.initOrt=function(e,r){var n=(0,l.getInstance)()._OrtInit(e,r);if(0!==n)throw new Error(\\\"Can't initialize onnxruntime. error code = \\\".concat(n))};var p=new Map;r.createSessionAllocate=function(e){var r=(0,l.getInstance)(),n=r._malloc(e.byteLength);return r.HEAPU8.set(e,n),[n,e.byteLength]},r.createSessionFinalize=function(e,r){var n,t=(0,l.getInstance)(),a=0,i=0,u=[];try{if(i=(n=o((0,s.setSessionOptions)(r),2))[0],u=n[1],0===(a=t._OrtCreateSession(e[0],e[1],i)))throw new Error(\\\"Can't create a session\\\")}finally{t._free(e[0]),0!==i&&t._OrtReleaseSessionOptions(i),u.forEach(t._free)}for(var c=t._OrtGetInputCount(a),f=t._OrtGetOutputCount(a),d=[],h=[],g=[],y=[],v=0;v<c;v++){var m=t._OrtGetInputName(a,v);if(0===m)throw new Error(\\\"Can't get an input name\\\");h.push(m),d.push(t.UTF8ToString(m))}for(v=0;v<f;v++){var b=t._OrtGetOutputName(a,v);if(0===b)throw new Error(\\\"Can't get an output name\\\");y.push(b),g.push(t.UTF8ToString(b))}return p.set(a,[a,h,y]),[a,d,g]},r.createSession=function(e,n){var t=(0,r.createSessionAllocate)(e);return(0,r.createSessionFinalize)(t,n)},r.releaseSession=function(e){var r=(0,l.getInstance)(),n=p.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var t=n[0],a=n[1],o=n[2];a.forEach(r._OrtFree),o.forEach(r._OrtFree),r._OrtReleaseSession(t),p.delete(e)},r.run=function(e,r,n,i,s){return t(void 0,void 0,void 0,(function(){var t,d,h,g,y,v,m,b,w,_,T,O,A,S,E,P,C,M,k,R,F,x,U,W,D,I,j,H,Y,z,L,N,B,G,V,q,J,Q,X,$,Z,K,ee,re,ne;return a(this,(function(a){switch(a.label){case 0:if(t=(0,l.getInstance)(),!(d=p.get(e)))throw new Error(\\\"invalid session id\\\");h=d[0],g=d[1],y=d[2],v=r.length,m=i.length,b=0,w=[],_=[],T=[],a.label=1;case 1:for(a.trys.push([1,,7,8]),ne=o((0,u.setRunOptions)(s),2),b=ne[0],w=ne[1],O=function(e){var r=n[e][0],a=n[e][1],o=n[e][2],i=void 0,u=void 0;if(Array.isArray(o)){u=4*o.length,i=t._malloc(u),T.push(i);for(var s=i/4,l=0;l<o.length;l++){if(\\\"string\\\"!=typeof o[l])throw new TypeError(\\\"tensor data at index \\\".concat(l,\\\" is not a string\\\"));t.HEAPU32[s++]=(0,c.allocWasmString)(o[l],T)}}else u=o.byteLength,i=t._malloc(u),T.push(i),t.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,u),i);var p=t.stackSave(),d=t.stackAlloc(4*a.length);try{var h=d/4;a.forEach((function(e){return t.HEAP32[h++]=e}));var g=t._OrtCreateTensor((0,f.tensorDataTypeStringToEnum)(r),i,u,d,a.length);if(0===g)throw new Error(\\\"Can't create a tensor\\\");_.push(g)}finally{t.stackRestore(p)}},D=0;D<v;D++)O(D);A=t.stackSave(),S=t.stackAlloc(4*v),E=t.stackAlloc(4*v),P=t.stackAlloc(4*m),C=t.stackAlloc(4*m),a.label=2;case 2:for(a.trys.push([2,,5,6]),M=S/4,k=E/4,R=P/4,F=C/4,D=0;D<v;D++)t.HEAPU32[M++]=_[D],t.HEAPU32[k++]=g[r[D]];for(D=0;D<m;D++)t.HEAPU32[R++]=0,t.HEAPU32[F++]=y[i[D]];return x=t._OrtRun(h,E,S,v,C,m,P,b),(U=t.jsepRunPromise)&&void 0!==U.then?[4,U]:[3,4];case 3:x=a.sent(),a.label=4;case 4:if(W=[],0===x)for(D=0;D<m;D++){I=t.HEAPU32[P/4+D],j=t.stackSave(),H=t.stackAlloc(16),Y=void 0,z=0;try{if(0!==(x=t._OrtGetTensorData(I,H,H+4,H+8,H+12)))throw new Error(\\\"Can't access output tensor data. error code = \\\".concat(x));for(L=H/4,N=t.HEAPU32[L++],z=t.HEAPU32[L++],B=t.HEAPU32[L++],G=t.HEAPU32[L++],V=[],q=0;q<G;q++)V.push(t.HEAPU32[B/4+q]);if(t._OrtFree(B),J=0===V.length?1:V.reduce((function(e,r){return e*r})),\\\"string\\\"===(Y=(0,f.tensorDataTypeEnumToString)(N))){for(Q=[],X=z/4,$=0;$<J;$++)Z=t.HEAPU32[X++],K=$===J-1?void 0:t.HEAPU32[X]-Z,Q.push(t.UTF8ToString(Z,K));W.push([Y,V,Q])}else ee=(0,f.tensorTypeToTypedArrayConstructor)(Y),re=new ee(J),new Uint8Array(re.buffer,re.byteOffset,re.byteLength).set(t.HEAPU8.subarray(z,z+re.byteLength)),W.push([Y,V,re])}finally{t.stackRestore(j),\\\"string\\\"===Y&&z&&t._free(z),t._OrtReleaseTensor(I)}}if(0===x)return[2,W];throw new Error(\\\"failed to call OrtRun(). error code = \\\".concat(x,\\\".\\\"));case 5:return t.stackRestore(A),[7];case 6:return[3,8];case 7:return _.forEach(t._OrtReleaseTensor),T.forEach(t._free),t._OrtReleaseRunOptions(b),w.forEach(t._free),[7];case 8:return[2]}}))}))},r.endProfiling=function(e){var r=(0,l.getInstance)(),n=p.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var t=n[0],a=r._OrtEndProfiling(t);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");r._OrtFree(a)},r.extractTransferableBuffers=function(e){var r,n,t=[];try{for(var a=i(e),o=a.next();!o.done;o=a.next()){var u=o.value[2];!Array.isArray(u)&&u.buffer&&t.push(u.buffer)}}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(r)throw r.error}}return t}},263:function(e,r,n){\\\"use strict\\\";var t=this&&this.__createBinding||(Object.create?function(e,r,n,t){void 0===t&&(t=n);var a=Object.getOwnPropertyDescriptor(r,n);a&&!(\\\"get\\\"in a?!r.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return r[n]}}),Object.defineProperty(e,t,a)}:function(e,r,n,t){void 0===t&&(t=n),e[t]=r[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:r})}:function(e,r){e.default=r}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&t(r,e,n);return a(r,e),r},i=this&&this.__awaiter||function(e,r,n,t){return new(n||(n=Promise))((function(a,o){function i(e){try{s(t.next(e))}catch(e){o(e)}}function u(e){try{s(t.throw(e))}catch(e){o(e)}}function s(e){var r;e.done?a(e.value):(r=e.value,r instanceof n?r:new n((function(e){e(r)}))).then(i,u)}s((t=t.apply(e,r||[])).next())}))},u=this&&this.__generator||function(e,r){var n,t,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(s){return function(u){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,u[0]&&(i=0)),i;)try{if(n=1,t&&(a=2&u[0]?t.return:u[0]?t.throw||((a=t.return)&&a.call(t),0):t.next)&&!(a=a.call(t,u[1])).done)return a;switch(t=0,a&&(u=[2&u[0],a.value]),u[0]){case 0:case 1:a=u;break;case 4:return i.label++,{value:u[1],done:!1};case 5:i.label++,t=u[1],u=[0];continue;case 7:u=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==u[0]&&2!==u[0])){i=0;continue}if(3===u[0]&&(!a||u[1]>a[0]&&u[1]<a[3])){i.label=u[1];break}if(6===u[0]&&i.label<a[1]){i.label=a[1],a=u;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(u);break}a[2]&&i.ops.pop(),i.trys.pop();continue}u=r.call(e,i)}catch(e){u=[6,e],t=0}finally{n=a=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,s])}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,\\\"__esModule\\\",{value:!0}),r.dispose=r.getInstance=r.initializeWebAssembly=void 0;var c,f=o(n(449)),l=s(n(932)),p=n(474),d=!1,h=!1,g=!1,y=function(e,r){return r?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"};r.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var r,t,a,o,i,s,v,m,b,w,_;return u(this,(function(u){switch(u.label){case 0:if(d)return[2,Promise.resolve()];if(h)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(g)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return h=!0,r=e.initTimeout,t=e.numThreads,a=e.simd,o=t>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),s=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,v=y(!1,o),m=y(i,o),b=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[m]:void 0,w=!1,_=[],r>0&&_.push(new Promise((function(e){setTimeout((function(){w=!0,e()}),r)}))),_.push(new Promise((function(e,r){var t=o?p:l.default,a={locateFile:function(e,r){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:\\\"text/javascript\\\"})):e===v?null!=b?b:(null!=s?s:r)+m:r+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=f.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(t.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}t(a).then((function(r){h=!1,d=!0,c=r,e()}),(function(e){h=!1,g=!0,r(e)}))}))),[4,Promise.race(_)];case 1:if(u.sent(),w)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(r,\\\"ms\\\"));return[2]}}))}))},r.getInstance=function(){if(d&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},r.dispose=function(){var e;!d||h||g||(h=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,h=!1,d=!1,g=!0)}},474:function(e,r,n){var _scriptDir,t=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){function r(){return F.buffer!=U.buffer&&Q(),U}function t(){return F.buffer!=U.buffer&&Q(),W}function a(){return F.buffer!=U.buffer&&Q(),D}function o(){return F.buffer!=U.buffer&&Q(),I}function i(){return F.buffer!=U.buffer&&Q(),j}function u(){return F.buffer!=U.buffer&&Q(),H}function s(){return F.buffer!=U.buffer&&Q(),z}var c,f,l;c||(c=void 0!==e?e:{}),c.ready=new Promise((function(e,r){f=e,l=r}));var p,d,h,g=Object.assign({},c),y=\\\"./this.program\\\",v=(e,r)=>{throw r},m=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,_=c.ENVIRONMENT_IS_PTHREAD||!1,T=\\\"\\\";function O(e){return c.locateFile?c.locateFile(e,T):T+e}if(w){var A=n(384),S=n(908);let r;T=b?S.dirname(T)+\\\"/\\\":\\\"//\\\",p=(e,r)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),A.readFileSync(e,r?void 0:\\\"utf8\\\")),h=e=>((e=p(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,r,n)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),A.readFile(e,(function(e,t){e?n(e):r(t.buffer)}))},1<process.argv.length&&(y=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof fe))throw e})),15>process.versions.node.split(\\\".\\\")[0]&&process.on(\\\"unhandledRejection\\\",(function(e){throw e})),v=(e,r)=>{if(R)throw process.exitCode=e,r;if(!(r instanceof fe)){var n=r;r&&\\\"object\\\"==typeof r&&r.stack&&(n=[r,r.stack]),k(\\\"exiting due to exception: \\\"+n)}process.exit(e)},c.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{r=n(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}n.g.Worker=r.Worker}else(m||b)&&(b?T=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\\\"blob:\\\")?T.substr(0,T.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(p=e=>{var r=new XMLHttpRequest;return r.open(\\\"GET\\\",e,!1),r.send(null),r.responseText},b&&(h=e=>{var r=new XMLHttpRequest;return r.open(\\\"GET\\\",e,!1),r.responseType=\\\"arraybuffer\\\",r.send(null),new Uint8Array(r.response)}),d=(e,r,n)=>{var t=new XMLHttpRequest;t.open(\\\"GET\\\",e,!0),t.responseType=\\\"arraybuffer\\\",t.onload=()=>{200==t.status||0==t.status&&t.response?r(t.response):n()},t.onerror=n,t.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(n.g.performance=n(953).performance);var E=console.log.bind(console),P=console.warn.bind(console);w&&(E=e=>A.writeSync(1,e+\\\"\\\\n\\\"),P=e=>A.writeSync(2,e+\\\"\\\\n\\\"));var C,M=c.print||E,k=c.printErr||P;Object.assign(c,g),g=null,c.thisProgram&&(y=c.thisProgram),c.quit&&(v=c.quit),c.wasmBinary&&(C=c.wasmBinary);var R=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&ie(\\\"no native wasm support detected\\\");var F,x,U,W,D,I,j,H,Y,z,L=!1,N=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function B(e,r,n){var t=(r>>>=0)+n;for(n=r;e[n]&&!(n>=t);)++n;if(16<n-r&&e.buffer&&N)return N.decode(e.buffer instanceof SharedArrayBuffer?e.slice(r,n):e.subarray(r,n));for(t=\\\"\\\";r<n;){var a=e[r++];if(128&a){var o=63&e[r++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[r++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[r++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function G(e,r){return(e>>>=0)?B(t(),e,r):\\\"\\\"}function V(e,r,n,t){if(!(0<t))return 0;var a=n>>>=0;t=n+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=t)break;r[n++>>>0]=i}else{if(2047>=i){if(n+1>=t)break;r[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=t)break;r[n++>>>0]=224|i>>12}else{if(n+3>=t)break;r[n++>>>0]=240|i>>18,r[n++>>>0]=128|i>>12&63}r[n++>>>0]=128|i>>6&63}r[n++>>>0]=128|63&i}}return r[n>>>0]=0,n-a}function q(e,r,n){return V(e,t(),r,n)}function J(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);127>=t?r++:2047>=t?r+=2:55296<=t&&57343>=t?(r+=4,++n):r+=3}return r}function Q(){var e=F.buffer;c.HEAP8=U=new Int8Array(e),c.HEAP16=D=new Int16Array(e),c.HEAP32=j=new Int32Array(e),c.HEAPU8=W=new Uint8Array(e),c.HEAPU16=I=new Uint16Array(e),c.HEAPU32=H=new Uint32Array(e),c.HEAPF32=Y=new Float32Array(e),c.HEAPF64=z=new Float64Array(e)}var X=c.INITIAL_MEMORY||16777216;if(1048576<=X||ie(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+X+\\\"! (STACK_SIZE=1048576)\\\"),_)F=c.wasmMemory;else if(c.wasmMemory)F=c.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:X/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&k(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");Q(),X=F.buffer.byteLength;var $,Z=[],K=[],ee=[];function re(){var e=c.preRun.shift();Z.unshift(e)}var ne,te=0,ae=null,oe=null;function ie(e){throw c.onAbort&&c.onAbort(e),k(e=\\\"Aborted(\\\"+e+\\\")\\\"),L=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),l(e),e}function ue(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function se(e){try{if(e==ne&&C)return new Uint8Array(C);if(h)return h(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ie(e)}}function ce(e,r,n){return function(e){if(!C&&(m||b)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((function(r){if(!r.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return r.arrayBuffer()})).catch((function(){return se(e)}));if(d)return new Promise((function(r,n){d(e,(function(e){r(new Uint8Array(e))}),n)}))}return Promise.resolve().then((function(){return se(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(n,(function(e){k(\\\"failed to asynchronously prepare wasm: \\\"+e),ie(e)}))}function fe(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function le(e){e.terminate(),e.onmessage=()=>{}}function pe(e){(e=ye.hb[e])||ie(),ye.Mb(e)}function de(e){var r=ye.Ab();if(!r)return 6;ye.ib.push(r),ye.hb[e.fb]=r,r.fb=e.fb;var n={cmd:\\\"run\\\",start_routine:e.Nb,arg:e.xb,pthread_ptr:e.fb};return w&&r.ref(),r.postMessage(n,e.Tb),0}function he(e){if(_)return Pr(1,1,e);R||(ye.Ob(),c.onExit&&c.onExit(e),L=!0),v(e,new fe(e))}function ge(e){if(_)throw me(e),\\\"unwind\\\";he(e)}ue(ne=\\\"ort-wasm-threaded.wasm\\\")||(ne=O(ne));var ye={lb:[],ib:[],vb:[],hb:{},qb:function(){_&&ye.Eb()},Vb:function(){},Eb:function(){ye.receiveObjectTransfer=ye.Lb,ye.threadInitTLS=ye.ub,ye.setExitStatus=ye.tb,R=!1},tb:function(){},Xb:[\\\"$terminateWorker\\\"],Ob:function(){for(var e of ye.ib)le(e);for(e of ye.lb)le(e);ye.lb=[],ye.ib=[],ye.hb=[]},Mb:function(e){var r=e.fb;delete ye.hb[r],ye.lb.push(e),ye.ib.splice(ye.ib.indexOf(e),1),e.fb=0,w&&e.unref(),Kr(r)},Lb:function(){},ub:function(){ye.vb.forEach((e=>e()))},Kb:e=>new Promise((r=>{e.onmessage=n=>{var t=(n=n.data).cmd;if(e.fb&&(ye.yb=e.fb),n.targetThread&&n.targetThread!=Vr()){var a=ye.hb[n.Wb];a?a.postMessage(n,n.transferList):k('Internal error! Worker sent a message \\\"'+t+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===t?cr(n.queue):\\\"spawnThread\\\"===t?de(n):\\\"cleanupThread\\\"===t?pe(n.thread):\\\"killThread\\\"===t?(n=n.thread,t=ye.hb[n],delete ye.hb[n],le(t),Kr(n),ye.ib.splice(ye.ib.indexOf(t),1),t.fb=0):\\\"cancelThread\\\"===t?ye.hb[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===t?(e.loaded=!0,w&&!e.fb&&e.unref(),r(e)):\\\"print\\\"===t?M(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"printErr\\\"===t?k(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"alert\\\"===t?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===t?c[n.handler](...n.args):t&&k(\\\"worker sent an unknown command \\\"+t);ye.yb=void 0},e.onerror=e=>{throw k(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(r){e.onmessage({data:r})})),e.on(\\\"error\\\",(function(r){e.onerror(r)})),e.on(\\\"detachedExit\\\",(function(){})));var n,t=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(n)&&t.push(n);e.postMessage({cmd:\\\"load\\\",handlers:t,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:x})})),Jb:function(e){e()},wb:function(){var e=O(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),ye.lb.push(e)},Ab:function(){return 0==ye.lb.length&&(ye.wb(),ye.Kb(ye.lb[0])),ye.lb.pop()}};function ve(e){for(;0<e.length;)e.shift()(c)}function me(e){if(_)return Pr(2,0,e);try{ge(e)}catch(e){e instanceof fe||\\\"unwind\\\"==e||v(1,e)}}c.PThread=ye,c.establishStackSpace=function(){var e=Vr(),r=i()[e+52>>2>>>0];nn(r,r-(e=i()[e+56>>2>>>0])),an(r)};var be=[];function we(e){this.mb=e-24,this.Ib=function(e){u()[this.mb+4>>2>>>0]=e},this.Cb=function(e){u()[this.mb+8>>2>>>0]=e},this.Gb=function(){i()[this.mb>>2>>>0]=0},this.Bb=function(){r()[this.mb+12>>0>>>0]=0},this.Hb=function(){r()[this.mb+13>>0>>>0]=0},this.qb=function(e,r){this.zb(),this.Ib(e),this.Cb(r),this.Gb(),this.Bb(),this.Hb()},this.zb=function(){u()[this.mb+16>>2>>>0]=0}}function _e(e,r,n,t){return _?Pr(3,1,e,r,n,t):Te(e,r,n,t)}function Te(e,r,n,t){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return k(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return _&&0===a.length?_e(e,r,n,t):(e={Nb:n,fb:e,xb:t,Tb:a},_?(e.Ub=\\\"spawnThread\\\",postMessage(e,a),0):de(e))}function Oe(e,r,n){return _?Pr(4,1,e,r,n):0}function Ae(e,r){if(_)return Pr(5,1,e,r)}function Se(e,r){if(_)return Pr(6,1,e,r)}function Ee(e,r,n){if(_)return Pr(7,1,e,r,n)}function Pe(e,r,n){return _?Pr(8,1,e,r,n):0}function Ce(e,r){if(_)return Pr(9,1,e,r)}function Me(e,r,n){if(_)return Pr(10,1,e,r,n)}function ke(e,r,n,t){if(_)return Pr(11,1,e,r,n,t)}function Re(e,r,n,t){if(_)return Pr(12,1,e,r,n,t)}function Fe(e,r,n,t){if(_)return Pr(13,1,e,r,n,t)}function xe(e){if(_)return Pr(14,1,e)}function Ue(e,r){if(_)return Pr(15,1,e,r)}function We(e,r,n){if(_)return Pr(16,1,e,r,n)}function De(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}c.invokeEntryPoint=function(e,r){var n=be[e];n||(e>=be.length&&(be.length=e+1),be[e]=n=$.get(e)),e=n(r),R?ye.tb(e):rn(e)};var Ie=void 0;function je(e){for(var r=\\\"\\\";t()[e>>>0];)r+=Ie[t()[e++>>>0]];return r}var He={},Ye={},ze={};function Le(e){if(void 0===e)return\\\"_unknown\\\";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=r&&57>=r?\\\"_\\\"+e:e}function Ne(e,r){return{[e=Le(e)]:function(){return r.apply(this,arguments)}}[e]}function Be(e){var r=Error,n=Ne(e,(function(r){this.name=e,this.message=r,void 0!==(r=Error(r).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+r.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return n.prototype=Object.create(r.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},n}var Ge=void 0;function Ve(e){throw new Ge(e)}function qe(e,r,n={}){if(!(\\\"argPackAdvance\\\"in r))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var t=r.name;if(e||Ve('type \\\"'+t+'\\\" must have a positive integer typeid pointer'),Ye.hasOwnProperty(e)){if(n.Db)return;Ve(\\\"Cannot register type '\\\"+t+\\\"' twice\\\")}Ye[e]=r,delete ze[e],He.hasOwnProperty(e)&&(r=He[e],delete He[e],r.forEach((e=>e())))}var Je=[],Qe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Xe(e){4<e&&0==--Qe[e].rb&&(Qe[e]=void 0,Je.push(e))}var $e=e=>(e||Ve(\\\"Cannot use deleted val. handle = \\\"+e),Qe[e].value),Ze=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=Je.length?Je.pop():Qe.length;return Qe[r]={rb:1,value:e},r}};function Ke(e){return this.fromWireType(i()[e>>2>>>0])}function er(e,r){switch(r){case 2:return function(e){var r=this.fromWireType;return F.buffer!=U.buffer&&Q(),r.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(s()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}function rr(e,n,s){switch(n){case 0:return s?function(e){return r()[e>>>0]}:function(e){return t()[e>>>0]};case 1:return s?function(e){return a()[e>>>1]}:function(e){return o()[e>>>1]};case 2:return s?function(e){return i()[e>>>2]}:function(e){return u()[e>>>2]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}var nr=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function tr(e,r){for(var n=e>>1,i=n+r/2;!(n>=i)&&o()[n>>>0];)++n;if(32<(n<<=1)-e&&nr)return nr.decode(t().slice(e,n));for(n=\\\"\\\",i=0;!(i>=r/2);++i){var u=a()[e+2*i>>1>>>0];if(0==u)break;n+=String.fromCharCode(u)}return n}function ar(e,r,n){if(void 0===n&&(n=2147483647),2>n)return 0;var t=r;n=(n-=2)<2*e.length?n/2:e.length;for(var o=0;o<n;++o){var i=e.charCodeAt(o);a()[r>>1>>>0]=i,r+=2}return a()[r>>1>>>0]=0,r-t}function or(e){return 2*e.length}function ir(e,r){for(var n=0,t=\\\"\\\";!(n>=r/4);){var a=i()[e+4*n>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function ur(e,r,n){if(void 0===n&&(n=2147483647),4>n)return 0;var t=r>>>=0;n=t+n-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),i()[r>>2>>>0]=o,(r+=4)+4>n)break}return i()[r>>2>>>0]=0,r-t}function sr(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);55296<=t&&57343>=t&&++n,r+=4}return r}function cr(e){Atomics.store(i(),e>>2,1),Vr()&&Zr(e),Atomics.compareExchange(i(),e>>2,1,0)}function fr(e,r){var n=Ye[e];if(void 0===n){var t=je(e=Qr(e));Jr(e),Ve(r+\\\" has unknown type \\\"+t)}return n}c.executeNotifiedProxyingQueue=cr;var lr={};function pr(e){var r=lr[e];return void 0===r?je(e):r}var dr=[];function hr(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var gr=[],yr={};function vr(e){return u()[e>>>2]+4294967296*i()[e+4>>>2]}function mr(e){return 0==e%4&&(0!=e%100||0==e%400)}var br,wr,_r=[0,31,60,91,121,152,182,213,244,274,305,335],Tr=[0,31,59,90,120,151,181,212,243,273,304,334];function Or(e){return(mr(e.getFullYear())?_r:Tr)[e.getMonth()]+e.getDate()-1}function Ar(e,r,n,t,a,o,i){return _?Pr(17,1,e,r,n,t,a,o,i):-52}function Sr(e,r,n,t,a,o){if(_)return Pr(18,1,e,r,n,t,a,o)}function Er(e){var n=J(e)+1,t=qr(n);return t&&V(e,r(),t,n),t}function Pr(e,r){var n=arguments.length-2,t=arguments;return function(e){var r=tn();return e=e(),an(r),e}((()=>{for(var a=on(8*n),o=a>>3,i=0;i<n;i++){var u=t[2+i];s()[o+i>>>0]=u}return $r(e,n,a,r)}))}wr=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Cr,Mr=[],kr={};function Rr(){if(!Cr){var e,r={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:y||\\\"./this.program\\\"};for(e in kr)void 0===kr[e]?delete r[e]:r[e]=kr[e];var n=[];for(e in r)n.push(e+\\\"=\\\"+r[e]);Cr=n}return Cr}function Fr(e,n){if(_)return Pr(19,1,e,n);var t=0;return Rr().forEach((function(a,o){var i=n+t;for(o=u()[e+4*o>>2>>>0]=i,i=0;i<a.length;++i)r()[o++>>0>>>0]=a.charCodeAt(i);r()[o>>0>>>0]=0,t+=a.length+1})),0}function xr(e,r){if(_)return Pr(20,1,e,r);var n=Rr();u()[e>>2>>>0]=n.length;var t=0;return n.forEach((function(e){t+=e.length+1})),u()[r>>2>>>0]=t,0}function Ur(e){return _?Pr(21,1,e):52}function Wr(e,r,n,t){return _?Pr(22,1,e,r,n,t):52}function Dr(e,r,n,t,a){return _?Pr(23,1,e,r,n,t,a):70}var Ir=[null,[],[]];function jr(e,r,n,a){if(_)return Pr(24,1,e,r,n,a);for(var o=0,i=0;i<n;i++){var s=u()[r>>2>>>0],c=u()[r+4>>2>>>0];r+=8;for(var f=0;f<c;f++){var l=t()[s+f>>>0],p=Ir[e];0===l||10===l?((1===e?M:k)(B(p,0)),p.length=0):p.push(l)}o+=c}return u()[a>>2>>>0]=o,0}var Hr=[31,29,31,30,31,30,31,31,30,31,30,31],Yr=[31,28,31,30,31,30,31,31,30,31,30,31];function zr(e,n,t,a){function o(e,r,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<r;)e=n[0]+e;return e}function u(e,r){return o(e,r,\\\"0\\\")}function s(e,r){function n(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=n(e.getFullYear()-r.getFullYear()))&&0===(t=n(e.getMonth()-r.getMonth()))&&(t=n(e.getDate()-r.getDate())),t}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var r=e.jb;for(e=new Date(new Date(e.kb+1900,0,1).getTime());0<r;){var n=e.getMonth(),t=(mr(e.getFullYear())?Hr:Yr)[n];if(!(r>t-e.getDate())){e.setDate(e.getDate()+r);break}r-=t-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),r=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=s(r,e)?0>=s(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=i()[a+40>>2>>>0];for(var p in a={Rb:i()[a>>2>>>0],Qb:i()[a+4>>2>>>0],ob:i()[a+8>>2>>>0],sb:i()[a+12>>2>>>0],pb:i()[a+16>>2>>>0],kb:i()[a+20>>2>>>0],gb:i()[a+24>>2>>>0],jb:i()[a+28>>2>>>0],Yb:i()[a+32>>2>>>0],Pb:i()[a+36>>2>>>0],Sb:l?G(l):\\\"\\\"},t=G(t),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})t=t.replace(new RegExp(p,\\\"g\\\"),l[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),h=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":function(e){return d[e.gb].substring(0,3)},\\\"%A\\\":function(e){return d[e.gb]},\\\"%b\\\":function(e){return h[e.pb].substring(0,3)},\\\"%B\\\":function(e){return h[e.pb]},\\\"%C\\\":function(e){return u((e.kb+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.sb,2)},\\\"%e\\\":function(e){return o(e.sb,2,\\\" \\\")},\\\"%g\\\":function(e){return f(e).toString().substring(2)},\\\"%G\\\":function(e){return f(e)},\\\"%H\\\":function(e){return u(e.ob,2)},\\\"%I\\\":function(e){return 0==(e=e.ob)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var r=0,n=0;n<=e.pb-1;r+=(mr(e.kb+1900)?Hr:Yr)[n++]);return u(e.sb+r,3)},\\\"%m\\\":function(e){return u(e.pb+1,2)},\\\"%M\\\":function(e){return u(e.Qb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.ob&&12>e.ob?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.Rb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.gb||7},\\\"%U\\\":function(e){return u(Math.floor((e.jb+7-e.gb)/7),2)},\\\"%V\\\":function(e){var r=Math.floor((e.jb+7-(e.gb+6)%7)/7);if(2>=(e.gb+371-e.jb-2)%7&&r++,r)53==r&&(4==(n=(e.gb+371-e.jb)%7)||3==n&&mr(e.kb)||(r=1));else{r=52;var n=(e.gb+7-e.jb-1)%7;(4==n||5==n&&mr(e.kb%400-1))&&r++}return u(r,2)},\\\"%w\\\":function(e){return e.gb},\\\"%W\\\":function(e){return u(Math.floor((e.jb+7-(e.gb+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.kb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.kb+1900},\\\"%z\\\":function(e){var r=0<=(e=e.Pb);return e=Math.abs(e)/60,(r?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Sb},\\\"%%\\\":function(){return\\\"%\\\"}},t=t.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\\\"g\\\"),l[p](a)));return p=function(e){var r=Array(J(e)+1);return V(e,r,0,r.length),r}(t=t.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>n?0:(function(e,n){r().set(e,n>>>0)}(p,e),p.length-1)}ye.qb();for(var Lr=Array(256),Nr=0;256>Nr;++Nr)Lr[Nr]=String.fromCharCode(Nr);Ie=Lr,Ge=c.BindingError=Be(\\\"BindingError\\\"),c.InternalError=Be(\\\"InternalError\\\"),c.count_emval_handles=function(){for(var e=0,r=5;r<Qe.length;++r)void 0!==Qe[r]&&++e;return e},c.get_first_emval=function(){for(var e=5;e<Qe.length;++e)if(void 0!==Qe[e])return Qe[e];return null};var Br=[null,he,me,_e,Oe,Ae,Se,Ee,Pe,Ce,Me,ke,Re,Fe,xe,Ue,We,Ar,Sr,Fr,xr,Ur,Wr,Dr,jr],Gr={b:function(e,r,n){throw new we(e).qb(r,n),e},pa:function(){ie(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},aa:function(e){Xr(e,!b,1,!m),ye.ub()},C:function(e){_?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):pe(e)},U:Te,v:Oe,ha:Ae,Q:Se,S:Ee,L:Pe,fa:Ce,Z:Me,ea:ke,E:Re,R:Fe,O:xe,ga:Ue,P:We,K:function(){},ra:function(e,n,t,o,u){var s=De(t);qe(e,{name:n=je(n),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?o:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===t)var o=r();else if(2===t)o=a();else{if(4!==t)throw new TypeError(\\\"Unknown boolean type size: \\\"+n);o=i()}return this.fromWireType(o[e>>>s])},nb:null})},qa:function(e,r){qe(e,{name:r=je(r),fromWireType:function(e){var r=$e(e);return Xe(e),r},toWireType:function(e,r){return Ze(r)},argPackAdvance:8,readValueFromPointer:Ke,nb:null})},G:function(e,r,n){n=De(n),qe(e,{name:r=je(r),fromWireType:function(e){return e},toWireType:function(e,r){return r},argPackAdvance:8,readValueFromPointer:er(r,n),nb:null})},q:function(e,r,n,t,a){r=je(r),-1===a&&(a=4294967295),a=De(n);var o=e=>e;if(0===t){var i=32-8*n;o=e=>e<<i>>>i}n=r.includes(\\\"unsigned\\\")?function(e,r){return r>>>0}:function(e,r){return r},qe(e,{name:r,fromWireType:o,toWireType:n,argPackAdvance:8,readValueFromPointer:rr(r,a,0!==t),nb:null})},n:function(e,r,n){function t(e){e>>=2;var r=u();return new a(r.buffer,r[e+1>>>0],r[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];qe(e,{name:n=je(n),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Db:!0})},H:function(e,r){var n=\\\"std::string\\\"===(r=je(r));qe(e,{name:r,fromWireType:function(e){var r=u()[e>>2>>>0],a=e+4;if(n)for(var o=a,i=0;i<=r;++i){var s=a+i;if(i==r||0==t()[s>>>0]){if(o=G(o,s-o),void 0===c)var c=o;else c+=String.fromCharCode(0),c+=o;o=s+1}}else{for(c=Array(r),i=0;i<r;++i)c[i]=String.fromCharCode(t()[a+i>>>0]);c=c.join(\\\"\\\")}return Jr(e),c},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var a,o=\\\"string\\\"==typeof r;o||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Ve(\\\"Cannot pass non-string to std::string\\\"),a=n&&o?J(r):r.length;var i=qr(4+a+1),s=i+4>>>0;if(u()[i>>2>>>0]=a,n&&o)q(r,s,a+1);else if(o)for(o=0;o<a;++o){var c=r.charCodeAt(o);255<c&&(Jr(s),Ve(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),t()[s+o>>>0]=c}else for(o=0;o<a;++o)t()[s+o>>>0]=r[o];return null!==e&&e.push(Jr,i),i},argPackAdvance:8,readValueFromPointer:Ke,nb:function(e){Jr(e)}})},x:function(e,r,n){if(n=je(n),2===r)var t=tr,a=ar,i=or,s=()=>o(),c=1;else 4===r&&(t=ir,a=ur,i=sr,s=()=>u(),c=2);qe(e,{name:n,fromWireType:function(e){for(var n,a=u()[e>>>2],o=s(),i=e+4,f=0;f<=a;++f){var l=e+4+f*r;f!=a&&0!=o[l>>>c]||(i=t(i,l-i),void 0===n?n=i:(n+=String.fromCharCode(0),n+=i),i=l+r)}return Jr(e),n},toWireType:function(e,t){\\\"string\\\"!=typeof t&&Ve(\\\"Cannot pass non-string to C++ string type \\\"+n);var o=i(t),s=qr(4+o+r);return s>>>=0,u()[s>>>2]=o>>c,a(t,s+4,o+r),null!==e&&e.push(Jr,s),s},argPackAdvance:8,readValueFromPointer:Ke,nb:function(e){Jr(e)}})},sa:function(e,r){qe(e,{Fb:!0,name:r=je(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},V:function(){return 1048576},ka:function(){return!0},W:function(e,r,n,t){e==r?setTimeout((()=>cr(t))):_?postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:t}):(e=ye.hb[e])&&e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:t})},$:function(){return-1},s:function(e,r,n){e=$e(e),r=fr(r,\\\"emval::as\\\");var t=[],a=Ze(t);return u()[n>>2>>>0]=a,r.toWireType(t,e)},j:function(e,r,n,t,a){e=dr[e],r=$e(r),n=pr(n);var o=[];return u()[t>>2>>>0]=Ze(o),e(r,n,o,a)},z:function(e,r,n,t){(e=dr[e])(r=$e(r),n=pr(n),null,t)},c:Xe,I:function(e,r){return(e=$e(e))==$e(r)},r:function(e){return 0===e?Ze(hr()):(e=pr(e),Ze(hr()[e]))},i:function(e,r){var n=function(e,r){for(var n=Array(e),t=0;t<e;++t)n[t]=fr(u()[r+4*t>>2>>>0],\\\"parameter \\\"+t);return n}(e,r),t=n[0];r=t.name+\\\"_$\\\"+n.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=gr[r];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[t],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(n[1+s]);var c=\\\"return function \\\"+Le(\\\"methodCaller_\\\"+r)+\\\"(handle, name, destructors, args) {\\\\n\\\",f=0;for(s=0;s<e-1;++s)c+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(f?\\\"+\\\"+f:\\\"\\\")+\\\");\\\\n\\\",f+=n[s+1].argPackAdvance;for(c+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)n[s+1].deleteObject&&(c+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return t.Fb||(c+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(c+\\\"};\\\\n\\\"),e=function(e){var r=Function;if(!(r instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof r+\\\" which is not a function\\\");var n=Ne(r.name||\\\"unknownFunctionName\\\",(function(){}));return n.prototype=r.prototype,n=new n,(e=r.apply(n,e))instanceof Object?e:n}(a).apply(null,o),a=function(e){var r=dr.length;return dr.push(e),r}(e),gr[r]=a},t:function(e,r){return e=$e(e),r=$e(r),Ze(e[r])},d:function(e){4<e&&(Qe[e].rb+=1)},y:function(e,r,n,t){e=$e(e);var a=yr[r];return a||(a=function(e){for(var r=\\\"\\\",n=0;n<e;++n)r+=(0!==n?\\\", \\\":\\\"\\\")+\\\"arg\\\"+n;var t=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(n=0;n<e;++n)t+=\\\"var argType\\\"+n+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+n+\\\"');\\\\nvar arg\\\"+n+\\\" = argType\\\"+n+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+n+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",t+\\\"var obj = new constructor(\\\"+r+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(fr,c,Ze,(()=>u()))}(r),yr[r]=a),a(e,n,t)},ta:function(){return Ze([])},l:function(e){e=$e(e);for(var r=Array(e.length),n=0;n<e.length;n++)r[n]=e[n];return Ze(r)},e:function(e){return Ze(pr(e))},k:function(){return Ze({})},h:function(e){for(var r=$e(e);r.length;){var n=r.pop();r.pop()(n)}Xe(e)},f:function(e,r,n){e=$e(e),r=$e(r),n=$e(n),e[r]=n},g:function(e,r){return e=(e=fr(e,\\\"_emval_take_value\\\")).readValueFromPointer(r),Ze(e)},la:function(e,r){e=new Date(1e3*vr(e)),i()[r>>2>>>0]=e.getUTCSeconds(),i()[r+4>>2>>>0]=e.getUTCMinutes(),i()[r+8>>2>>>0]=e.getUTCHours(),i()[r+12>>2>>>0]=e.getUTCDate(),i()[r+16>>2>>>0]=e.getUTCMonth(),i()[r+20>>2>>>0]=e.getUTCFullYear()-1900,i()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[r+28>>2>>>0]=e},ma:function(e,r){e=new Date(1e3*vr(e)),i()[r>>2>>>0]=e.getSeconds(),i()[r+4>>2>>>0]=e.getMinutes(),i()[r+8>>2>>>0]=e.getHours(),i()[r+12>>2>>>0]=e.getDate(),i()[r+16>>2>>>0]=e.getMonth(),i()[r+20>>2>>>0]=e.getFullYear()-1900,i()[r+24>>2>>>0]=e.getDay();var n=0|Or(e);i()[r+28>>2>>>0]=n,i()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),n=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(n!=t&&e.getTimezoneOffset()==Math.min(t,n)),i()[r+32>>2>>>0]=e},na:function(e){var r=new Date(i()[e+20>>2>>>0]+1900,i()[e+16>>2>>>0],i()[e+12>>2>>>0],i()[e+8>>2>>>0],i()[e+4>>2>>>0],i()[e>>2>>>0],0),n=i()[e+32>>2>>>0],t=r.getTimezoneOffset(),a=new Date(r.getFullYear(),6,1).getTimezoneOffset(),o=new Date(r.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,a);return 0>n?i()[e+32>>2>>>0]=Number(a!=o&&u==t):0<n!=(u==t)&&(a=Math.max(o,a),r.setTime(r.getTime()+6e4*((0<n?u:a)-t))),i()[e+24>>2>>>0]=r.getDay(),n=0|Or(r),i()[e+28>>2>>>0]=n,i()[e>>2>>>0]=r.getSeconds(),i()[e+4>>2>>>0]=r.getMinutes(),i()[e+8>>2>>>0]=r.getHours(),i()[e+12>>2>>>0]=r.getDate(),i()[e+16>>2>>>0]=r.getMonth(),i()[e+20>>2>>>0]=r.getYear(),r.getTime()/1e3|0},X:Ar,Y:Sr,oa:function(e,r,n){function t(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),s=new Date(a,6,1);a=o.getTimezoneOffset();var c=s.getTimezoneOffset(),f=Math.max(a,c);u()[e>>2>>>0]=60*f,i()[r>>2>>>0]=Number(a!=c),e=t(o),r=t(s),e=Er(e),r=Er(r),c<a?(u()[n>>2>>>0]=e,u()[n+4>>2>>>0]=r):(u()[n>>2>>>0]=r,u()[n+4>>2>>>0]=e)},m:function(){ie(\\\"\\\")},ua:function(){ie(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},D:function(){if(!w&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";br||(br={}),br[e]||(br[e]=1,w&&(e=\\\"warning: \\\"+e),k(e))}},F:function(){return Date.now()},N:function(){return 4294901760},p:wr,da:function(e,r,n){t().copyWithin(e>>>0,r>>>0,r+n>>>0)},u:function(){return w?n(993).cpus().length:navigator.hardwareConcurrency},_:function(e,r,n){Mr.length=r,n>>=3;for(var t=0;t<r;t++)Mr[t]=s()[n+t>>>0];return Br[e].apply(null,Mr)},M:function(e){var r=t().length;if((e>>>=0)<=r||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=r*(1+.2/n);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=F.buffer;try{F.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),Q();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},ja:function(){throw\\\"unwind\\\"},ba:Fr,ca:xr,T:ge,w:Ur,B:Wr,J:Dr,A:jr,a:F||c.wasmMemory,ia:zr,o:function(e,r,n,t){return zr(e,r,n,t)}};!function(){function e(e,r){return e=e.exports,c.asm=e,ye.vb.push(c.asm.Ta),$=c.asm.Ya,K.unshift(c.asm.va),x=r,ye.Jb((()=>{if(te--,c.monitorRunDependencies&&c.monitorRunDependencies(te),0==te&&(null!==ae&&(clearInterval(ae),ae=null),oe)){var e=oe;oe=null,e()}})),e}var r={a:Gr};if(te++,c.monitorRunDependencies&&c.monitorRunDependencies(te),c.instantiateWasm)try{return c.instantiateWasm(r,e)}catch(e){k(\\\"Module.instantiateWasm callback failed with error: \\\"+e),l(e)}(function(e,r){var n=ne;return C||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ue(n)||n.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?ce(n,e,r):fetch(n,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(t){return k(\\\"wasm streaming compile failed: \\\"+t),k(\\\"falling back to ArrayBuffer instantiation\\\"),ce(n,e,r)}))}))})(r,(function(r){e(r.instance,r.module)})).catch(l)}(),c._OrtInit=function(){return(c._OrtInit=c.asm.wa).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.xa).apply(null,arguments)},c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.ya).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.za).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Aa).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Ba).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ca).apply(null,arguments)},c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Da).apply(null,arguments)},c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.Ea).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Fa).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Ga).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ha).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Ia).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.Ja).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.Ka).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.La).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.Ma).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.Na).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.Oa).apply(null,arguments)},c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.Pa).apply(null,arguments)};var Vr=c._pthread_self=function(){return(Vr=c._pthread_self=c.asm.Qa).apply(null,arguments)},qr=c._malloc=function(){return(qr=c._malloc=c.asm.Ra).apply(null,arguments)},Jr=c._free=function(){return(Jr=c._free=c.asm.Sa).apply(null,arguments)};c.__emscripten_tls_init=function(){return(c.__emscripten_tls_init=c.asm.Ta).apply(null,arguments)};var Qr=c.___getTypeName=function(){return(Qr=c.___getTypeName=c.asm.Ua).apply(null,arguments)};c.__embind_initialize_bindings=function(){return(c.__embind_initialize_bindings=c.asm.Va).apply(null,arguments)};var Xr=c.__emscripten_thread_init=function(){return(Xr=c.__emscripten_thread_init=c.asm.Wa).apply(null,arguments)};function $r(){return($r=c.asm.Za).apply(null,arguments)}c.__emscripten_thread_crashed=function(){return(c.__emscripten_thread_crashed=c.asm.Xa).apply(null,arguments)};var Zr=c.__emscripten_proxy_execute_task_queue=function(){return(Zr=c.__emscripten_proxy_execute_task_queue=c.asm._a).apply(null,arguments)};function Kr(){return(Kr=c.asm.$a).apply(null,arguments)}var en,rn=c.__emscripten_thread_exit=function(){return(rn=c.__emscripten_thread_exit=c.asm.ab).apply(null,arguments)};function nn(){return(nn=c.asm.bb).apply(null,arguments)}function tn(){return(tn=c.asm.cb).apply(null,arguments)}function an(){return(an=c.asm.db).apply(null,arguments)}function on(){return(on=c.asm.eb).apply(null,arguments)}function un(){function e(){if(!en&&(en=!0,c.calledRun=!0,!L)&&(_||ve(K),f(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!_)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();ee.unshift(e)}ve(ee)}}if(!(0<te))if(_)f(c),_||ve(K),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)re();ve(Z),0<te||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.UTF8ToString=G,c.stringToUTF8=q,c.lengthBytesUTF8=J,c.keepRuntimeAlive=function(){return R},c.wasmMemory=F,c.stackAlloc=on,c.stackSave=tn,c.stackRestore=an,c.ExitStatus=fe,c.PThread=ye,oe=function e(){en||un(),en||(oe=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return un(),e.ready});e.exports=t},932:function(e,r,n){var _scriptDir,t=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){var r,t,a;r||(r=void 0!==e?e:{}),r.ready=new Promise((function(e,r){t=e,a=r}));var o,i,u,s=Object.assign({},r),c=\\\"./this.program\\\",f=\\\"object\\\"==typeof window,l=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var h=n(384),g=n(908);d=l?g.dirname(d)+\\\"/\\\":\\\"//\\\",o=(e,r)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFileSync(e,r?void 0:\\\"utf8\\\")),u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,r,n)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFile(e,(function(e,t){e?n(e):r(t.buffer)}))},1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),15>process.versions.node.split(\\\".\\\")[0]&&process.on(\\\"unhandledRejection\\\",(function(e){throw e})),r.inspect=function(){return\\\"[Emscripten Module object]\\\"}}else(f||l)&&(l?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var r=new XMLHttpRequest;return r.open(\\\"GET\\\",e,!1),r.send(null),r.responseText},l&&(u=e=>{var r=new XMLHttpRequest;return r.open(\\\"GET\\\",e,!1),r.responseType=\\\"arraybuffer\\\",r.send(null),new Uint8Array(r.response)}),i=(e,r,n)=>{var t=new XMLHttpRequest;t.open(\\\"GET\\\",e,!0),t.responseType=\\\"arraybuffer\\\",t.onload=()=>{200==t.status||0==t.status&&t.response?r(t.response):n()},t.onerror=n,t.send(null)});var y,v=r.print||console.log.bind(console),m=r.printErr||console.warn.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(c=r.thisProgram),r.wasmBinary&&(y=r.wasmBinary),r.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var b,w,_,T,O,A,S,E,P,C=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function k(e,r,n){var t=(r>>>=0)+n;for(n=r;e[n]&&!(n>=t);)++n;if(16<n-r&&e.buffer&&M)return M.decode(e.subarray(r,n));for(t=\\\"\\\";r<n;){var a=e[r++];if(128&a){var o=63&e[r++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[r++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[r++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function R(e,r){return(e>>>=0)?k(_,e,r):\\\"\\\"}function F(e,r,n,t){if(!(0<t))return 0;var a=n>>>=0;t=n+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=t)break;r[n++>>>0]=i}else{if(2047>=i){if(n+1>=t)break;r[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=t)break;r[n++>>>0]=224|i>>12}else{if(n+3>=t)break;r[n++>>>0]=240|i>>18,r[n++>>>0]=128|i>>12&63}r[n++>>>0]=128|i>>6&63}r[n++>>>0]=128|63&i}}return r[n>>>0]=0,n-a}function x(e,r,n){return F(e,_,r,n)}function U(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);127>=t?r++:2047>=t?r+=2:55296<=t&&57343>=t?(r+=4,++n):r+=3}return r}function W(){var e=b.buffer;r.HEAP8=w=new Int8Array(e),r.HEAP16=T=new Int16Array(e),r.HEAP32=A=new Int32Array(e),r.HEAPU8=_=new Uint8Array(e),r.HEAPU16=O=new Uint16Array(e),r.HEAPU32=S=new Uint32Array(e),r.HEAPF32=E=new Float32Array(e),r.HEAPF64=P=new Float64Array(e)}var D=[],I=[],j=[];function H(){var e=r.preRun.shift();D.unshift(e)}var Y,z=0,L=null,N=null;function B(e){throw r.onAbort&&r.onAbort(e),m(e=\\\"Aborted(\\\"+e+\\\")\\\"),C=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function G(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!G(Y=\\\"ort-wasm.wasm\\\")){var V=Y;Y=r.locateFile?r.locateFile(V,d):d+V}function q(e){try{if(e==Y&&y)return new Uint8Array(y);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){B(e)}}function J(e,r,n){return function(e){if(!y&&(f||l)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((function(r){if(!r.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return r.arrayBuffer()})).catch((function(){return q(e)}));if(i)return new Promise((function(r,n){i(e,(function(e){r(new Uint8Array(e))}),n)}))}return Promise.resolve().then((function(){return q(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,r)})).then((function(e){return e})).then(n,(function(e){m(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}function Q(e){for(;0<e.length;)e.shift()(r)}function X(e){this.Pa=e-24,this.ab=function(e){S[this.Pa+4>>2>>>0]=e},this.Ya=function(e){S[this.Pa+8>>2>>>0]=e},this.Za=function(){A[this.Pa>>2>>>0]=0},this.Xa=function(){w[this.Pa+12>>0>>>0]=0},this.$a=function(){w[this.Pa+13>>0>>>0]=0},this.Va=function(e,r){this.Wa(),this.ab(e),this.Ya(r),this.Za(),this.Xa(),this.$a()},this.Wa=function(){S[this.Pa+16>>2>>>0]=0}}function $(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var Z=void 0;function K(e){for(var r=\\\"\\\";_[e>>>0];)r+=Z[_[e++>>>0]];return r}var ee={},re={},ne={};function te(e){if(void 0===e)return\\\"_unknown\\\";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=r&&57>=r?\\\"_\\\"+e:e}function ae(e,r){return{[e=te(e)]:function(){return r.apply(this,arguments)}}[e]}function oe(e){var r=Error,n=ae(e,(function(r){this.name=e,this.message=r,void 0!==(r=Error(r).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+r.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return n.prototype=Object.create(r.prototype),n.prototype.constructor=n,n.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},n}var ie=void 0;function ue(e){throw new ie(e)}function se(e,r,n={}){if(!(\\\"argPackAdvance\\\"in r))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var t=r.name;if(e||ue('type \\\"'+t+'\\\" must have a positive integer typeid pointer'),re.hasOwnProperty(e)){if(n.bb)return;ue(\\\"Cannot register type '\\\"+t+\\\"' twice\\\")}re[e]=r,delete ne[e],ee.hasOwnProperty(e)&&(r=ee[e],delete ee[e],r.forEach((e=>e())))}var ce=[],fe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function le(e){4<e&&0==--fe[e].Ta&&(fe[e]=void 0,ce.push(e))}var pe=e=>(e||ue(\\\"Cannot use deleted val. handle = \\\"+e),fe[e].value),de=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=ce.length?ce.pop():fe.length;return fe[r]={Ta:1,value:e},r}};function he(e){return this.fromWireType(A[e>>2>>>0])}function ge(e,r){switch(r){case 2:return function(e){return this.fromWireType(E[e>>>2])};case 3:return function(e){return this.fromWireType(P[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}function ye(e,r,n){switch(r){case 0:return n?function(e){return w[e>>>0]}:function(e){return _[e>>>0]};case 1:return n?function(e){return T[e>>>1]}:function(e){return O[e>>>1]};case 2:return n?function(e){return A[e>>>2]}:function(e){return S[e>>>2]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}var ve=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function me(e,r){for(var n=e>>1,t=n+r/2;!(n>=t)&&O[n>>>0];)++n;if(32<(n<<=1)-e&&ve)return ve.decode(_.subarray(e>>>0,n>>>0));for(n=\\\"\\\",t=0;!(t>=r/2);++t){var a=T[e+2*t>>1>>>0];if(0==a)break;n+=String.fromCharCode(a)}return n}function be(e,r,n){if(void 0===n&&(n=2147483647),2>n)return 0;var t=r;n=(n-=2)<2*e.length?n/2:e.length;for(var a=0;a<n;++a)T[r>>1>>>0]=e.charCodeAt(a),r+=2;return T[r>>1>>>0]=0,r-t}function we(e){return 2*e.length}function _e(e,r){for(var n=0,t=\\\"\\\";!(n>=r/4);){var a=A[e+4*n>>2>>>0];if(0==a)break;++n,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function Te(e,r,n){if(void 0===n&&(n=2147483647),4>n)return 0;var t=r>>>=0;n=t+n-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),A[r>>2>>>0]=o,(r+=4)+4>n)break}return A[r>>2>>>0]=0,r-t}function Oe(e){for(var r=0,n=0;n<e.length;++n){var t=e.charCodeAt(n);55296<=t&&57343>=t&&++n,r+=4}return r}function Ae(e,r){var n=re[e];if(void 0===n){var t=K(e=Xe(e));Qe(e),ue(r+\\\" has unknown type \\\"+t)}return n}var Se={};function Ee(e){var r=Se[e];return void 0===r?K(e):r}var Pe=[];function Ce(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Me=[],ke={};function Re(e){return 0==e%4&&(0!=e%100||0==e%400)}var Fe,xe=[0,31,60,91,121,152,182,213,244,274,305,335],Ue=[0,31,59,90,120,151,181,212,243,273,304,334];function We(e){return(Re(e.getFullYear())?xe:Ue)[e.getMonth()]+e.getDate()-1}function De(e){var r=U(e)+1,n=Je(r);return n&&F(e,w,n,r),n}Fe=p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var Ie={};function je(){if(!He){var e,r={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in Ie)void 0===Ie[e]?delete r[e]:r[e]=Ie[e];var n=[];for(e in r)n.push(e+\\\"=\\\"+r[e]);He=n}return He}var He,Ye=[null,[],[]],ze=[31,29,31,30,31,30,31,31,30,31,30,31],Le=[31,28,31,30,31,30,31,31,30,31,30,31];function Ne(e,r,n,t){function a(e,r,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<r;)e=n[0]+e;return e}function o(e,r){return a(e,r,\\\"0\\\")}function i(e,r){function n(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=n(e.getFullYear()-r.getFullYear()))&&0===(t=n(e.getMonth()-r.getMonth()))&&(t=n(e.getDate()-r.getDate())),t}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var r=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<r;){var n=e.getMonth(),t=(Re(e.getFullYear())?ze:Le)[n];if(!(r>t-e.getDate())){e.setDate(e.getDate()+r);break}r-=t-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),r=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=i(r,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[t+40>>2>>>0];for(var f in t={gb:A[t>>2>>>0],fb:A[t+4>>2>>>0],Ra:A[t+8>>2>>>0],Ua:A[t+12>>2>>>0],Sa:A[t+16>>2>>>0],Oa:A[t+20>>2>>>0],Ja:A[t+24>>2>>>0],Na:A[t+28>>2>>>0],ib:A[t+32>>2>>>0],eb:A[t+36>>2>>>0],hb:c?R(c):\\\"\\\"},n=R(n),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(f,\\\"g\\\"),c[f]);var l=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in c={\\\"%a\\\":function(e){return l[e.Ja].substring(0,3)},\\\"%A\\\":function(e){return l[e.Ja]},\\\"%b\\\":function(e){return p[e.Sa].substring(0,3)},\\\"%B\\\":function(e){return p[e.Sa]},\\\"%C\\\":function(e){return o((e.Oa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Ua,2)},\\\"%e\\\":function(e){return a(e.Ua,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.Ra,2)},\\\"%I\\\":function(e){return 0==(e=e.Ra)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var r=0,n=0;n<=e.Sa-1;r+=(Re(e.Oa+1900)?ze:Le)[n++]);return o(e.Ua+r,3)},\\\"%m\\\":function(e){return o(e.Sa+1,2)},\\\"%M\\\":function(e){return o(e.fb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ra&&12>e.Ra?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.gb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ja||7},\\\"%U\\\":function(e){return o(Math.floor((e.Na+7-e.Ja)/7),2)},\\\"%V\\\":function(e){var r=Math.floor((e.Na+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Na-2)%7&&r++,r)53==r&&(4==(n=(e.Ja+371-e.Na)%7)||3==n&&Re(e.Oa)||(r=1));else{r=52;var n=(e.Ja+7-e.Na-1)%7;(4==n||5==n&&Re(e.Oa%400-1))&&r++}return o(r,2)},\\\"%w\\\":function(e){return e.Ja},\\\"%W\\\":function(e){return o(Math.floor((e.Na+7-(e.Ja+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Oa+1900},\\\"%z\\\":function(e){var r=0<=(e=e.eb);return e=Math.abs(e)/60,(r?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.hb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)n.includes(f)&&(n=n.replace(new RegExp(f,\\\"g\\\"),c[f](t)));return f=function(e){var r=Array(U(e)+1);return F(e,r,0,r.length),r}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>r?0:(w.set(f,e>>>0),f.length-1)}for(var Be=Array(256),Ge=0;256>Ge;++Ge)Be[Ge]=String.fromCharCode(Ge);Z=Be,ie=r.BindingError=oe(\\\"BindingError\\\"),r.InternalError=oe(\\\"InternalError\\\"),r.count_emval_handles=function(){for(var e=0,r=5;r<fe.length;++r)void 0!==fe[r]&&++e;return e},r.get_first_emval=function(){for(var e=5;e<fe.length;++e)if(void 0!==fe[e])return fe[e];return null};var Ve={a:function(e,r,n){throw new X(e).Va(r,n),e},ca:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},r:function(){return 0},Y:function(){},M:function(){},O:function(){},H:function(){return 0},W:function(){},R:function(){},V:function(){},z:function(){},N:function(){},K:function(){},X:function(){},L:function(){},G:function(){},fa:function(e,r,n,t,a){var o=$(n);se(e,{name:r=K(r),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?t:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===n)var t=w;else if(2===n)t=T;else{if(4!==n)throw new TypeError(\\\"Unknown boolean type size: \\\"+r);t=A}return this.fromWireType(t[e>>>o])},Qa:null})},ea:function(e,r){se(e,{name:r=K(r),fromWireType:function(e){var r=pe(e);return le(e),r},toWireType:function(e,r){return de(r)},argPackAdvance:8,readValueFromPointer:he,Qa:null})},B:function(e,r,n){n=$(n),se(e,{name:r=K(r),fromWireType:function(e){return e},toWireType:function(e,r){return r},argPackAdvance:8,readValueFromPointer:ge(r,n),Qa:null})},o:function(e,r,n,t,a){r=K(r),-1===a&&(a=4294967295),a=$(n);var o=e=>e;if(0===t){var i=32-8*n;o=e=>e<<i>>>i}n=r.includes(\\\"unsigned\\\")?function(e,r){return r>>>0}:function(e,r){return r},se(e,{name:r,fromWireType:o,toWireType:n,argPackAdvance:8,readValueFromPointer:ye(r,a,0!==t),Qa:null})},l:function(e,r,n){function t(e){e>>=2;var r=S;return new a(r.buffer,r[e+1>>>0],r[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];se(e,{name:n=K(n),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{bb:!0})},C:function(e,r){var n=\\\"std::string\\\"===(r=K(r));se(e,{name:r,fromWireType:function(e){var r=S[e>>2>>>0],t=e+4;if(n)for(var a=t,o=0;o<=r;++o){var i=t+o;if(o==r||0==_[i>>>0]){if(a=R(a,i-a),void 0===u)var u=a;else u+=String.fromCharCode(0),u+=a;a=i+1}}else{for(u=Array(r),o=0;o<r;++o)u[o]=String.fromCharCode(_[t+o>>>0]);u=u.join(\\\"\\\")}return Qe(e),u},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var t,a=\\\"string\\\"==typeof r;a||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||ue(\\\"Cannot pass non-string to std::string\\\"),t=n&&a?U(r):r.length;var o=Je(4+t+1),i=o+4>>>0;if(S[o>>2>>>0]=t,n&&a)x(r,i,t+1);else if(a)for(a=0;a<t;++a){var u=r.charCodeAt(a);255<u&&(Qe(i),ue(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),_[i+a>>>0]=u}else for(a=0;a<t;++a)_[i+a>>>0]=r[a];return null!==e&&e.push(Qe,o),o},argPackAdvance:8,readValueFromPointer:he,Qa:function(e){Qe(e)}})},t:function(e,r,n){if(n=K(n),2===r)var t=me,a=be,o=we,i=()=>O,u=1;else 4===r&&(t=_e,a=Te,o=Oe,i=()=>S,u=2);se(e,{name:n,fromWireType:function(e){for(var n,a=S[e>>>2],o=i(),s=e+4,c=0;c<=a;++c){var f=e+4+c*r;c!=a&&0!=o[f>>>u]||(s=t(s,f-s),void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),s=f+r)}return Qe(e),n},toWireType:function(e,t){\\\"string\\\"!=typeof t&&ue(\\\"Cannot pass non-string to C++ string type \\\"+n);var i=o(t),s=Je(4+i+r);return S[(s>>>=0)>>>2]=i>>u,a(t,s+4,i+r),null!==e&&e.push(Qe,s),s},argPackAdvance:8,readValueFromPointer:he,Qa:function(e){Qe(e)}})},ga:function(e,r){se(e,{cb:!0,name:r=K(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return!0},p:function(e,r,n){e=pe(e),r=Ae(r,\\\"emval::as\\\");var t=[],a=de(t);return S[n>>2>>>0]=a,r.toWireType(t,e)},i:function(e,r,n,t,a){e=Pe[e],r=pe(r),n=Ee(n);var o=[];return S[t>>2>>>0]=de(o),e(r,n,o,a)},u:function(e,r,n,t){(e=Pe[e])(r=pe(r),n=Ee(n),null,t)},b:le,E:function(e,r){return(e=pe(e))==pe(r)},w:function(e){return 0===e?de(Ce()):(e=Ee(e),de(Ce()[e]))},h:function(e,r){var n=function(e,r){for(var n=Array(e),t=0;t<e;++t)n[t]=Ae(S[r+4*t>>2>>>0],\\\"parameter \\\"+t);return n}(e,r),t=n[0];r=t.name+\\\"_$\\\"+n.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Me[r];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[t],i=\\\"\\\",u=0;u<e-1;++u)i+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),o.push(n[1+u]);var s=\\\"return function \\\"+te(\\\"methodCaller_\\\"+r)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(u=0;u<e-1;++u)s+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=n[u+1].argPackAdvance;for(s+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",u=0;u<e-1;++u)n[u+1].deleteObject&&(s+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return t.cb||(s+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(s+\\\"};\\\\n\\\"),e=function(e){var r=Function;if(!(r instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof r+\\\" which is not a function\\\");var n=ae(r.name||\\\"unknownFunctionName\\\",(function(){}));return n.prototype=r.prototype,n=new n,(e=r.apply(n,e))instanceof Object?e:n}(a).apply(null,o),a=function(e){var r=Pe.length;return Pe.push(e),r}(e),Me[r]=a},v:function(e,r){return e=pe(e),r=pe(r),de(e[r])},c:function(e){4<e&&(fe[e].Ta+=1)},ia:function(e,n,t,a){e=pe(e);var o=ke[n];return o||(o=function(e){for(var n=\\\"\\\",t=0;t<e;++t)n+=(0!==t?\\\", \\\":\\\"\\\")+\\\"arg\\\"+t;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(t=0;t<e;++t)a+=\\\"var argType\\\"+t+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+t+\\\"');\\\\nvar arg\\\"+t+\\\" = argType\\\"+t+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+t+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+n+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Ae,r,de,(()=>S))}(n),ke[n]=o),o(e,t,a)},D:function(){return de([])},k:function(e){e=pe(e);for(var r=Array(e.length),n=0;n<e.length;n++)r[n]=e[n];return de(r)},d:function(e){return de(Ee(e))},j:function(){return de({})},g:function(e){for(var r=pe(e);r.length;){var n=r.pop();r.pop()(n)}le(e)},e:function(e,r,n){e=pe(e),r=pe(r),n=pe(n),e[r]=n},f:function(e,r){return e=(e=Ae(e,\\\"_emval_take_value\\\")).readValueFromPointer(r),de(e)},_:function(e,r){e=new Date(1e3*(S[e>>>2]+4294967296*A[e+4>>>2])),A[r>>2>>>0]=e.getUTCSeconds(),A[r+4>>2>>>0]=e.getUTCMinutes(),A[r+8>>2>>>0]=e.getUTCHours(),A[r+12>>2>>>0]=e.getUTCDate(),A[r+16>>2>>>0]=e.getUTCMonth(),A[r+20>>2>>>0]=e.getUTCFullYear()-1900,A[r+24>>2>>>0]=e.getUTCDay(),A[r+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},$:function(e,r){e=new Date(1e3*(S[e>>>2]+4294967296*A[e+4>>>2])),A[r>>2>>>0]=e.getSeconds(),A[r+4>>2>>>0]=e.getMinutes(),A[r+8>>2>>>0]=e.getHours(),A[r+12>>2>>>0]=e.getDate(),A[r+16>>2>>>0]=e.getMonth(),A[r+20>>2>>>0]=e.getFullYear()-1900,A[r+24>>2>>>0]=e.getDay(),A[r+28>>2>>>0]=0|We(e),A[r+36>>2>>>0]=-60*e.getTimezoneOffset();var n=new Date(e.getFullYear(),6,1).getTimezoneOffset(),t=new Date(e.getFullYear(),0,1).getTimezoneOffset();A[r+32>>2>>>0]=0|(n!=t&&e.getTimezoneOffset()==Math.min(t,n))},aa:function(e){var r=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),n=A[e+32>>2>>>0],t=r.getTimezoneOffset(),a=new Date(r.getFullYear(),6,1).getTimezoneOffset(),o=new Date(r.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>n?A[e+32>>2>>>0]=Number(a!=o&&i==t):0<n!=(i==t)&&(a=Math.max(o,a),r.setTime(r.getTime()+6e4*((0<n?i:a)-t))),A[e+24>>2>>>0]=r.getDay(),A[e+28>>2>>>0]=0|We(r),A[e>>2>>>0]=r.getSeconds(),A[e+4>>2>>>0]=r.getMinutes(),A[e+8>>2>>>0]=r.getHours(),A[e+12>>2>>>0]=r.getDate(),A[e+16>>2>>>0]=r.getMonth(),A[e+20>>2>>>0]=r.getYear(),r.getTime()/1e3|0},P:function(){return-52},Q:function(){},ba:function(e,r,n){function t(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();S[e>>2>>>0]=60*Math.max(a,u),A[r>>2>>>0]=Number(a!=u),e=t(o),r=t(i),e=De(e),r=De(r),u<a?(S[n>>2>>>0]=e,S[n+4>>2>>>0]=r):(S[n>>2>>>0]=r,S[n+4>>2>>>0]=e)},q:function(){B(\\\"\\\")},ha:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},A:function(){return Date.now()},J:function(){return 4294901760},n:Fe,U:function(e,r,n){_.copyWithin(e>>>0,r>>>0,r+n>>>0)},I:function(e){var r=_.length;if(4294901760<(e>>>=0))return!1;for(var n=1;4>=n;n*=2){var t=r*(1+.2/n);t=Math.min(t,e+100663296);var a=Math,o=a.min;t=Math.max(e,t),t+=(65536-t%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,t)-i.byteLength+65535>>>16),W();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},S:function(e,r){var n=0;return je().forEach((function(t,a){var o=r+n;for(a=S[e+4*a>>2>>>0]=o,o=0;o<t.length;++o)w[a++>>0>>>0]=t.charCodeAt(o);w[a>>0>>>0]=0,n+=t.length+1})),0},T:function(e,r){var n=je();S[e>>2>>>0]=n.length;var t=0;return n.forEach((function(e){t+=e.length+1})),S[r>>2>>>0]=t,0},s:function(){return 52},y:function(){return 52},F:function(){return 70},x:function(e,r,n,t){for(var a=0,o=0;o<n;o++){var i=S[r>>2>>>0],u=S[r+4>>2>>>0];r+=8;for(var s=0;s<u;s++){var c=_[i+s>>>0],f=Ye[e];0===c||10===c?((1===e?v:m)(k(f,0)),f.length=0):f.push(c)}a+=u}return S[t>>2>>>0]=a,0},da:Ne,m:function(e,r,n,t){return Ne(e,r,n,t)}};!function(){function e(e){if(e=e.exports,r.asm=e,b=r.asm.ja,W(),I.unshift(r.asm.ka),z--,r.monitorRunDependencies&&r.monitorRunDependencies(z),0==z&&(null!==L&&(clearInterval(L),L=null),N)){var n=N;N=null,n()}return e}var n={a:Ve};if(z++,r.monitorRunDependencies&&r.monitorRunDependencies(z),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(e){m(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,r){var n=Y;return y||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G(n)||n.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?J(n,e,r):fetch(n,{credentials:\\\"same-origin\\\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(r,(function(t){return m(\\\"wasm streaming compile failed: \\\"+t),m(\\\"falling back to ArrayBuffer instantiation\\\"),J(n,e,r)}))}))})(n,(function(r){e(r.instance)})).catch(a)}(),r._OrtInit=function(){return(r._OrtInit=r.asm.la).apply(null,arguments)},r._OrtCreateSessionOptions=function(){return(r._OrtCreateSessionOptions=r.asm.ma).apply(null,arguments)},r._OrtAppendExecutionProvider=function(){return(r._OrtAppendExecutionProvider=r.asm.na).apply(null,arguments)},r._OrtAddSessionConfigEntry=function(){return(r._OrtAddSessionConfigEntry=r.asm.oa).apply(null,arguments)},r._OrtReleaseSessionOptions=function(){return(r._OrtReleaseSessionOptions=r.asm.pa).apply(null,arguments)},r._OrtCreateSession=function(){return(r._OrtCreateSession=r.asm.qa).apply(null,arguments)},r._OrtReleaseSession=function(){return(r._OrtReleaseSession=r.asm.ra).apply(null,arguments)},r._OrtGetInputCount=function(){return(r._OrtGetInputCount=r.asm.sa).apply(null,arguments)},r._OrtGetOutputCount=function(){return(r._OrtGetOutputCount=r.asm.ta).apply(null,arguments)},r._OrtGetInputName=function(){return(r._OrtGetInputName=r.asm.ua).apply(null,arguments)},r._OrtGetOutputName=function(){return(r._OrtGetOutputName=r.asm.va).apply(null,arguments)},r._OrtFree=function(){return(r._OrtFree=r.asm.wa).apply(null,arguments)},r._OrtCreateTensor=function(){return(r._OrtCreateTensor=r.asm.xa).apply(null,arguments)},r._OrtGetTensorData=function(){return(r._OrtGetTensorData=r.asm.ya).apply(null,arguments)},r._OrtReleaseTensor=function(){return(r._OrtReleaseTensor=r.asm.za).apply(null,arguments)},r._OrtCreateRunOptions=function(){return(r._OrtCreateRunOptions=r.asm.Aa).apply(null,arguments)},r._OrtAddRunConfigEntry=function(){return(r._OrtAddRunConfigEntry=r.asm.Ba).apply(null,arguments)},r._OrtReleaseRunOptions=function(){return(r._OrtReleaseRunOptions=r.asm.Ca).apply(null,arguments)},r._OrtRun=function(){return(r._OrtRun=r.asm.Da).apply(null,arguments)},r._OrtEndProfiling=function(){return(r._OrtEndProfiling=r.asm.Ea).apply(null,arguments)};var qe,Je=r._malloc=function(){return(Je=r._malloc=r.asm.Fa).apply(null,arguments)},Qe=r._free=function(){return(Qe=r._free=r.asm.Ga).apply(null,arguments)},Xe=r.___getTypeName=function(){return(Xe=r.___getTypeName=r.asm.Ha).apply(null,arguments)};function $e(){return($e=r.asm.Ka).apply(null,arguments)}function Ze(){return(Ze=r.asm.La).apply(null,arguments)}function Ke(){return(Ke=r.asm.Ma).apply(null,arguments)}function er(){function e(){if(!qe&&(qe=!0,r.calledRun=!0,!C)){if(Q(I),t(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(\\\"function\\\"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;){var e=r.postRun.shift();j.unshift(e)}Q(j)}}if(!(0<z)){if(r.preRun)for(\\\"function\\\"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)H();Q(D),0<z||(r.setStatus?(r.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){r.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(r.__embind_initialize_bindings=function(){return(r.__embind_initialize_bindings=r.asm.Ia).apply(null,arguments)},r.UTF8ToString=R,r.stringToUTF8=x,r.lengthBytesUTF8=U,r.stackAlloc=Ke,r.stackSave=$e,r.stackRestore=Ze,N=function e(){qe||er(),qe||(N=e)},r.preInit)for(\\\"function\\\"==typeof r.preInit&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return er(),e.ready});e.exports=t},154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=[],d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),n.forEach((a=>{e.executeNotifiedProxyingQueue(a)})),n=[],o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"processProxyingQueue\\\"===r.data.cmd?o?e.executeNotifiedProxyingQueue(r.data.queue):n.push(r.data.queue):r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:function(){},993:function(){},908:function(){},953:function(){},925:function(){},449:function(){}},r={};function n(t){var a=r[t];if(void 0!==a)return a.exports;var o=r[t]={exports:{}};return e[t].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),function(){\\\"use strict\\\";var e=n(259),r=n(263);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":(0,r.initializeWebAssembly)(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}));break;case\\\"init-ort\\\":try{var t=n.data.in,a=t.numThreads,o=t.loggingLevel;(0,e.initOrt)(a,o),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var i=n.data.in.model,u=(0,e.createSessionAllocate)(i);postMessage({type:\\\"create_allocate\\\",out:u})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var s=n.data.in,c=(u=s.modeldata,s.options),f=(0,e.createSessionFinalize)(u,c);postMessage({type:\\\"create_finalize\\\",out:f})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var l=n.data.in;i=l.model,c=l.options,f=(0,e.createSession)(i,c),postMessage({type:\\\"create\\\",out:f})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var p=n.data.in;(0,e.releaseSession)(p),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var d=n.data.in,h=d.sessionId,g=d.inputIndices,y=d.inputs,v=d.outputIndices;c=d.options,(0,e.run)(h,g,y,v,c).then((function(r){postMessage({type:\\\"run\\\",out:r},(0,e.extractTransferableBuffers)(r))}),(function(e){postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{p=n.data.in,(0,e.endProfiling)(p),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return P.buffer!=x.buffer&&Q(),x}function r(){return P.buffer!=x.buffer&&Q(),D}function t(){return P.buffer!=x.buffer&&Q(),W}function a(){return P.buffer!=x.buffer&&Q(),I}function o(){return P.buffer!=x.buffer&&Q(),U}function i(){return P.buffer!=x.buffer&&Q(),j}function u(){return P.buffer!=x.buffer&&Q(),H}var f,s,c;f||(f=void 0!==e?e:{}),f.ready=new Promise((function(e,n){s=e,c=n}));var l,p,d,h=Object.assign({},f),m=\"./this.program\",b=(e,n)=>{throw n},g=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=f.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function T(e){return f.locateFile?f.locateFile(e,_):_+e}if(v){var A=require(\"fs\"),O=require(\"path\");let e;_=y?O.dirname(_)+\"/\":__dirname+\"/\",l=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFileSync(e,n?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,n,r)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFile(e,(function(e,t){e?r(e):n(t.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof se))throw e})),15>process.versions.node.split(\".\")[0]&&process.on(\"unhandledRejection\",(function(e){throw e})),b=(e,n)=>{if(F)throw process.exitCode=e,n;if(!(n instanceof se)){var r=n;n&&\"object\"==typeof n&&n.stack&&(r=[n,n.stack]),M(\"exiting due to exception: \"+r)}process.exit(e)},f.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(g||y)&&(y?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(d=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),p=(e,n,r)=>{var t=new XMLHttpRequest;t.open(\"GET\",e,!0),t.responseType=\"arraybuffer\",t.onload=()=>{200==t.status||0==t.status&&t.response?n(t.response):r()},t.onerror=r,t.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),E=console.warn.bind(console);v&&(S=e=>A.writeSync(1,e+\"\\n\"),E=e=>A.writeSync(2,e+\"\\n\"));var k,C=f.print||S,M=f.printErr||E;Object.assign(f,h),h=null,f.thisProgram&&(m=f.thisProgram),f.quit&&(b=f.quit),f.wasmBinary&&(k=f.wasmBinary);var F=f.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&oe(\"no native wasm support detected\");var P,R,x,D,W,I,U,j,Y,H,q=!1,z=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function B(e,n,r){var t=(n>>>=0)+r;for(r=n;e[r]&&!(r>=t);)++r;if(16<r-n&&e.buffer&&z)return z.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,r):e.subarray(n,r));for(t=\"\";n<r;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function N(e,n){return(e>>>=0)?B(r(),e,n):\"\"}function G(e,n,r,t){if(!(0<t))return 0;var a=r>>>=0;t=r+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=t)break;n[r++>>>0]=i}else{if(2047>=i){if(r+1>=t)break;n[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=t)break;n[r++>>>0]=224|i>>12}else{if(r+3>=t)break;n[r++>>>0]=240|i>>18,n[r++>>>0]=128|i>>12&63}n[r++>>>0]=128|i>>6&63}n[r++>>>0]=128|63&i}}return n[r>>>0]=0,r-a}function L(e,n,t){return G(e,r(),n,t)}function V(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);127>=t?n++:2047>=t?n+=2:55296<=t&&57343>=t?(n+=4,++r):n+=3}return n}function Q(){var e=P.buffer;f.HEAP8=x=new Int8Array(e),f.HEAP16=W=new Int16Array(e),f.HEAP32=U=new Int32Array(e),f.HEAPU8=D=new Uint8Array(e),f.HEAPU16=I=new Uint16Array(e),f.HEAPU32=j=new Uint32Array(e),f.HEAPF32=Y=new Float32Array(e),f.HEAPF64=H=new Float64Array(e)}var X=f.INITIAL_MEMORY||16777216;if(1048576<=X||oe(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+X+\"! (STACK_SIZE=1048576)\"),w)P=f.wasmMemory;else if(f.wasmMemory)P=f.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:X/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw M(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&M(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");Q(),X=P.buffer.byteLength;var J,Z=[],$=[],K=[];function ee(){var e=f.preRun.shift();Z.unshift(e)}var ne,re=0,te=null,ae=null;function oe(e){throw f.onAbort&&f.onAbort(e),M(e=\"Aborted(\"+e+\")\"),q=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function ie(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ue(e){try{if(e==ne&&k)return new Uint8Array(k);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){oe(e)}}function fe(e,n,r){return function(e){if(!k&&(g||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((function(n){if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((function(){return ue(e)}));if(p)return new Promise((function(n,r){p(e,(function(e){n(new Uint8Array(e))}),r)}))}return Promise.resolve().then((function(){return ue(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,n)})).then((function(e){return e})).then(r,(function(e){M(\"failed to asynchronously prepare wasm: \"+e),oe(e)}))}function se(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ce(e){e.terminate(),e.onmessage=()=>{}}function le(e){(e=me.hb[e])||oe(),me.Mb(e)}function pe(e){var n=me.Ab();if(!n)return 6;me.ib.push(n),me.hb[e.fb]=n,n.fb=e.fb;var r={cmd:\"run\",start_routine:e.Nb,arg:e.xb,pthread_ptr:e.fb};return v&&n.ref(),n.postMessage(r,e.Tb),0}function de(e){if(w)return kn(1,1,e);F||(me.Ob(),f.onExit&&f.onExit(e),q=!0),b(e,new se(e))}function he(e){if(w)throw ge(e),\"unwind\";de(e)}ie(ne=\"ort-wasm-threaded.wasm\")||(ne=T(ne));var me={lb:[],ib:[],vb:[],hb:{},qb:function(){w&&me.Eb()},Vb:function(){},Eb:function(){me.receiveObjectTransfer=me.Lb,me.threadInitTLS=me.ub,me.setExitStatus=me.tb,F=!1},tb:function(){},Xb:[\"$terminateWorker\"],Ob:function(){for(var e of me.ib)ce(e);for(e of me.lb)ce(e);me.lb=[],me.ib=[],me.hb=[]},Mb:function(e){var n=e.fb;delete me.hb[n],me.lb.push(e),me.ib.splice(me.ib.indexOf(e),1),e.fb=0,v&&e.unref(),Kn(n)},Lb:function(){},ub:function(){me.vb.forEach((e=>e()))},Kb:e=>new Promise((n=>{e.onmessage=r=>{var t=(r=r.data).cmd;if(e.fb&&(me.yb=e.fb),r.targetThread&&r.targetThread!=Ln()){var a=me.hb[r.Wb];a?a.postMessage(r,r.transferList):M('Internal error! Worker sent a message \"'+t+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===t?sn(r.queue):\"spawnThread\"===t?pe(r):\"cleanupThread\"===t?le(r.thread):\"killThread\"===t?(r=r.thread,t=me.hb[r],delete me.hb[r],ce(t),Kn(r),me.ib.splice(me.ib.indexOf(t),1),t.fb=0):\"cancelThread\"===t?me.hb[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===t?(e.loaded=!0,v&&!e.fb&&e.unref(),n(e)):\"print\"===t?C(\"Thread \"+r.threadId+\": \"+r.text):\"printErr\"===t?M(\"Thread \"+r.threadId+\": \"+r.text):\"alert\"===t?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===t?f[r.handler](...r.args):t&&M(\"worker sent an unknown command \"+t);me.yb=void 0},e.onerror=e=>{throw M(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){})));var r,t=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])f.hasOwnProperty(r)&&t.push(r);e.postMessage({cmd:\"load\",handlers:t,urlOrBlob:f.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),Jb:function(e){e()},wb:function(){var e=T(\"ort-wasm-threaded.worker.js\");e=new Worker(e),me.lb.push(e)},Ab:function(){return 0==me.lb.length&&(me.wb(),me.Kb(me.lb[0])),me.lb.pop()}};function be(e){for(;0<e.length;)e.shift()(f)}function ge(e){if(w)return kn(2,0,e);try{he(e)}catch(e){e instanceof se||\"unwind\"==e||b(1,e)}}f.PThread=me,f.establishStackSpace=function(){var e=Ln(),n=o()[e+52>>2>>>0];rr(n,n-(e=o()[e+56>>2>>>0])),ar(n)};var ye=[];function ve(e){this.mb=e-24,this.Ib=function(e){i()[this.mb+4>>2>>>0]=e},this.Cb=function(e){i()[this.mb+8>>2>>>0]=e},this.Gb=function(){o()[this.mb>>2>>>0]=0},this.Bb=function(){n()[this.mb+12>>0>>>0]=0},this.Hb=function(){n()[this.mb+13>>0>>>0]=0},this.qb=function(e,n){this.zb(),this.Ib(e),this.Cb(n),this.Gb(),this.Bb(),this.Hb()},this.zb=function(){i()[this.mb+16>>2>>>0]=0}}function we(e,n,r,t){return w?kn(3,1,e,n,r,t):_e(e,n,r,t)}function _e(e,n,r,t){if(\"undefined\"==typeof SharedArrayBuffer)return M(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?we(e,n,r,t):(e={Nb:r,fb:e,xb:t,Tb:a},w?(e.Ub=\"spawnThread\",postMessage(e,a),0):pe(e))}function Te(e,n,r){return w?kn(4,1,e,n,r):0}function Ae(e,n){if(w)return kn(5,1,e,n)}function Oe(e,n){if(w)return kn(6,1,e,n)}function Se(e,n,r){if(w)return kn(7,1,e,n,r)}function Ee(e,n,r){return w?kn(8,1,e,n,r):0}function ke(e,n){if(w)return kn(9,1,e,n)}function Ce(e,n,r){if(w)return kn(10,1,e,n,r)}function Me(e,n,r,t){if(w)return kn(11,1,e,n,r,t)}function Fe(e,n,r,t){if(w)return kn(12,1,e,n,r,t)}function Pe(e,n,r,t){if(w)return kn(13,1,e,n,r,t)}function Re(e){if(w)return kn(14,1,e)}function xe(e,n){if(w)return kn(15,1,e,n)}function De(e,n,r){if(w)return kn(16,1,e,n,r)}function We(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+e)}}f.invokeEntryPoint=function(e,n){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=J.get(e)),e=r(n),F?me.tb(e):nr(e)};var Ie=void 0;function Ue(e){for(var n=\"\";r()[e>>>0];)n+=Ie[r()[e++>>>0]];return n}var je={},Ye={},He={};function qe(e){if(void 0===e)return\"_unknown\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return 48<=n&&57>=n?\"_\"+e:e}function ze(e,n){return{[e=qe(e)]:function(){return n.apply(this,arguments)}}[e]}function Be(e){var n=Error,r=ze(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\"\\n\"+n.replace(/^Error(:[^\\n]*)?\\n/,\"\"))}));return r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message},r}var Ne=void 0;function Ge(e){throw new Ne(e)}function Le(e,n,r={}){if(!(\"argPackAdvance\"in n))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var t=n.name;if(e||Ge('type \"'+t+'\" must have a positive integer typeid pointer'),Ye.hasOwnProperty(e)){if(r.Db)return;Ge(\"Cannot register type '\"+t+\"' twice\")}Ye[e]=n,delete He[e],je.hasOwnProperty(e)&&(n=je[e],delete je[e],n.forEach((e=>e())))}var Ve=[],Qe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Xe(e){4<e&&0==--Qe[e].rb&&(Qe[e]=void 0,Ve.push(e))}var Je=e=>(e||Ge(\"Cannot use deleted val. handle = \"+e),Qe[e].value),Ze=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Ve.length?Ve.pop():Qe.length;return Qe[n]={rb:1,value:e},n}};function $e(e){return this.fromWireType(o()[e>>2>>>0])}function Ke(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return P.buffer!=x.buffer&&Q(),n.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\"Unknown float type: \"+e)}}function en(e,u,f){switch(u){case 0:return f?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return f?function(e){return t()[e>>>1]}:function(e){return a()[e>>>1]};case 2:return f?function(e){return o()[e>>>2]}:function(e){return i()[e>>>2]};default:throw new TypeError(\"Unknown integer type: \"+e)}}var nn=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function rn(e,n){for(var o=e>>1,i=o+n/2;!(o>=i)&&a()[o>>>0];)++o;if(32<(o<<=1)-e&&nn)return nn.decode(r().slice(e,o));for(o=\"\",i=0;!(i>=n/2);++i){var u=t()[e+2*i>>1>>>0];if(0==u)break;o+=String.fromCharCode(u)}return o}function tn(e,n,r){if(void 0===r&&(r=2147483647),2>r)return 0;var a=n;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);t()[n>>1>>>0]=i,n+=2}return t()[n>>1>>>0]=0,n-a}function an(e){return 2*e.length}function on(e,n){for(var r=0,t=\"\";!(r>=n/4);){var a=o()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function un(e,n,r){if(void 0===r&&(r=2147483647),4>r)return 0;var t=n>>>=0;r=t+r-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[n>>2>>>0]=i,(n+=4)+4>r)break}return o()[n>>2>>>0]=0,n-t}function fn(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);55296<=t&&57343>=t&&++r,n+=4}return n}function sn(e){Atomics.store(o(),e>>2,1),Ln()&&$n(e),Atomics.compareExchange(o(),e>>2,1,0)}function cn(e,n){var r=Ye[e];if(void 0===r){var t=Ue(e=Xn(e));Qn(e),Ge(n+\" has unknown type \"+t)}return r}f.executeNotifiedProxyingQueue=sn;var ln={};function pn(e){var n=ln[e];return void 0===n?Ue(e):n}var dn=[];function hn(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}var mn=[],bn={};function gn(e){return i()[e>>>2]+4294967296*o()[e+4>>>2]}function yn(e){return 0==e%4&&(0!=e%100||0==e%400)}var vn,wn,_n=[0,31,60,91,121,152,182,213,244,274,305,335],Tn=[0,31,59,90,120,151,181,212,243,273,304,334];function An(e){return(yn(e.getFullYear())?_n:Tn)[e.getMonth()]+e.getDate()-1}function On(e,n,r,t,a,o,i){return w?kn(17,1,e,n,r,t,a,o,i):-52}function Sn(e,n,r,t,a,o){if(w)return kn(18,1,e,n,r,t,a,o)}function En(e){var r=V(e)+1,t=Vn(r);return t&&G(e,n(),t,r),t}function kn(e,n){var r=arguments.length-2,t=arguments;return function(e){var n=tr();return e=e(),ar(n),e}((()=>{for(var a=or(8*r),o=a>>3,i=0;i<r;i++){var f=t[2+i];u()[o+i>>>0]=f}return Zn(e,r,a,n)}))}wn=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Cn,Mn=[],Fn={};function Pn(){if(!Cn){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in Fn)void 0===Fn[e]?delete n[e]:n[e]=Fn[e];var r=[];for(e in n)r.push(e+\"=\"+n[e]);Cn=r}return Cn}function Rn(e,r){if(w)return kn(19,1,e,r);var t=0;return Pn().forEach((function(a,o){var u=r+t;for(o=i()[e+4*o>>2>>>0]=u,u=0;u<a.length;++u)n()[o++>>0>>>0]=a.charCodeAt(u);n()[o>>0>>>0]=0,t+=a.length+1})),0}function xn(e,n){if(w)return kn(20,1,e,n);var r=Pn();i()[e>>2>>>0]=r.length;var t=0;return r.forEach((function(e){t+=e.length+1})),i()[n>>2>>>0]=t,0}function Dn(e){return w?kn(21,1,e):52}function Wn(e,n,r,t){return w?kn(22,1,e,n,r,t):52}function In(e,n,r,t,a){return w?kn(23,1,e,n,r,t,a):70}var Un=[null,[],[]];function jn(e,n,t,a){if(w)return kn(24,1,e,n,t,a);for(var o=0,u=0;u<t;u++){var f=i()[n>>2>>>0],s=i()[n+4>>2>>>0];n+=8;for(var c=0;c<s;c++){var l=r()[f+c>>>0],p=Un[e];0===l||10===l?((1===e?C:M)(B(p,0)),p.length=0):p.push(l)}o+=s}return i()[a>>2>>>0]=o,0}var Yn=[31,29,31,30,31,30,31,31,30,31,30,31],Hn=[31,28,31,30,31,30,31,31,30,31,30,31];function qn(e,r,t,a){function i(e,n,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=r[0]+e;return e}function u(e,n){return i(e,n,\"0\")}function f(e,n){function r(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=r(e.getFullYear()-n.getFullYear()))&&0===(t=r(e.getMonth()-n.getMonth()))&&(t=r(e.getDate()-n.getDate())),t}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.jb;for(e=new Date(new Date(e.kb+1900,0,1).getTime());0<n;){var r=e.getMonth(),t=(yn(e.getFullYear())?Yn:Hn)[r];if(!(n>t-e.getDate())){e.setDate(e.getDate()+n);break}n-=t-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=f(n,e)?0>=f(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=o()[a+40>>2>>>0];for(var p in a={Rb:o()[a>>2>>>0],Qb:o()[a+4>>2>>>0],ob:o()[a+8>>2>>>0],sb:o()[a+12>>2>>>0],pb:o()[a+16>>2>>>0],kb:o()[a+20>>2>>>0],gb:o()[a+24>>2>>>0],jb:o()[a+28>>2>>>0],Yb:o()[a+32>>2>>>0],Pb:o()[a+36>>2>>>0],Sb:l?N(l):\"\"},t=N(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.gb].substring(0,3)},\"%A\":function(e){return d[e.gb]},\"%b\":function(e){return h[e.pb].substring(0,3)},\"%B\":function(e){return h[e.pb]},\"%C\":function(e){return u((e.kb+1900)/100|0,2)},\"%d\":function(e){return u(e.sb,2)},\"%e\":function(e){return i(e.sb,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return u(e.ob,2)},\"%I\":function(e){return 0==(e=e.ob)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){for(var n=0,r=0;r<=e.pb-1;n+=(yn(e.kb+1900)?Yn:Hn)[r++]);return u(e.sb+n,3)},\"%m\":function(e){return u(e.pb+1,2)},\"%M\":function(e){return u(e.Qb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.ob&&12>e.ob?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Rb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.gb||7},\"%U\":function(e){return u(Math.floor((e.jb+7-e.gb)/7),2)},\"%V\":function(e){var n=Math.floor((e.jb+7-(e.gb+6)%7)/7);if(2>=(e.gb+371-e.jb-2)%7&&n++,n)53==n&&(4==(r=(e.gb+371-e.jb)%7)||3==r&&yn(e.kb)||(n=1));else{n=52;var r=(e.gb+7-e.jb-1)%7;(4==r||5==r&&yn(e.kb%400-1))&&n++}return u(n,2)},\"%w\":function(e){return e.gb},\"%W\":function(e){return u(Math.floor((e.jb+7-(e.gb+6)%7)/7),2)},\"%y\":function(e){return(e.kb+1900).toString().substring(2)},\"%Y\":function(e){return e.kb+1900},\"%z\":function(e){var n=0<=(e=e.Pb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Sb},\"%%\":function(){return\"%\"}},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(e){var n=Array(V(e)+1);return G(e,n,0,n.length),n}(t=t.replace(/\\0\\0/g,\"%\")),p.length>r?0:(function(e,r){n().set(e,r>>>0)}(p,e),p.length-1)}me.qb();for(var zn=Array(256),Bn=0;256>Bn;++Bn)zn[Bn]=String.fromCharCode(Bn);Ie=zn,Ne=f.BindingError=Be(\"BindingError\"),f.InternalError=Be(\"InternalError\"),f.count_emval_handles=function(){for(var e=0,n=5;n<Qe.length;++n)void 0!==Qe[n]&&++e;return e},f.get_first_emval=function(){for(var e=5;e<Qe.length;++e)if(void 0!==Qe[e])return Qe[e];return null};var Nn=[null,de,ge,we,Te,Ae,Oe,Se,Ee,ke,Ce,Me,Fe,Pe,Re,xe,De,On,Sn,Rn,xn,Dn,Wn,In,jn],Gn={b:function(e,n,r){throw new ve(e).qb(n,r),e},pa:function(){oe(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},aa:function(e){Jn(e,!y,1,!g),me.ub()},C:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):le(e)},U:_e,v:Te,ha:Ae,Q:Oe,S:Se,L:Ee,fa:ke,Z:Ce,ea:Me,E:Fe,R:Pe,O:Re,ga:xe,P:De,K:function(){},ra:function(e,r,a,i,u){var f=We(a);Le(e,{name:r=Ue(r),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?i:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var i=n();else if(2===a)i=t();else{if(4!==a)throw new TypeError(\"Unknown boolean type size: \"+r);i=o()}return this.fromWireType(i[e>>>f])},nb:null})},qa:function(e,n){Le(e,{name:n=Ue(n),fromWireType:function(e){var n=Je(e);return Xe(e),n},toWireType:function(e,n){return Ze(n)},argPackAdvance:8,readValueFromPointer:$e,nb:null})},G:function(e,n,r){r=We(r),Le(e,{name:n=Ue(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:Ke(n,r),nb:null})},q:function(e,n,r,t,a){n=Ue(n),-1===a&&(a=4294967295),a=We(r);var o=e=>e;if(0===t){var i=32-8*r;o=e=>e<<i>>>i}r=n.includes(\"unsigned\")?function(e,n){return n>>>0}:function(e,n){return n},Le(e,{name:n,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:en(n,a,0!==t),nb:null})},n:function(e,n,r){function t(e){e>>=2;var n=i();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];Le(e,{name:r=Ue(r),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Db:!0})},H:function(e,n){var t=\"std::string\"===(n=Ue(n));Le(e,{name:n,fromWireType:function(e){var n=i()[e>>2>>>0],a=e+4;if(t)for(var o=a,u=0;u<=n;++u){var f=a+u;if(u==n||0==r()[f>>>0]){if(o=N(o,f-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=f+1}}else{for(s=Array(n),u=0;u<n;++u)s[u]=String.fromCharCode(r()[a+u>>>0]);s=s.join(\"\")}return Qn(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a,o=\"string\"==typeof n;o||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Ge(\"Cannot pass non-string to std::string\"),a=t&&o?V(n):n.length;var u=Vn(4+a+1),f=u+4>>>0;if(i()[u>>2>>>0]=a,t&&o)L(n,f,a+1);else if(o)for(o=0;o<a;++o){var s=n.charCodeAt(o);255<s&&(Qn(f),Ge(\"String has UTF-16 code units that do not fit in 8 bits\")),r()[f+o>>>0]=s}else for(o=0;o<a;++o)r()[f+o>>>0]=n[o];return null!==e&&e.push(Qn,u),u},argPackAdvance:8,readValueFromPointer:$e,nb:function(e){Qn(e)}})},x:function(e,n,r){if(r=Ue(r),2===n)var t=rn,o=tn,u=an,f=()=>a(),s=1;else 4===n&&(t=on,o=un,u=fn,f=()=>i(),s=2);Le(e,{name:r,fromWireType:function(e){for(var r,a=i()[e>>>2],o=f(),u=e+4,c=0;c<=a;++c){var l=e+4+c*n;c!=a&&0!=o[l>>>s]||(u=t(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+n)}return Qn(e),r},toWireType:function(e,t){\"string\"!=typeof t&&Ge(\"Cannot pass non-string to C++ string type \"+r);var a=u(t),f=Vn(4+a+n);return f>>>=0,i()[f>>>2]=a>>s,o(t,f+4,a+n),null!==e&&e.push(Qn,f),f},argPackAdvance:8,readValueFromPointer:$e,nb:function(e){Qn(e)}})},sa:function(e,n){Le(e,{Fb:!0,name:n=Ue(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},V:function(){return 1048576},ka:function(){return!0},W:function(e,n,r,t){e==n?setTimeout((()=>sn(t))):w?postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:t}):(e=me.hb[e])&&e.postMessage({cmd:\"processProxyingQueue\",queue:t})},$:function(){return-1},s:function(e,n,r){e=Je(e),n=cn(n,\"emval::as\");var t=[],a=Ze(t);return i()[r>>2>>>0]=a,n.toWireType(t,e)},j:function(e,n,r,t,a){e=dn[e],n=Je(n),r=pn(r);var o=[];return i()[t>>2>>>0]=Ze(o),e(n,r,o,a)},z:function(e,n,r,t){(e=dn[e])(n=Je(n),r=pn(r),null,t)},c:Xe,I:function(e,n){return(e=Je(e))==Je(n)},r:function(e){return 0===e?Ze(hn()):(e=pn(e),Ze(hn()[e]))},i:function(e,n){var r=function(e,n){for(var r=Array(e),t=0;t<e;++t)r[t]=cn(i()[n+4*t>>2>>>0],\"parameter \"+t);return r}(e,n),t=r[0];n=t.name+\"_$\"+r.slice(1).map((function(e){return e.name})).join(\"_\")+\"$\";var a=mn[n];if(void 0!==a)return a;a=[\"retType\"];for(var o=[t],u=\"\",f=0;f<e-1;++f)u+=(0!==f?\", \":\"\")+\"arg\"+f,a.push(\"argType\"+f),o.push(r[1+f]);var s=\"return function \"+qe(\"methodCaller_\"+n)+\"(handle, name, destructors, args) {\\n\",c=0;for(f=0;f<e-1;++f)s+=\"    var arg\"+f+\" = argType\"+f+\".readValueFromPointer(args\"+(c?\"+\"+c:\"\")+\");\\n\",c+=r[f+1].argPackAdvance;for(s+=\"    var rv = handle[name](\"+u+\");\\n\",f=0;f<e-1;++f)r[f+1].deleteObject&&(s+=\"    argType\"+f+\".deleteObject(arg\"+f+\");\\n\");return t.Fb||(s+=\"    return retType.toWireType(destructors, rv);\\n\"),a.push(s+\"};\\n\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof n+\" which is not a function\");var r=ze(n.name||\"unknownFunctionName\",(function(){}));return r.prototype=n.prototype,r=new r,(e=n.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var n=dn.length;return dn.push(e),n}(e),mn[n]=a},t:function(e,n){return e=Je(e),n=Je(n),Ze(e[n])},d:function(e){4<e&&(Qe[e].rb+=1)},y:function(e,n,r,t){e=Je(e);var a=bn[n];return a||(a=function(e){for(var n=\"\",r=0;r<e;++r)n+=(0!==r?\", \":\"\")+\"arg\"+r;var t=\"return function emval_allocator_\"+e+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(r=0;r<e;++r)t+=\"var argType\"+r+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+r+\"');\\nvar arg\"+r+\" = argType\"+r+\".readValueFromPointer(args);\\nargs += argType\"+r+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",t+\"var obj = new constructor(\"+n+\");\\nreturn valueToHandle(obj);\\n}\\n\")(cn,f,Ze,(()=>i()))}(n),bn[n]=a),a(e,r,t)},ta:function(){return Ze([])},l:function(e){e=Je(e);for(var n=Array(e.length),r=0;r<e.length;r++)n[r]=e[r];return Ze(n)},e:function(e){return Ze(pn(e))},k:function(){return Ze({})},h:function(e){for(var n=Je(e);n.length;){var r=n.pop();n.pop()(r)}Xe(e)},f:function(e,n,r){e=Je(e),n=Je(n),r=Je(r),e[n]=r},g:function(e,n){return e=(e=cn(e,\"_emval_take_value\")).readValueFromPointer(n),Ze(e)},la:function(e,n){e=new Date(1e3*gn(e)),o()[n>>2>>>0]=e.getUTCSeconds(),o()[n+4>>2>>>0]=e.getUTCMinutes(),o()[n+8>>2>>>0]=e.getUTCHours(),o()[n+12>>2>>>0]=e.getUTCDate(),o()[n+16>>2>>>0]=e.getUTCMonth(),o()[n+20>>2>>>0]=e.getUTCFullYear()-1900,o()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[n+28>>2>>>0]=e},ma:function(e,n){e=new Date(1e3*gn(e)),o()[n>>2>>>0]=e.getSeconds(),o()[n+4>>2>>>0]=e.getMinutes(),o()[n+8>>2>>>0]=e.getHours(),o()[n+12>>2>>>0]=e.getDate(),o()[n+16>>2>>>0]=e.getMonth(),o()[n+20>>2>>>0]=e.getFullYear()-1900,o()[n+24>>2>>>0]=e.getDay();var r=0|An(e);o()[n+28>>2>>>0]=r,o()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=t&&e.getTimezoneOffset()==Math.min(t,r)),o()[n+32>>2>>>0]=e},na:function(e){var n=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),r=o()[e+32>>2>>>0],t=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=new Date(n.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,a);return 0>r?o()[e+32>>2>>>0]=Number(a!=i&&u==t):0<r!=(u==t)&&(a=Math.max(i,a),n.setTime(n.getTime()+6e4*((0<r?u:a)-t))),o()[e+24>>2>>>0]=n.getDay(),r=0|An(n),o()[e+28>>2>>>0]=r,o()[e>>2>>>0]=n.getSeconds(),o()[e+4>>2>>>0]=n.getMinutes(),o()[e+8>>2>>>0]=n.getHours(),o()[e+12>>2>>>0]=n.getDate(),o()[e+16>>2>>>0]=n.getMonth(),o()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},X:On,Y:Sn,oa:function(e,n,r){function t(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),u=new Date(a,0,1),f=new Date(a,6,1);a=u.getTimezoneOffset();var s=f.getTimezoneOffset(),c=Math.max(a,s);i()[e>>2>>>0]=60*c,o()[n>>2>>>0]=Number(a!=s),e=t(u),n=t(f),e=En(e),n=En(n),s<a?(i()[r>>2>>>0]=e,i()[r+4>>2>>>0]=n):(i()[r>>2>>>0]=n,i()[r+4>>2>>>0]=e)},m:function(){oe(\"\")},ua:function(){oe(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},D:function(){if(!v&&!y){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";vn||(vn={}),vn[e]||(vn[e]=1,v&&(e=\"warning: \"+e),M(e))}},F:function(){return Date.now()},N:function(){return 4294901760},p:wn,da:function(e,n,t){r().copyWithin(e>>>0,n>>>0,n+t>>>0)},u:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},_:function(e,n,r){Mn.length=n,r>>=3;for(var t=0;t<n;t++)Mn[t]=u()[r+t>>>0];return Nn[e].apply(null,Mn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=P.buffer;try{P.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),Q();var f=1;break e}catch(e){}f=void 0}if(f)return!0}return!1},ja:function(){throw\"unwind\"},ba:Rn,ca:xn,T:he,w:Dn,B:Wn,J:In,A:jn,a:P||f.wasmMemory,ia:qn,o:function(e,n,r,t){return qn(e,n,r,t)}};!function(){function e(e,n){return e=e.exports,f.asm=e,me.vb.push(f.asm.Ta),J=f.asm.Ya,$.unshift(f.asm.va),R=n,me.Jb((()=>{if(re--,f.monitorRunDependencies&&f.monitorRunDependencies(re),0==re&&(null!==te&&(clearInterval(te),te=null),ae)){var e=ae;ae=null,e()}})),e}var n={a:Gn};if(re++,f.monitorRunDependencies&&f.monitorRunDependencies(re),f.instantiateWasm)try{return f.instantiateWasm(n,e)}catch(e){M(\"Module.instantiateWasm callback failed with error: \"+e),c(e)}(function(e,n){var r=ne;return k||\"function\"!=typeof WebAssembly.instantiateStreaming||ie(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?fe(r,e,n):fetch(r,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(n,(function(t){return M(\"wasm streaming compile failed: \"+t),M(\"falling back to ArrayBuffer instantiation\"),fe(r,e,n)}))}))})(n,(function(n){e(n.instance,n.module)})).catch(c)}(),f._OrtInit=function(){return(f._OrtInit=f.asm.wa).apply(null,arguments)},f._OrtCreateSessionOptions=function(){return(f._OrtCreateSessionOptions=f.asm.xa).apply(null,arguments)},f._OrtAppendExecutionProvider=function(){return(f._OrtAppendExecutionProvider=f.asm.ya).apply(null,arguments)},f._OrtAddSessionConfigEntry=function(){return(f._OrtAddSessionConfigEntry=f.asm.za).apply(null,arguments)},f._OrtReleaseSessionOptions=function(){return(f._OrtReleaseSessionOptions=f.asm.Aa).apply(null,arguments)},f._OrtCreateSession=function(){return(f._OrtCreateSession=f.asm.Ba).apply(null,arguments)},f._OrtReleaseSession=function(){return(f._OrtReleaseSession=f.asm.Ca).apply(null,arguments)},f._OrtGetInputCount=function(){return(f._OrtGetInputCount=f.asm.Da).apply(null,arguments)},f._OrtGetOutputCount=function(){return(f._OrtGetOutputCount=f.asm.Ea).apply(null,arguments)},f._OrtGetInputName=function(){return(f._OrtGetInputName=f.asm.Fa).apply(null,arguments)},f._OrtGetOutputName=function(){return(f._OrtGetOutputName=f.asm.Ga).apply(null,arguments)},f._OrtFree=function(){return(f._OrtFree=f.asm.Ha).apply(null,arguments)},f._OrtCreateTensor=function(){return(f._OrtCreateTensor=f.asm.Ia).apply(null,arguments)},f._OrtGetTensorData=function(){return(f._OrtGetTensorData=f.asm.Ja).apply(null,arguments)},f._OrtReleaseTensor=function(){return(f._OrtReleaseTensor=f.asm.Ka).apply(null,arguments)},f._OrtCreateRunOptions=function(){return(f._OrtCreateRunOptions=f.asm.La).apply(null,arguments)},f._OrtAddRunConfigEntry=function(){return(f._OrtAddRunConfigEntry=f.asm.Ma).apply(null,arguments)},f._OrtReleaseRunOptions=function(){return(f._OrtReleaseRunOptions=f.asm.Na).apply(null,arguments)},f._OrtRun=function(){return(f._OrtRun=f.asm.Oa).apply(null,arguments)},f._OrtEndProfiling=function(){return(f._OrtEndProfiling=f.asm.Pa).apply(null,arguments)};var Ln=f._pthread_self=function(){return(Ln=f._pthread_self=f.asm.Qa).apply(null,arguments)},Vn=f._malloc=function(){return(Vn=f._malloc=f.asm.Ra).apply(null,arguments)},Qn=f._free=function(){return(Qn=f._free=f.asm.Sa).apply(null,arguments)};f.__emscripten_tls_init=function(){return(f.__emscripten_tls_init=f.asm.Ta).apply(null,arguments)};var Xn=f.___getTypeName=function(){return(Xn=f.___getTypeName=f.asm.Ua).apply(null,arguments)};f.__embind_initialize_bindings=function(){return(f.__embind_initialize_bindings=f.asm.Va).apply(null,arguments)};var Jn=f.__emscripten_thread_init=function(){return(Jn=f.__emscripten_thread_init=f.asm.Wa).apply(null,arguments)};function Zn(){return(Zn=f.asm.Za).apply(null,arguments)}f.__emscripten_thread_crashed=function(){return(f.__emscripten_thread_crashed=f.asm.Xa).apply(null,arguments)};var $n=f.__emscripten_proxy_execute_task_queue=function(){return($n=f.__emscripten_proxy_execute_task_queue=f.asm._a).apply(null,arguments)};function Kn(){return(Kn=f.asm.$a).apply(null,arguments)}var er,nr=f.__emscripten_thread_exit=function(){return(nr=f.__emscripten_thread_exit=f.asm.ab).apply(null,arguments)};function rr(){return(rr=f.asm.bb).apply(null,arguments)}function tr(){return(tr=f.asm.cb).apply(null,arguments)}function ar(){return(ar=f.asm.db).apply(null,arguments)}function or(){return(or=f.asm.eb).apply(null,arguments)}function ir(){function e(){if(!er&&(er=!0,f.calledRun=!0,!q)&&(w||be($),s(f),f.onRuntimeInitialized&&f.onRuntimeInitialized(),!w)){if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var e=f.postRun.shift();K.unshift(e)}be(K)}}if(!(0<re))if(w)s(f),w||be($),startWorker(f);else{if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)ee();be(Z),0<re||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){f.setStatus(\"\")}),1),e()}),1)):e())}}if(f.UTF8ToString=N,f.stringToUTF8=L,f.lengthBytesUTF8=V,f.keepRuntimeAlive=function(){return F},f.wasmMemory=P,f.stackAlloc=or,f.stackSave=tr,f.stackRestore=ar,f.ExitStatus=se,f.PThread=me,ae=function e(){er||ir(),er||(ae=e)},f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();return ir(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise(function(a,b){aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,function(d,g){d?c(d):b(g.buffer)})};1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);process.on(\"uncaughtException\",function(a){throw a;});\nif(15>process.versions.node.split(\".\")[0])process.on(\"unhandledRejection\",function(a){throw a;});e.inspect=function(){return\"[Emscripten Module object]\"}}else if(da||r)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;\nb.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\n\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,ka=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction la(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&ka)return ka.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var k=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|k:(g&7)<<18|h<<12|k<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function D(a,b){return(a>>>=0)?la(F,a,b):\"\"}\nfunction ma(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-g}\nfunction na(a,b,c){return ma(a,F,b,c)}function G(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}var H,F,J,K,L,M,oa,pa;function qa(){var a=C.buffer;e.HEAP8=H=new Int8Array(a);e.HEAP16=J=new Int16Array(a);e.HEAP32=L=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=K=new Uint16Array(a);e.HEAPU32=M=new Uint32Array(a);e.HEAPF32=oa=new Float32Array(a);e.HEAPF64=pa=new Float64Array(a)}var ra=[],sa=[],ta=[];\nfunction ua(){var a=e.preRun.shift();ra.unshift(a)}var N=0,va=null,O=null;function B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function wa(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var P;P=\"ort-wasm.wasm\";if(!wa(P)){var xa=P;P=e.locateFile?e.locateFile(xa,v):v+xa}\nfunction ya(a){try{if(a==P&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction za(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(function(b){if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(function(){return ya(a)});if(w)return new Promise(function(b,c){w(a,function(d){b(new Uint8Array(d))},c)})}return Promise.resolve().then(function(){return ya(a)})}\nfunction Aa(a,b,c){return za(a).then(function(d){return WebAssembly.instantiate(d,b)}).then(function(d){return d}).then(c,function(d){z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction Ba(a,b){var c=P;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||wa(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?Aa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(function(d){return WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return Aa(c,a,b)})})}function Ca(a){for(;0<a.length;)a.shift()(e)}\nfunction Da(a){this.Pa=a-24;this.ab=function(b){M[this.Pa+4>>2>>>0]=b};this.Ya=function(b){M[this.Pa+8>>2>>>0]=b};this.Za=function(){L[this.Pa>>2>>>0]=0};this.Xa=function(){H[this.Pa+12>>0>>>0]=0};this.$a=function(){H[this.Pa+13>>0>>>0]=0};this.Va=function(b,c){this.Wa();this.ab(b);this.Ya(c);this.Za();this.Xa();this.$a()};this.Wa=function(){M[this.Pa+16>>2>>>0]=0}}var Ea=0;\nfunction Fa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ga=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ga[F[a++>>>0]];return b}var Ha={},Ia={},Ja={};function Ka(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function La(a,b){a=Ka(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Ma(a){var b=Error,c=La(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Na=void 0;function R(a){throw new Na(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(Ia.hasOwnProperty(a)){if(c.bb)return;R(\"Cannot register type '\"+d+\"' twice\")}Ia[a]=b;delete Ja[a];Ha.hasOwnProperty(a)&&(b=Ha[a],delete Ha[a],b.forEach(g=>g()))}var Oa=[],T=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Pa(a){4<a&&0===--T[a].Ta&&(T[a]=void 0,Oa.push(a))}\nvar U=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return T[a].value},V=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Oa.length?Oa.pop():T.length;T[b]={Ta:1,value:a};return b}};function Qa(a){return this.fromWireType(L[a>>2>>>0])}function Ra(a,b){switch(b){case 2:return function(c){return this.fromWireType(oa[c>>>2])};case 3:return function(c){return this.fromWireType(pa[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Sa(a,b,c){switch(b){case 0:return c?function(d){return H[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return J[d>>>1]}:function(d){return K[d>>>1]};case 2:return c?function(d){return L[d>>>2]}:function(d){return M[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction Ua(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&K[c>>>0];)++c;c<<=1;if(32<c-a&&Ta)return Ta.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=J[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Va(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)J[b>>1>>>0]=a.charCodeAt(g),b+=2;J[b>>1>>>0]=0;return b-d}function Wa(a){return 2*a.length}\nfunction Xa(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=L[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function Ya(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var k=a.charCodeAt(++g);h=65536+((h&1023)<<10)|k&1023}L[b>>2>>>0]=h;b+=4;if(b+4>c)break}L[b>>2>>>0]=0;return b-d}\nfunction Za(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function W(a,b){var c=Ia[a];if(void 0===c){a=$a(a);var d=Q(a);X(a);R(b+\" has unknown type \"+d)}return c}var ab={};function Y(a){var b=ab[a];return void 0===b?Q(a):b}var cb=[];function db(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function eb(a){var b=cb.length;cb.push(a);return b}\nfunction fb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=W(M[b+4*d>>2>>>0],\"parameter \"+d);return c}function gb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=La(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}var hb=[];\nfunction ib(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(W,e,V,()=>M)}var jb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var kb=[0,31,60,91,121,152,182,213,244,274,305,335],lb=[0,31,59,90,120,151,181,212,243,273,304,334];function mb(a){return(Z(a.getFullYear())?kb:lb)[a.getMonth()]+a.getDate()-1}function nb(a){var b=G(a)+1,c=ob(b);c&&ma(a,H,c,b);return c}var pb;pb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var qb={};\nfunction rb(){if(!sb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in qb)void 0===qb[b]?delete a[b]:a[b]=qb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);sb=c}return sb}var sb,tb=[null,[],[]],ub=[31,29,31,30,31,30,31,31,30,31,30,31],vb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction wb(a){var b=Array(G(a)+1);ma(a,b,0,b.length);return b}\nfunction xb(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function k(f,q){function t(bb){return 0>bb?-1:0<bb?1:0}var I;0===(I=t(f.getFullYear()-q.getFullYear()))&&0===(I=t(f.getMonth()-q.getMonth()))&&(I=t(f.getDate()-q.getDate()));return I}function l(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Na;for(f=new Date((new Date(f.Oa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),I=(Z(f.getFullYear())?ub:vb)[t];if(q>I-f.getDate())q-=I-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=l(new Date(f.getFullYear(),\n0,4));t=l(t);return 0>=k(q,f)?0>=k(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=L[d+40>>2>>>0];d={gb:L[d>>2>>>0],fb:L[d+4>>2>>>0],Ra:L[d+8>>2>>>0],Ua:L[d+12>>2>>>0],Sa:L[d+16>>2>>>0],Oa:L[d+20>>2>>>0],Ja:L[d+24>>2>>>0],Na:L[d+28>>2>>>0],ib:L[d+32>>2>>>0],eb:L[d+36>>2>>>0],hb:p?D(p):\"\"};c=D(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Ja].substring(0,3)},\"%A\":function(f){return x[f.Ja]},\"%b\":function(f){return E[f.Sa].substring(0,\n3)},\"%B\":function(f){return E[f.Sa]},\"%C\":function(f){return h((f.Oa+1900)/100|0,2)},\"%d\":function(f){return h(f.Ua,2)},\"%e\":function(f){return g(f.Ua,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ra,2)},\"%I\":function(f){f=f.Ra;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Sa-1;q+=(Z(f.Oa+1900)?ub:vb)[t++]);return h(f.Ua+q,3)},\"%m\":function(f){return h(f.Sa+1,2)},\"%M\":function(f){return h(f.fb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ra&&12>f.Ra?\"AM\":\"PM\"},\"%S\":function(f){return h(f.gb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Ja||7},\"%U\":function(f){return h(Math.floor((f.Na+7-f.Ja)/7),2)},\"%V\":function(f){var q=Math.floor((f.Na+7-(f.Ja+6)%7)/7);2>=(f.Ja+371-f.Na-2)%7&&q++;if(q)53==q&&(t=(f.Ja+371-f.Na)%7,4==t||3==t&&Z(f.Oa)||(q=1));else{q=52;var t=(f.Ja+7-f.Na-1)%7;(4==t||5==t&&Z(f.Oa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Ja},\"%W\":function(f){return h(Math.floor((f.Na+\n7-(f.Ja+6)%7)/7),2)},\"%y\":function(f){return(f.Oa+1900).toString().substring(2)},\"%Y\":function(f){return f.Oa+1900},\"%z\":function(f){f=f.eb;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.hb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=wb(c);if(u.length>b)return 0;H.set(u,a>>>0);return u.length-1}\nfor(var yb=Array(256),zb=0;256>zb;++zb)yb[zb]=String.fromCharCode(zb);Ga=yb;Na=e.BindingError=Ma(\"BindingError\");e.InternalError=Ma(\"InternalError\");e.count_emval_handles=function(){for(var a=0,b=5;b<T.length;++b)void 0!==T[b]&&++a;return a};e.get_first_emval=function(){for(var a=5;a<T.length;++a)if(void 0!==T[a])return T[a];return null};\nvar Ab={a:function(a,b,c){(new Da(a)).Va(b,c);Ea++;throw a;},ca:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){return 0},Y:function(){},M:function(){},O:function(){},H:function(){return 0},W:function(){},R:function(){},V:function(){},z:function(){},N:function(){},K:function(){},X:function(){},L:function(){},G:function(){},fa:function(a,b,c,d,g){var h=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(k){return!!k},\ntoWireType:function(k,l){return l?d:g},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var l=H;else if(2===c)l=J;else if(4===c)l=L;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(l[k>>>h])},Qa:null})},ea:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=U(c);Pa(c);return d},toWireType:function(c,d){return V(d)},argPackAdvance:8,readValueFromPointer:Qa,Qa:null})},B:function(a,b,c){c=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},\ntoWireType:function(d,g){return g},argPackAdvance:8,readValueFromPointer:Ra(b,c),Qa:null})},o:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=Fa(c);var h=l=>l;if(0===d){var k=32-8*c;h=l=>l<<k>>>k}c=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Sa(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var k=M;return new g(k.buffer,k[h+1>>>0],k[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,\nUint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{bb:!0})},C:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=M[d>>2>>>0],h=d+4;if(c)for(var k=h,l=0;l<=g;++l){var n=h+l;if(l==g||0==F[n>>>0]){k=D(k,n-k);if(void 0===p)var p=k;else p+=String.fromCharCode(0),p+=k;k=n+1}}else{p=Array(g);for(l=0;l<g;++l)p[l]=String.fromCharCode(F[h+l>>>0]);p=p.join(\"\")}X(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h,k=\"string\"==typeof g;k||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");c&&k?h=G(g):h=g.length;var l=ob(4+h+1);var n=l+4>>>0;M[l>>2>>>0]=h;if(c&&k)na(g,n,h+1);else if(k)for(k=0;k<h;++k){var p=g.charCodeAt(k);255<p&&(X(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+k>>>0]=p}else for(k=0;k<h;++k)F[n+k>>>0]=g[k];null!==d&&d.push(X,l);return l},argPackAdvance:8,\nreadValueFromPointer:Qa,Qa:function(d){X(d)}})},t:function(a,b,c){c=Q(c);if(2===b){var d=Ua;var g=Va;var h=Wa;var k=()=>K;var l=1}else 4===b&&(d=Xa,g=Ya,h=Za,k=()=>M,l=2);S(a,{name:c,fromWireType:function(n){for(var p=M[n>>>2],u=k(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>l])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}X(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=ob(4+u+b);x>>>=0;M[x>>>\n2]=u>>l;g(p,x+4,u+b);null!==n&&n.push(X,x);return x},argPackAdvance:8,readValueFromPointer:Qa,Qa:function(n){X(n)}})},ga:function(a,b){b=Q(b);S(a,{cb:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return!0},p:function(a,b,c){a=U(a);b=W(b,\"emval::as\");var d=[],g=V(d);M[c>>2>>>0]=g;return b.toWireType(d,a)},i:function(a,b,c,d,g){a=cb[a];b=U(b);c=Y(c);var h=[];M[d>>2>>>0]=V(h);return a(b,c,h,g)},u:function(a,b,c,d){a=cb[a];b=U(b);c=Y(c);a(b,c,null,d)},b:Pa,\nE:function(a,b){a=U(a);b=U(b);return a==b},w:function(a){if(0===a)return V(db());a=Y(a);return V(db()[a])},h:function(a,b){var c=fb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=hb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],k=\"\",l=0;l<a-1;++l)k+=(0!==l?\", \":\"\")+\"arg\"+l,g.push(\"argType\"+l),h.push(c[1+l]);var n=\"return function \"+Ka(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(l=0;l<a-1;++l)n+=\"    var arg\"+l+\" = argType\"+l+\n\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[l+1].argPackAdvance;n+=\"    var rv = handle[name](\"+k+\");\\n\";for(l=0;l<a-1;++l)c[l+1].deleteObject&&(n+=\"    argType\"+l+\".deleteObject(arg\"+l+\");\\n\");d.cb||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=gb(g).apply(null,h);g=eb(a);return hb[b]=g},v:function(a,b){a=U(a);b=U(b);return V(a[b])},c:function(a){4<a&&(T[a].Ta+=1)},ia:function(a,b,c,d){a=U(a);var g=jb[b];g||(g=ib(b),jb[b]=g);return g(a,c,d)},D:function(){return V([])},\nk:function(a){a=U(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return V(b)},d:function(a){return V(Y(a))},j:function(){return V({})},g:function(a){for(var b=U(a);b.length;){var c=b.pop();b.pop()(c)}Pa(a)},e:function(a,b,c){a=U(a);b=U(b);c=U(c);a[b]=c},f:function(a,b){a=W(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return V(a)},_:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getUTCSeconds();L[b+4>>2>>>0]=a.getUTCMinutes();L[b+8>>2>>>0]=a.getUTCHours();\nL[b+12>>2>>>0]=a.getUTCDate();L[b+16>>2>>>0]=a.getUTCMonth();L[b+20>>2>>>0]=a.getUTCFullYear()-1900;L[b+24>>2>>>0]=a.getUTCDay();L[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},$:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getSeconds();L[b+4>>2>>>0]=a.getMinutes();L[b+8>>2>>>0]=a.getHours();L[b+12>>2>>>0]=a.getDate();L[b+16>>2>>>0]=a.getMonth();L[b+20>>2>>>0]=a.getFullYear()-1900;L[b+24>>2>>>0]=a.getDay();L[b+28>>2>>>0]=mb(a)|0;L[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();L[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},aa:function(a){var b=new Date(L[a+20>>2>>>0]+1900,L[a+16>>2>>>0],L[a+12>>2>>>0],L[a+8>>2>>>0],L[a+4>>2>>>0],L[a>>2>>>0],0),c=L[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(h,g);0>c?\nL[a+32>>2>>>0]=Number(g!=h&&k==d):0<c!=(k==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?k:g)-d)));L[a+24>>2>>>0]=b.getDay();L[a+28>>2>>>0]=mb(b)|0;L[a>>2>>>0]=b.getSeconds();L[a+4>>2>>>0]=b.getMinutes();L[a+8>>2>>>0]=b.getHours();L[a+12>>2>>>0]=b.getDate();L[a+16>>2>>>0]=b.getMonth();L[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},P:function(){return-52},Q:function(){},ba:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),k=new Date(g,6,1);g=h.getTimezoneOffset();var l=k.getTimezoneOffset();M[a>>2>>>0]=60*Math.max(g,l);L[b>>2>>>0]=Number(g!=l);a=d(h);b=d(k);a=nb(a);b=nb(b);l<g?(M[c>>2>>>0]=a,M[c+4>>2>>>0]=b):(M[c>>2>>>0]=b,M[c+4>>2>>>0]=a)},q:function(){B(\"\")},ha:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},A:function(){return Date.now()},J:function(){return 4294901760},n:pb,U:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var k=C.buffer;try{C.grow(h.call(g,4294901760,d)-k.byteLength+65535>>>16);qa();var l=1;break a}catch(n){}l=void 0}if(l)return!0}return!1},S:function(a,b){var c=0;rb().forEach(function(d,g){var h=b+c;g=M[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)H[g++>>0>>>0]=d.charCodeAt(h);H[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},T:function(a,b){var c=rb();M[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});M[b>>2>>>0]=d;return 0},s:function(){return 52},y:function(){return 52},F:function(){return 70},x:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var k=M[b>>2>>>0],l=M[b+4>>2>>>0];b+=8;for(var n=0;n<l;n++){var p=F[k+n>>>0],u=tb[a];0===p||10===p?((1===a?ia:z)(la(u,0)),u.length=0):u.push(p)}g+=l}M[d>>2>>>0]=g;return 0},da:xb,m:function(a,b,c,d){return xb(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;qa();sa.unshift(e.asm.ka);N--;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(0==N&&(null!==va&&(clearInterval(va),va=null),O)){var d=O;O=null;d()}return c}var b={a:Ab};N++;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Ba(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.ma).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.na).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.oa).apply(null,arguments)};e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.pa).apply(null,arguments)};\ne._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.qa).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.ra).apply(null,arguments)};e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.sa).apply(null,arguments)};e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar ob=e._malloc=function(){return(ob=e._malloc=e.asm.Fa).apply(null,arguments)},X=e._free=function(){return(X=e._free=e.asm.Ga).apply(null,arguments)},$a=e.___getTypeName=function(){return($a=e.___getTypeName=e.asm.Ha).apply(null,arguments)};e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Bb(){return(Bb=e.asm.Ka).apply(null,arguments)}function Cb(){return(Cb=e.asm.La).apply(null,arguments)}\nfunction Db(){return(Db=e.asm.Ma).apply(null,arguments)}e.UTF8ToString=D;e.stringToUTF8=na;e.lengthBytesUTF8=G;e.stackAlloc=Db;e.stackSave=Bb;e.stackRestore=Cb;var Eb;O=function Fb(){Eb||Gb();Eb||(O=Fb)};\nfunction Gb(){function a(){if(!Eb&&(Eb=!0,e.calledRun=!0,!ja)){Ca(sa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ta.unshift(b)}Ca(ta)}}if(!(0<N)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ua();Ca(ra);0<N||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Gb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","webgpu","logLevelInternal","logLevel","value","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","offset","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","String","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","initTimeout","simd","proxy","numThreads","isInteger","numCpuLogicalCores","navigator","cpus","hardwareConcurrency","Math","min","ceil","initWasm","OnnxruntimeWebAssemblySessionHandler","wasmBackend","OnnxruntimeWebAssemblyBackend","attribute","assign","_cacheKey","sort","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","attr","onnx","AttributeProto","Attribute","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","obj","o","initialize","dispose","WebGLBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","version","floatTextureSetRGBASource","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","slice","newInputShape","squeezeInputShape","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","params","index","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","a","c","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","match","inlineDefs","exec","split","tokens","trim","filter","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","keys","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","build","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","shift","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","location","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","_dataType","len","checkFn","delayFn","maxCounter","_counter","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","n","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","initializer","GraphImpl","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","_nodeProto","NodeProto","opType","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","next","child","_severity","_content","_category","severity","content","category","console","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","bind","logInternal","stack","Date","toISOString","previousConfig","startTime","endCallback","timer","ctx","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","create","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","producerName","producerVersion","modelVersion","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","Guid","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","fromData","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","typeProto","tensorDataTypeStringToEnum","FLOAT16","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","kernelCustomData","gpu","requestAdapter","adapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","profilingMode","requiredFeatures","requestDevice","device","gpuDataManager","createGpuDataManager","kernelPersistentData","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","WebGpuBackend","getFloat32Array","HEAP8","newDims","TensorViewImpl","contextDataOffset","heapU32","HEAPU32","opKernelContext","currentKernelCustomData","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","isSourceGpu","HEAPU8","dataOffset","ComputeContextImpl","logLevelPrefix","LOG","level","messageLevel","logLevelStringToEnum","args","isChannelLast","calcNormalizedBufferSize","guid","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","GpuDataManagerImpl","acosh","asinh","atanh","pool","clipV10","cosh","erf","parseGlobalMaxPoolAttributes","reciprocal","sinh","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","outputSize","vectorize","sharedDimension","dimA","shaderHelper","dimsOutput","doBroadcast","typeA","typeB","typeOutput","expressionScalar","expressionVector","vecSize","scalar","vector","assignment","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","o2iImpl","iType","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","sizeInCode","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","paramList","globalIdxDefinition","createShaderHelper","ShaderHelperImpl","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","getActicationSnippet","inputStorageBuffersDeclarations","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","weightTransposeAttribute","auto_pad","kernel_shape","wIsConst","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","customData","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","activation_params","calculateAlpha","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","permAttr","inputIndicesHelper","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","QUERY_RESOLVE","resolveQuerySet","mappedData","startTimeU64","endTimeU64","profilingTimeBase","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initOrt","loggingLevel","core","getInstance","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","ortInit","path","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","errorCode","_OrtInit","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","scriptSourceCode","what","race","PThread","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","P","Q","W","I","U","u","H","ready","l","h","importScripts","process","versions","ENVIRONMENT_IS_PTHREAD","T","A","O","dirname","__dirname","startsWith","normalize","readFileSync","argv","on","se","F","exitCode","exit","inspect","Worker","href","XMLHttpRequest","open","send","responseText","responseType","response","onerror","S","E","warn","writeSync","print","printErr","thisProgram","quit","wasmBinary","noExitRuntime","oe","R","Y","q","fromCharCode","G","charCodeAt","L","V","HEAP16","HEAPU16","HEAPF32","HEAPF64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","J","Z","$","ee","preRun","ne","re","te","ae","onAbort","RuntimeError","ie","ue","fe","credentials","ok","catch","instantiate","ce","le","me","hb","Mb","pe","Ab","ib","cmd","start_routine","Nb","xb","pthread_ptr","ref","Tb","de","kn","Ob","onExit","he","ge","lb","vb","qb","Eb","Vb","receiveObjectTransfer","Lb","threadInitTLS","ub","setExitStatus","tb","Xb","unref","Kn","Kb","yb","targetThread","Ln","Wb","transferList","sn","thread","loaded","threadId","text","alert","filename","lineno","handlers","urlOrBlob","wasmModule","Jb","wb","be","establishStackSpace","rr","ar","ye","ve","mb","Ib","Cb","Gb","Bb","Hb","zb","we","_e","Ub","Te","Ae","Oe","Se","Ee","ke","Ce","Me","Fe","Pe","Re","xe","De","We","invokeEntryPoint","nr","Ie","Ue","je","Ye","He","qe","ze","apply","arguments","Be","prototype","Ne","Ge","Le","Db","Ve","Qe","Xe","rb","Je","Ze","$e","fromWireType","Ke","en","nn","rn","tn","an","un","fn","Atomics","store","$n","compareExchange","cn","Xn","Qn","executeNotifiedProxyingQueue","ln","pn","dn","hn","globalThis","Function","mn","bn","gn","yn","vn","wn","_n","Tn","An","getFullYear","getMonth","getDate","On","Sn","En","Vn","tr","Zn","hrtime","timeOrigin","Cn","Mn","Fn","Pn","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Rn","xn","Dn","Wn","In","Un","jn","Yn","Hn","qn","getDay","jb","kb","getTime","setDate","setMonth","setFullYear","Rb","Qb","ob","sb","pb","gb","Yb","Pb","Sb","includes","zn","Bn","BindingError","InternalError","count_emval_handles","get_first_emval","Nn","Gn","pa","aa","Jn","ha","fa","ea","ga","ra","toWireType","argPackAdvance","readValueFromPointer","nb","qa","Uint8ClampedArray","sa","Fb","ka","deleteObject","ta","la","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","ma","getSeconds","getMinutes","getHours","getTimezoneOffset","na","setTime","getYear","oa","toTimeString","ua","da","copyWithin","grow","ja","ba","ia","asm","Ta","Ya","va","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","wa","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","_pthread_self","Qa","Ra","Sa","__emscripten_tls_init","___getTypeName","Ua","__embind_initialize_bindings","Va","__emscripten_thread_init","Wa","Za","__emscripten_thread_crashed","Xa","__emscripten_proxy_execute_task_queue","_a","$a","er","__emscripten_thread_exit","ab","cb","db","eb","ir","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}