{"version":3,"file":"ort.wasm-core.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.webgpu = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (options.norm?.mean !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (options.norm?.bias !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, data: Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    const backend = new WebGpuBackend();\n    await backend.initialize();\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              const data = module.HEAPU8.subarray(dataOffset, dataOffset + size);\n\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, data);\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<typeof env.logLevel>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(env.logLevel!);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (env.debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseEluAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu = (context: ComputeContext, attributes: EluAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const parseEluAttributes = (attributes: Record<string, unknown>): EluAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {getInstance, initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n\n      // TODO: support JSEP in worker\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n\n    // init JSEP if available\n    await initJsep(getInstance());\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\nimport {logLevelStringToEnum} from './wasm-common';\n\nlet ortInit: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'uint16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise(function(a,b){aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,function(d,g){d?c(d):b(g.buffer)})};1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);process.on(\"uncaughtException\",function(a){throw a;});\nif(15>process.versions.node.split(\".\")[0])process.on(\"unhandledRejection\",function(a){throw a;});e.inspect=function(){return\"[Emscripten Module object]\"}}else if(da||r)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;\nb.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\n\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,ka=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction la(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&ka)return ka.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var k=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|k:(g&7)<<18|h<<12|k<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function D(a,b){return(a>>>=0)?la(F,a,b):\"\"}\nfunction ma(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-g}\nfunction na(a,b,c){return ma(a,F,b,c)}function G(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}var H,F,J,K,L,M,oa,pa;function qa(){var a=C.buffer;e.HEAP8=H=new Int8Array(a);e.HEAP16=J=new Int16Array(a);e.HEAP32=L=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=K=new Uint16Array(a);e.HEAPU32=M=new Uint32Array(a);e.HEAPF32=oa=new Float32Array(a);e.HEAPF64=pa=new Float64Array(a)}var ra=[],sa=[],ta=[];\nfunction ua(){var a=e.preRun.shift();ra.unshift(a)}var N=0,va=null,O=null;function B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function wa(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var P;P=\"ort-wasm.wasm\";if(!wa(P)){var xa=P;P=e.locateFile?e.locateFile(xa,v):v+xa}\nfunction ya(a){try{if(a==P&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction za(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(function(b){if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(function(){return ya(a)});if(w)return new Promise(function(b,c){w(a,function(d){b(new Uint8Array(d))},c)})}return Promise.resolve().then(function(){return ya(a)})}\nfunction Aa(a,b,c){return za(a).then(function(d){return WebAssembly.instantiate(d,b)}).then(function(d){return d}).then(c,function(d){z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction Ba(a,b){var c=P;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||wa(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?Aa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(function(d){return WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return Aa(c,a,b)})})}function Ca(a){for(;0<a.length;)a.shift()(e)}\nfunction Da(a){this.Pa=a-24;this.ab=function(b){M[this.Pa+4>>2>>>0]=b};this.Ya=function(b){M[this.Pa+8>>2>>>0]=b};this.Za=function(){L[this.Pa>>2>>>0]=0};this.Xa=function(){H[this.Pa+12>>0>>>0]=0};this.$a=function(){H[this.Pa+13>>0>>>0]=0};this.Va=function(b,c){this.Wa();this.ab(b);this.Ya(c);this.Za();this.Xa();this.$a()};this.Wa=function(){M[this.Pa+16>>2>>>0]=0}}var Ea=0;\nfunction Fa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ga=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ga[F[a++>>>0]];return b}var Ha={},Ia={},Ja={};function Ka(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function La(a,b){a=Ka(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Ma(a){var b=Error,c=La(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Na=void 0;function R(a){throw new Na(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(Ia.hasOwnProperty(a)){if(c.bb)return;R(\"Cannot register type '\"+d+\"' twice\")}Ia[a]=b;delete Ja[a];Ha.hasOwnProperty(a)&&(b=Ha[a],delete Ha[a],b.forEach(g=>g()))}var Oa=[],T=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Pa(a){4<a&&0===--T[a].Ta&&(T[a]=void 0,Oa.push(a))}\nvar U=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return T[a].value},V=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Oa.length?Oa.pop():T.length;T[b]={Ta:1,value:a};return b}};function Qa(a){return this.fromWireType(L[a>>2>>>0])}function Ra(a,b){switch(b){case 2:return function(c){return this.fromWireType(oa[c>>>2])};case 3:return function(c){return this.fromWireType(pa[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Sa(a,b,c){switch(b){case 0:return c?function(d){return H[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return J[d>>>1]}:function(d){return K[d>>>1]};case 2:return c?function(d){return L[d>>>2]}:function(d){return M[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction Ua(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&K[c>>>0];)++c;c<<=1;if(32<c-a&&Ta)return Ta.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=J[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Va(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)J[b>>1>>>0]=a.charCodeAt(g),b+=2;J[b>>1>>>0]=0;return b-d}function Wa(a){return 2*a.length}\nfunction Xa(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=L[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function Ya(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var k=a.charCodeAt(++g);h=65536+((h&1023)<<10)|k&1023}L[b>>2>>>0]=h;b+=4;if(b+4>c)break}L[b>>2>>>0]=0;return b-d}\nfunction Za(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function W(a,b){var c=Ia[a];if(void 0===c){a=$a(a);var d=Q(a);X(a);R(b+\" has unknown type \"+d)}return c}var ab={};function Y(a){var b=ab[a];return void 0===b?Q(a):b}var cb=[];function db(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function eb(a){var b=cb.length;cb.push(a);return b}\nfunction fb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=W(M[b+4*d>>2>>>0],\"parameter \"+d);return c}function gb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=La(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}var hb=[];\nfunction ib(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(W,e,V,()=>M)}var jb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var kb=[0,31,60,91,121,152,182,213,244,274,305,335],lb=[0,31,59,90,120,151,181,212,243,273,304,334];function mb(a){return(Z(a.getFullYear())?kb:lb)[a.getMonth()]+a.getDate()-1}function nb(a){var b=G(a)+1,c=ob(b);c&&ma(a,H,c,b);return c}var pb;pb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var qb={};\nfunction rb(){if(!sb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in qb)void 0===qb[b]?delete a[b]:a[b]=qb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);sb=c}return sb}var sb,tb=[null,[],[]],ub=[31,29,31,30,31,30,31,31,30,31,30,31],vb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction wb(a){var b=Array(G(a)+1);ma(a,b,0,b.length);return b}\nfunction xb(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function k(f,q){function t(bb){return 0>bb?-1:0<bb?1:0}var I;0===(I=t(f.getFullYear()-q.getFullYear()))&&0===(I=t(f.getMonth()-q.getMonth()))&&(I=t(f.getDate()-q.getDate()));return I}function l(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Na;for(f=new Date((new Date(f.Oa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),I=(Z(f.getFullYear())?ub:vb)[t];if(q>I-f.getDate())q-=I-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=l(new Date(f.getFullYear(),\n0,4));t=l(t);return 0>=k(q,f)?0>=k(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=L[d+40>>2>>>0];d={gb:L[d>>2>>>0],fb:L[d+4>>2>>>0],Ra:L[d+8>>2>>>0],Ua:L[d+12>>2>>>0],Sa:L[d+16>>2>>>0],Oa:L[d+20>>2>>>0],Ja:L[d+24>>2>>>0],Na:L[d+28>>2>>>0],ib:L[d+32>>2>>>0],eb:L[d+36>>2>>>0],hb:p?D(p):\"\"};c=D(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Ja].substring(0,3)},\"%A\":function(f){return x[f.Ja]},\"%b\":function(f){return E[f.Sa].substring(0,\n3)},\"%B\":function(f){return E[f.Sa]},\"%C\":function(f){return h((f.Oa+1900)/100|0,2)},\"%d\":function(f){return h(f.Ua,2)},\"%e\":function(f){return g(f.Ua,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ra,2)},\"%I\":function(f){f=f.Ra;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Sa-1;q+=(Z(f.Oa+1900)?ub:vb)[t++]);return h(f.Ua+q,3)},\"%m\":function(f){return h(f.Sa+1,2)},\"%M\":function(f){return h(f.fb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ra&&12>f.Ra?\"AM\":\"PM\"},\"%S\":function(f){return h(f.gb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Ja||7},\"%U\":function(f){return h(Math.floor((f.Na+7-f.Ja)/7),2)},\"%V\":function(f){var q=Math.floor((f.Na+7-(f.Ja+6)%7)/7);2>=(f.Ja+371-f.Na-2)%7&&q++;if(q)53==q&&(t=(f.Ja+371-f.Na)%7,4==t||3==t&&Z(f.Oa)||(q=1));else{q=52;var t=(f.Ja+7-f.Na-1)%7;(4==t||5==t&&Z(f.Oa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Ja},\"%W\":function(f){return h(Math.floor((f.Na+\n7-(f.Ja+6)%7)/7),2)},\"%y\":function(f){return(f.Oa+1900).toString().substring(2)},\"%Y\":function(f){return f.Oa+1900},\"%z\":function(f){f=f.eb;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.hb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=wb(c);if(u.length>b)return 0;H.set(u,a>>>0);return u.length-1}\nfor(var yb=Array(256),zb=0;256>zb;++zb)yb[zb]=String.fromCharCode(zb);Ga=yb;Na=e.BindingError=Ma(\"BindingError\");e.InternalError=Ma(\"InternalError\");e.count_emval_handles=function(){for(var a=0,b=5;b<T.length;++b)void 0!==T[b]&&++a;return a};e.get_first_emval=function(){for(var a=5;a<T.length;++a)if(void 0!==T[a])return T[a];return null};\nvar Ab={a:function(a,b,c){(new Da(a)).Va(b,c);Ea++;throw a;},ca:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){return 0},Y:function(){},M:function(){},O:function(){},H:function(){return 0},W:function(){},R:function(){},V:function(){},z:function(){},N:function(){},K:function(){},X:function(){},L:function(){},G:function(){},fa:function(a,b,c,d,g){var h=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(k){return!!k},\ntoWireType:function(k,l){return l?d:g},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var l=H;else if(2===c)l=J;else if(4===c)l=L;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(l[k>>>h])},Qa:null})},ea:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=U(c);Pa(c);return d},toWireType:function(c,d){return V(d)},argPackAdvance:8,readValueFromPointer:Qa,Qa:null})},B:function(a,b,c){c=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},\ntoWireType:function(d,g){return g},argPackAdvance:8,readValueFromPointer:Ra(b,c),Qa:null})},o:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=Fa(c);var h=l=>l;if(0===d){var k=32-8*c;h=l=>l<<k>>>k}c=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Sa(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var k=M;return new g(k.buffer,k[h+1>>>0],k[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,\nUint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{bb:!0})},C:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=M[d>>2>>>0],h=d+4;if(c)for(var k=h,l=0;l<=g;++l){var n=h+l;if(l==g||0==F[n>>>0]){k=D(k,n-k);if(void 0===p)var p=k;else p+=String.fromCharCode(0),p+=k;k=n+1}}else{p=Array(g);for(l=0;l<g;++l)p[l]=String.fromCharCode(F[h+l>>>0]);p=p.join(\"\")}X(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h,k=\"string\"==typeof g;k||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");c&&k?h=G(g):h=g.length;var l=ob(4+h+1);var n=l+4>>>0;M[l>>2>>>0]=h;if(c&&k)na(g,n,h+1);else if(k)for(k=0;k<h;++k){var p=g.charCodeAt(k);255<p&&(X(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+k>>>0]=p}else for(k=0;k<h;++k)F[n+k>>>0]=g[k];null!==d&&d.push(X,l);return l},argPackAdvance:8,\nreadValueFromPointer:Qa,Qa:function(d){X(d)}})},t:function(a,b,c){c=Q(c);if(2===b){var d=Ua;var g=Va;var h=Wa;var k=()=>K;var l=1}else 4===b&&(d=Xa,g=Ya,h=Za,k=()=>M,l=2);S(a,{name:c,fromWireType:function(n){for(var p=M[n>>>2],u=k(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>l])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}X(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=ob(4+u+b);x>>>=0;M[x>>>\n2]=u>>l;g(p,x+4,u+b);null!==n&&n.push(X,x);return x},argPackAdvance:8,readValueFromPointer:Qa,Qa:function(n){X(n)}})},ga:function(a,b){b=Q(b);S(a,{cb:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return!0},p:function(a,b,c){a=U(a);b=W(b,\"emval::as\");var d=[],g=V(d);M[c>>2>>>0]=g;return b.toWireType(d,a)},i:function(a,b,c,d,g){a=cb[a];b=U(b);c=Y(c);var h=[];M[d>>2>>>0]=V(h);return a(b,c,h,g)},u:function(a,b,c,d){a=cb[a];b=U(b);c=Y(c);a(b,c,null,d)},b:Pa,\nE:function(a,b){a=U(a);b=U(b);return a==b},w:function(a){if(0===a)return V(db());a=Y(a);return V(db()[a])},h:function(a,b){var c=fb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=hb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],k=\"\",l=0;l<a-1;++l)k+=(0!==l?\", \":\"\")+\"arg\"+l,g.push(\"argType\"+l),h.push(c[1+l]);var n=\"return function \"+Ka(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(l=0;l<a-1;++l)n+=\"    var arg\"+l+\" = argType\"+l+\n\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[l+1].argPackAdvance;n+=\"    var rv = handle[name](\"+k+\");\\n\";for(l=0;l<a-1;++l)c[l+1].deleteObject&&(n+=\"    argType\"+l+\".deleteObject(arg\"+l+\");\\n\");d.cb||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=gb(g).apply(null,h);g=eb(a);return hb[b]=g},v:function(a,b){a=U(a);b=U(b);return V(a[b])},c:function(a){4<a&&(T[a].Ta+=1)},ia:function(a,b,c,d){a=U(a);var g=jb[b];g||(g=ib(b),jb[b]=g);return g(a,c,d)},D:function(){return V([])},\nk:function(a){a=U(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return V(b)},d:function(a){return V(Y(a))},j:function(){return V({})},g:function(a){for(var b=U(a);b.length;){var c=b.pop();b.pop()(c)}Pa(a)},e:function(a,b,c){a=U(a);b=U(b);c=U(c);a[b]=c},f:function(a,b){a=W(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return V(a)},_:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getUTCSeconds();L[b+4>>2>>>0]=a.getUTCMinutes();L[b+8>>2>>>0]=a.getUTCHours();\nL[b+12>>2>>>0]=a.getUTCDate();L[b+16>>2>>>0]=a.getUTCMonth();L[b+20>>2>>>0]=a.getUTCFullYear()-1900;L[b+24>>2>>>0]=a.getUTCDay();L[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},$:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getSeconds();L[b+4>>2>>>0]=a.getMinutes();L[b+8>>2>>>0]=a.getHours();L[b+12>>2>>>0]=a.getDate();L[b+16>>2>>>0]=a.getMonth();L[b+20>>2>>>0]=a.getFullYear()-1900;L[b+24>>2>>>0]=a.getDay();L[b+28>>2>>>0]=mb(a)|0;L[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();L[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},aa:function(a){var b=new Date(L[a+20>>2>>>0]+1900,L[a+16>>2>>>0],L[a+12>>2>>>0],L[a+8>>2>>>0],L[a+4>>2>>>0],L[a>>2>>>0],0),c=L[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(h,g);0>c?\nL[a+32>>2>>>0]=Number(g!=h&&k==d):0<c!=(k==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?k:g)-d)));L[a+24>>2>>>0]=b.getDay();L[a+28>>2>>>0]=mb(b)|0;L[a>>2>>>0]=b.getSeconds();L[a+4>>2>>>0]=b.getMinutes();L[a+8>>2>>>0]=b.getHours();L[a+12>>2>>>0]=b.getDate();L[a+16>>2>>>0]=b.getMonth();L[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},P:function(){return-52},Q:function(){},ba:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),k=new Date(g,6,1);g=h.getTimezoneOffset();var l=k.getTimezoneOffset();M[a>>2>>>0]=60*Math.max(g,l);L[b>>2>>>0]=Number(g!=l);a=d(h);b=d(k);a=nb(a);b=nb(b);l<g?(M[c>>2>>>0]=a,M[c+4>>2>>>0]=b):(M[c>>2>>>0]=b,M[c+4>>2>>>0]=a)},q:function(){B(\"\")},ha:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},A:function(){return Date.now()},J:function(){return 4294901760},n:pb,U:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var k=C.buffer;try{C.grow(h.call(g,4294901760,d)-k.byteLength+65535>>>16);qa();var l=1;break a}catch(n){}l=void 0}if(l)return!0}return!1},S:function(a,b){var c=0;rb().forEach(function(d,g){var h=b+c;g=M[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)H[g++>>0>>>0]=d.charCodeAt(h);H[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},T:function(a,b){var c=rb();M[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});M[b>>2>>>0]=d;return 0},s:function(){return 52},y:function(){return 52},F:function(){return 70},x:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var k=M[b>>2>>>0],l=M[b+4>>2>>>0];b+=8;for(var n=0;n<l;n++){var p=F[k+n>>>0],u=tb[a];0===p||10===p?((1===a?ia:z)(la(u,0)),u.length=0):u.push(p)}g+=l}M[d>>2>>>0]=g;return 0},da:xb,m:function(a,b,c,d){return xb(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;qa();sa.unshift(e.asm.ka);N--;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(0==N&&(null!==va&&(clearInterval(va),va=null),O)){var d=O;O=null;d()}return c}var b={a:Ab};N++;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Ba(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.ma).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.na).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.oa).apply(null,arguments)};e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.pa).apply(null,arguments)};\ne._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.qa).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.ra).apply(null,arguments)};e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.sa).apply(null,arguments)};e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar ob=e._malloc=function(){return(ob=e._malloc=e.asm.Fa).apply(null,arguments)},X=e._free=function(){return(X=e._free=e.asm.Ga).apply(null,arguments)},$a=e.___getTypeName=function(){return($a=e.___getTypeName=e.asm.Ha).apply(null,arguments)};e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Bb(){return(Bb=e.asm.Ka).apply(null,arguments)}function Cb(){return(Cb=e.asm.La).apply(null,arguments)}\nfunction Db(){return(Db=e.asm.Ma).apply(null,arguments)}e.UTF8ToString=D;e.stringToUTF8=na;e.lengthBytesUTF8=G;e.stackAlloc=Db;e.stackSave=Bb;e.stackRestore=Cb;var Eb;O=function Fb(){Eb||Gb();Eb||(O=Fb)};\nfunction Gb(){function a(){if(!Eb&&(Eb=!0,e.calledRun=!0,!ja)){Ca(sa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ta.unshift(b)}Ca(ta)}}if(!(0<N)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ua();Ca(ra);0<N||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Gb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(57);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","webgpu","logLevelInternal","logLevel","value","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","offset","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","String","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","initTimeout","simd","proxy","numThreads","isInteger","numCpuLogicalCores","navigator","cpus","hardwareConcurrency","Math","min","ceil","initWasm","pathOrBuffer","OnnxruntimeWebAssemblySessionHandler","loadModel","wasmBackend","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","gpu","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","has","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","programManager","ProgramManager","kernels","kernelPersistentData","onuncapturederror","ev","error","GPUValidationError","console","message","profilingQuerySet","createQuerySet","count","dispose","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","end","flush","queue","submit","finish","refreshPendingBuffers","program","inputs","outputIndices","createKernelOutput","createIntermediateOutput","inputTypes","inputDatas","gpuData","programInfo","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","d","inputGpuDataTypesToString","cacheHint","getProgramInfoUniqueKey","artifact","getArtifact","validatedOutputIndices","outputs","_","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","dataType","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","build","setArtifact","LOG_DEBUG","upload","gpuDataId","memcpy","dst","arrayBuffer","download","alloc","create","id","free","ptr","release","createKernel","kernelId","attribute","op","WEBGPU_OP_RESOLVE_RULES","releaseKernel","delete","computeKernel","kernel","kernelEntry","attributes","TensorViewImpl","getFloat32Array","HEAP8","ShapeUtil","newDims","ComputeContextImpl","customData","contextDataOffset","heapU32","HEAPU32","dataIndex","opKernelContext","inputCount","compute","inputsOutputsMapping","mappedInputs","index","output","elementSize","getTensorElementSize","bufferSize","stack","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","initialize","isSourceGpu","HEAPU8","subarray","dataOffset","logLevelPrefix","LOG","msg","messageLevel","logLevelStringToEnum","level","log","Date","toISOString","args","debug","MatMulUtil","a","b","BroadcastUtil","adims","bdims","isMatMul","arank","brank","crank","max","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","shape","finalShape","inputRank","finalRank","getSizeFromDimensionRange","axis","start","rank","strides","tensorRank","axes","x","normalizeAxis","perm","slice","reverse","pad","shape1","shape2","every","PoolConvUtil","isGlobalOperator","inputDims","kernelShape","dilations","pads","isChannelLast","autoPad","adjustPadAndReturnShape","outputDims","computeShapeHelper","filterDims","inSize","stride","dilation","padHeadIndex","padTailIndex","dkernel","floor","padNeeded","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","isValidBroadcast","MIN_CLIP","MAX_CLIP","AttributeWithCacheKeyImpl","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","createBuffer","mappedAtCreation","usage","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","then","destroy","unaryOps","abs","acos","acosh","binaryOps","add","asin","asinh","atan","atanh","pool","averagePool","parseAveragePoolAttributes","clipV10","clip","conv","parseConvAttributes","cos","cosh","div","elu","parseEluAttributes","erf","gemm","parseGemmAttributes","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","parseGlobalMaxPoolAttributes","matMul","maxPool","parseMaxPoolAttributes","mul","neg","pow","reciprocal","sigmoid","sin","sinh","sqrt","sub","tan","tanh","transpose","parseTransposeAttributes","typeSnippet","component","activationFnSnippet","activation","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","hasBias","createConv2DMatMulProgramInfo","metadata","outputShape","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","batchSize","outWidth","outHeight","outChannels","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","y","z","getShaderSource","utilFunctions","computeStrides","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","row","col","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","isBroadcast","areEqual","outputSize","vectorize","calculatedShape","calcShape","sharedDimension","dimA","shaderHelper","dimsA","dimsB","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","offsets","idx","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","processBias","xShape","wShape","outputChannelsPerGroup","group","activationFunction","applyActivation","getActicationSnippet","inputStorageBuffersDeclarations","calculateOutputShape","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","inputShape","adjustPads","inputSpatialShape","spatialRank","dilatedKernelShape","weightTransposeAttribute","getAdjustedConvAttributes","adjustPadsBasedOnAutoPad","newAttributes","activationAttributes","parseInternalActivationAttributes","auto_pad","kernel_shape","wIsConst","w_is_const","validateInputs","concat","adjustedAttributes","conv1d","inputHeight","inputWidth","inputChannels","weightHeight","weightWidth","transposedWeight","wT","transposeProgramMetadata","createTransposeProgramInfo","convInputs","createConv2DMatMulProgramInfoLoader","conv2d","createConv2DMatMulProgramMetadata","clipMin","clipMax","activation_params","activationCacheKey","aShape","bShape","GemmUtil","getShapeOfGemmResult","transA","transB","line","calculateAlpha","alpha","calculateC","m","n","broadcastM","broadcastN","offsetC","beta","createGemmProgramInfo","createGemmProgramInfoLoader","createMatmulProgramInfoLoader","createMatmulProgramInfo","getAdjustedPoolAttributesAndOutputShape","inputShapeAsChannelFirst","hasDilations","adjustPoolAttributes","outputShapeAsChannelFirst","computePoolOutputShape","generatePoolingCode","op1","op2","kw","sw","pwStart","dimIdxW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimIdxH","dimH","kernelSize","kernelStrides","stridesRank","padsRank","padCode","reduce","sum","cur","parsePoolCommonAttributes","ceilMode","ceil_mode","createAveragePoolProgramInfo","countIncludePad","count_include_pad","attr","globalPoolAttributes","storageOrder","createMaxPoolProgramInfo","storage_order","getAdjustedPerm","keys","input","permAttr","sortBasedOnPerm","getOutputShape","inputIndicesHelper","reverseFunc","permFunctionBody","createElementwiseProgramInfoLoader","datasize","expression","createElementwiseProgramShader","inputTensors","createElementwiseProgramInfo","generateClipAttributesFromInputs","repo","attributesBound","buildArtifact","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","layout","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","startTimeU64","endTimeU64","profilingTimeBase","startTime","endTime","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","forEach","toString","currentScript","initializeWebAssembly","initOrt","loggingLevel","core","getInstance","createSessionAllocate","model","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","setRunOptions","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","terminate","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","ortInit","path","response","fetch","promisify","readFile","modelData","inputArray","kvp","tensor","t","result","setSessionOptions","sessionOptionsHandle","sessionOptions","session","use_ort_model_bytes_directly","some","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","typeProto","dateType","tensorTypeToTypedArrayConstructor","errorCode","_OrtInit","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimsOffset","dimIndex","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","dimsLength","stringData","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","extractTransferableBuffers","tensors","buffers","ortWasmFactoryThreaded","initializing","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","postMessage","WebAssembly","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmPaths","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","setTimeout","locateFile","fileName","scriptDirectory","what","race","PThread","terminateAllThreads","_scriptDir","ortWasm","aa","ready","fa","w","ba","ca","da","window","r","importScripts","ea","process","versions","node","fs","ha","dirname","__dirname","startsWith","URL","normalize","readFileSync","c","g","argv","replace","on","split","inspect","location","href","substr","lastIndexOf","XMLHttpRequest","open","send","responseText","responseType","status","onerror","A","ia","print","bind","printErr","warn","thisProgram","wasmBinary","noExitRuntime","B","C","H","F","J","L","oa","pa","ja","ka","TextDecoder","la","decode","h","fromCharCode","k","D","ma","charCodeAt","na","G","qa","HEAP16","HEAPU16","HEAPF32","HEAPF64","ra","sa","ta","ua","preRun","shift","unshift","P","va","O","onAbort","RuntimeError","wa","xa","ya","Aa","credentials","ok","catch","za","instantiate","Ca","Da","Pa","ab","Ya","Za","Xa","$a","Va","Wa","Fa","Ga","Q","Ha","Ia","Ja","Ka","La","apply","arguments","Ma","prototype","Na","R","S","bb","Oa","T","Ta","U","V","pop","Qa","fromWireType","Ra","Sa","Ua","W","X","Y","cb","db","globalThis","Function","hb","jb","Z","pb","kb","lb","mb","getFullYear","getMonth","getDate","nb","ob","hrtime","performance","now","qb","rb","sb","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","tb","ub","vb","xb","f","q","I","l","getDay","getTime","setDate","setMonth","setFullYear","p","u","gb","fb","ib","eb","RegExp","E","substring","includes","wb","yb","zb","BindingError","InternalError","count_emval_handles","get_first_emval","Ab","toWireType","argPackAdvance","readValueFromPointer","o","Uint8ClampedArray","ga","deleteObject","j","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","$","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","toTimeString","match","copyWithin","grow","s","asm","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","Ba","instance","Ea","Eb","___getTypeName","Bb","Cb","Db","Gb","calledRun","onRuntimeInitialized","postRun","setStatus","__embind_initialize_bindings","Fb","preInit","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","definition","defineProperty","enumerable","obj","prop","Symbol","toStringTag"],"sourceRoot":""}