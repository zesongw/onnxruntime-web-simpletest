{"version":3,"file":"ort.es6.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/../common/dist/lib/backend-impl.js","webpack://ort/../common/dist/lib/env.js","webpack://ort/../common/dist/lib/env-impl.js","webpack://ort/../common/dist/lib/tensor-impl.js","webpack://ort/../common/dist/lib/tensor.js","webpack://ort/../common/dist/lib/inference-session-impl.js","webpack://ort/../common/dist/lib/inference-session.js","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/options-utils.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/string-utils.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/long/src/long.js","webpack://ort/./node_modules/onnx-proto/dist/onnx.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/global","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, () => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = {};\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @internal\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends[name];\n        if (currentBackend === undefined) {\n            backends[name] = { backend, priority };\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends[backendsSortedByPriority[i]].priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @internal\n */\nexport const resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends[backendName];\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { EnvImpl } from './env-impl';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = new EnvImpl();\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nexport class EnvImpl {\n    constructor() {\n        this.wasm = {};\n        this.webgl = {};\n        this.webgpu = {};\n        this.logLevelInternal = 'warning';\n    }\n    // TODO standadize the getter and setter convention in env for other fields.\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        this.logLevelInternal = value;\n    }\n    get logLevel() {\n        return this.logLevelInternal;\n    }\n}\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nconst NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexport class Tensor {\n    constructor(arg0, arg1, arg2) {\n        checkBigInt();\n        let type;\n        let data;\n        let dims;\n        // check whether arg0 is type or data\n        if (typeof arg0 === 'string') {\n            //\n            // Override: constructor(type, data, ...)\n            //\n            type = arg0;\n            dims = arg2;\n            if (arg0 === 'string') {\n                // string tensor\n                if (!Array.isArray(arg1)) {\n                    throw new TypeError('A string tensor\\'s data must be a string array.');\n                }\n                // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                // error will be populated at inference\n                data = arg1;\n            }\n            else {\n                // numeric tensor\n                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                if (typedArrayConstructor === undefined) {\n                    throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                }\n                if (Array.isArray(arg1)) {\n                    // use 'as any' here because TypeScript's check on type of 'SupportedTypedArrayConstructors.from()' produces\n                    // incorrect results.\n                    // 'typedArrayConstructor' should be one of the typed array prototype objects.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = typedArrayConstructor.from(arg1);\n                }\n                else if (arg1 instanceof typedArrayConstructor) {\n                    data = arg1;\n                }\n                else {\n                    throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                }\n            }\n        }\n        else {\n            //\n            // Override: constructor(data, ...)\n            //\n            dims = arg1;\n            if (Array.isArray(arg0)) {\n                // only boolean[] and string[] is supported\n                if (arg0.length === 0) {\n                    throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                }\n                const firstElementType = typeof arg0[0];\n                if (firstElementType === 'string') {\n                    type = 'string';\n                    data = arg0;\n                }\n                else if (firstElementType === 'boolean') {\n                    type = 'bool';\n                    // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                    // wrong type. We use 'as any' to make it happy.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    data = Uint8Array.from(arg0);\n                }\n                else {\n                    throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                }\n            }\n            else {\n                // get tensor type from TypedArray\n                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                if (mappedType === undefined) {\n                    throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                }\n                type = mappedType;\n                data = arg0;\n            }\n        }\n        // type and data is processed, now processing dims\n        if (dims === undefined) {\n            // assume 1-D tensor if dims omitted\n            dims = [data.length];\n        }\n        else if (!Array.isArray(dims)) {\n            throw new TypeError('A tensor\\'s dims must be a number array');\n        }\n        // perform check\n        const size = calculateSize(dims);\n        if (size !== data.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${data.length}).`);\n        }\n        this.dims = dims;\n        this.type = type;\n        this.data = data;\n        this.size = size;\n    }\n    // #endregion\n    /**\n     * Create a new tensor object from image object\n     *\n     * @param buffer - Extracted image buffer data - assuming RGBA format\n     * @param imageFormat - input image configuration - required configurations height, width, format\n     * @param tensorFormat - output tensor configuration - Default is RGB format\n     */\n    static bufferToTensor(buffer, options) {\n        if (buffer === undefined) {\n            throw new Error('Image buffer must be defined');\n        }\n        if (options.height === undefined || options.width === undefined) {\n            throw new Error('Image height and width must be defined');\n        }\n        const { height, width } = options;\n        const norm = options.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = 255;\n        }\n        else {\n            normMean = norm.mean;\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = 0;\n        }\n        else {\n            normBias = norm.bias;\n        }\n        const inputformat = options.bitmapFormat !== undefined ? options.bitmapFormat : 'RGBA';\n        // default value is RGBA since imagedata and HTMLImageElement uses it\n        const outputformat = options.tensorFormat !== undefined ?\n            (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') :\n            'RGB';\n        const offset = height * width;\n        const float32Data = outputformat === 'RGBA' ? new Float32Array(offset * 4) : new Float32Array(offset * 3);\n        // Default pointer assignments\n        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGB') {\n            step = 3;\n            rImagePointer = 0;\n            gImagePointer = 1;\n            bImagePointer = 2;\n            aImagePointer = -1;\n        }\n        // Updating the pointer assignments based on the output tensor format\n        if (outputformat === 'RGBA') {\n            aTensorPointer = offset * 3;\n        }\n        else if (outputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = offset;\n            gTensorPointer = offset * 2;\n        }\n        else if (outputformat === 'BGR') {\n            bTensorPointer = 0;\n            gTensorPointer = offset;\n            rTensorPointer = offset * 2;\n        }\n        for (let i = 0; i < offset; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n            float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias) / normMean;\n            float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias) / normMean;\n            float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias) / normMean;\n            if (aTensorPointer !== -1 && aImagePointer !== -1) {\n                float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias) / normMean;\n            }\n        }\n        // Float32Array -> ort.Tensor\n        const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n            new Tensor('float32', float32Data, [1, 3, height, width]);\n        return outputTensor;\n    }\n    static async fromImage(image, options) {\n        // checking the type of image object\n        const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n        const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n        const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n        const isURL = typeof (String) !== 'undefined' && (image instanceof String || typeof image === 'string');\n        let data;\n        let tensorConfig = {};\n        // filling and checking image configuration options\n        if (isHTMLImageEle) {\n            // HTMLImageElement - image object - format is RGBA by default\n            const canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height;\n            const pixels2DContext = canvas.getContext('2d');\n            if (pixels2DContext != null) {\n                let height = image.height;\n                let width = image.width;\n                if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                    height = options.resizedHeight;\n                    width = options.resizedWidth;\n                }\n                if (options !== undefined) {\n                    tensorConfig = options;\n                    if (options.tensorFormat !== undefined) {\n                        throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                    }\n                    else {\n                        tensorConfig.tensorFormat = 'RGBA';\n                    }\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match HTMLImageElement height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match HTMLImageElement width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.tensorFormat = 'RGBA';\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                pixels2DContext.drawImage(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isImageDataEle) {\n            // ImageData - image object - format is RGBA by default\n            const format = 'RGBA';\n            let height;\n            let width;\n            if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            else {\n                height = image.height;\n                width = image.width;\n            }\n            if (options !== undefined) {\n                tensorConfig = options;\n                if (options.bitmapFormat !== undefined && options.bitmapFormat !== format) {\n                    throw new Error('Image input config format must be RGBA for ImageData');\n                }\n                else {\n                    tensorConfig.bitmapFormat = 'RGBA';\n                }\n            }\n            else {\n                tensorConfig.bitmapFormat = 'RGBA';\n            }\n            tensorConfig.height = height;\n            tensorConfig.width = width;\n            if (options !== undefined) {\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = width;\n                tempCanvas.height = height;\n                const pixels2DContext = tempCanvas.getContext('2d');\n                if (pixels2DContext != null) {\n                    pixels2DContext.putImageData(image, 0, 0);\n                    data = pixels2DContext.getImageData(0, 0, width, height).data;\n                }\n                else {\n                    throw new Error('Can not access image data');\n                }\n            }\n            else {\n                data = image.data;\n            }\n        }\n        else if (isImageBitmap) {\n            // ImageBitmap - image object - format must be provided by user\n            if (options === undefined) {\n                throw new Error('Please provide image config with format for Imagebitmap');\n            }\n            if (options.bitmapFormat !== undefined) {\n                throw new Error('Image input config format must be defined for ImageBitmap');\n            }\n            const pixels2DContext = document.createElement('canvas').getContext('2d');\n            if (pixels2DContext != null) {\n                const height = image.height;\n                const width = image.width;\n                pixels2DContext.drawImage(image, 0, 0, width, height);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n                if (options !== undefined) {\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.height !== undefined && options.height !== height) {\n                        throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                    }\n                    else {\n                        tensorConfig.height = height;\n                    }\n                    // using square brackets to avoid TS error - type 'never'\n                    if (options.width !== undefined && options.width !== width) {\n                        throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                    }\n                    else {\n                        tensorConfig.width = width;\n                    }\n                }\n                else {\n                    tensorConfig.height = height;\n                    tensorConfig.width = width;\n                }\n                return Tensor.bufferToTensor(data, tensorConfig);\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else if (isURL) {\n            return new Promise((resolve, reject) => {\n                const canvas = document.createElement('canvas');\n                const context = canvas.getContext('2d');\n                if (!image || !context) {\n                    return reject();\n                }\n                const newImage = new Image();\n                newImage.crossOrigin = 'Anonymous';\n                newImage.src = image;\n                newImage.onload = () => {\n                    canvas.width = newImage.width;\n                    canvas.height = newImage.height;\n                    context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                    const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                    if (options !== undefined) {\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.height !== undefined && options.height !== canvas.height) {\n                            throw new Error('Image input config height doesn\\'t match ImageBitmap height');\n                        }\n                        else {\n                            tensorConfig.height = canvas.height;\n                        }\n                        // using square brackets to avoid TS error - type 'never'\n                        if (options.width !== undefined && options.width !== canvas.width) {\n                            throw new Error('Image input config width doesn\\'t match ImageBitmap width');\n                        }\n                        else {\n                            tensorConfig.width = canvas.width;\n                        }\n                    }\n                    else {\n                        tensorConfig.height = canvas.height;\n                        tensorConfig.width = canvas.width;\n                    }\n                    resolve(Tensor.bufferToTensor(img.data, tensorConfig));\n                };\n            });\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n        if (data !== undefined) {\n            return Tensor.bufferToTensor(data, tensorConfig);\n        }\n        else {\n            throw new Error('Input data provided is not supported - aborted tensor creation');\n        }\n    }\n    toImageData(options) {\n        const pixels2DContext = document.createElement('canvas').getContext('2d');\n        let image;\n        if (pixels2DContext != null) {\n            // Default values for height and width & format\n            const width = this.dims[3];\n            const height = this.dims[2];\n            const channels = this.dims[1];\n            const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n            const normMean = options !== undefined ? (options.norm?.mean !== undefined ? options.norm.mean : 255) : 255;\n            const normBias = options !== undefined ? (options.norm?.bias !== undefined ? options.norm.bias : 0) : 0;\n            const offset = height * width;\n            if (options !== undefined) {\n                if (options.height !== undefined && options.height !== height) {\n                    throw new Error('Image output config height doesn\\'t match tensor height');\n                }\n                if (options.width !== undefined && options.width !== width) {\n                    throw new Error('Image output config width doesn\\'t match tensor width');\n                }\n                if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                    (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                    throw new Error('Tensor format doesn\\'t match input tensor dims');\n                }\n            }\n            // Default pointer assignments\n            const step = 4;\n            let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n            let rTensorPointer = 0, gTensorPointer = offset, bTensorPointer = offset * 2, aTensorPointer = -1;\n            // Updating the pointer assignments based on the input image format\n            if (inputformat === 'RGBA') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n                aTensorPointer = offset * 3;\n            }\n            else if (inputformat === 'RGB') {\n                rTensorPointer = 0;\n                gTensorPointer = offset;\n                bTensorPointer = offset * 2;\n            }\n            else if (inputformat === 'RBG') {\n                rTensorPointer = 0;\n                bTensorPointer = offset;\n                gTensorPointer = offset * 2;\n            }\n            image = pixels2DContext.createImageData(width, height);\n            for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n                image.data[rImagePointer] = (this.data[rTensorPointer++] - normBias) * normMean; // R value\n                image.data[gImagePointer] = (this.data[gTensorPointer++] - normBias) * normMean; // G value\n                image.data[bImagePointer] = (this.data[bTensorPointer++] - normBias) * normMean; // B value\n                image.data[aImagePointer] =\n                    aTensorPointer === -1 ? 255 : (this.data[aTensorPointer++] - normBias) * normMean; // A value\n            }\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n        return image;\n    }\n    // #endregion\n    // #region tensor utilities\n    reshape(dims) {\n        return new Tensor(this.type, this.data, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackend } from './backend-impl';\nimport { Tensor } from './tensor';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                returnValue[key] = new Tensor(results[key].type, results[key].data, results[key].dims);\n            }\n        }\n        return returnValue;\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await resolveBackend(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initWasm} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initWasm();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend} from 'onnxruntime-common';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  context = context || createNewWebGLContext(contextId);\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const canvas = createCanvas();\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    if (typeof OffscreenCanvas === 'undefined') {\n      throw new TypeError('failed to create canvas: OffscreenCanvas is not supported');\n    }\n    return new OffscreenCanvas(1, 1);\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof fetch === 'undefined') {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float16':\n        return onnx.TensorProto.DataType.FLOAT16;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, GpuDataType, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info,input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensorShapes: ReadonlyArray<TensorView['dims']>,\n     inputGpuDataTypes: readonly GpuDataType[]): string => {\n      const inputTensorShapesToString = inputTensorShapes.map(d => `${d.join(',')}`).join('_');\n      const inputGpuDataTypesToString = inputGpuDataTypes.join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputTensorShapesToString + ';' + inputGpuDataTypesToString;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is [ name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  profilingEnabled = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingTimeBase?: bigint;\n\n  async initialize(): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n      }\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes') && env.webgpu.profilingMode === 'default') {\n      this.profilingEnabled = true;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      deviceDescriptor.requiredFeatures = ['timestamp-query-inside-passes' as any];\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.profilingEnabled) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs.map(i => i.dims), inputDatas.map(i => i.type));\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs. so -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -2 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, data: Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n    data.set(new Uint8Array(arrayBuffer));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(name: string, kernelId: number, attribute: unknown): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(name);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${name}`);\n    }\n\n    this.kernels.set(kernelId, [name, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [name, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"${name}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"${name}\"...`);\n\n    this.temporaryData = [];\n    try {\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"${name}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OrtWasmModule} from '../binding/ort-wasm';\nimport {getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    return new Float32Array(this.module.HEAP8.buffer, this.data, ShapeUtil.size(this.dims));\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  get customData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    const backend = new WebGpuBackend();\n    await backend.initialize();\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              const data = module.HEAPU8.subarray(dataOffset, dataOffset + size);\n\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, data);\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(name, kernel, attribute),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number) => {\n          LOG_DEBUG('verbose', () => `[WebGPU] jsepRun: kernel=${kernel}, contextDataOffset=${contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<typeof env.logLevel>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(env.logLevel!);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (env.debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\ninterface DownloadCacheValue {\n  data: Promise<ArrayBufferLike>;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // GPU Data ID => GPU Data ( read buffer )\n  downloadCache: Map<GpuDataId, DownloadCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  constructor(private backend: WebGpuBackend /* , private reuseBuffer: boolean */) {\n    this.storageCache = new Map();\n    this.downloadCache = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n    // GPU copy\n    this.backend.getCommandEncoder().copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    // !!!\n    // !!! IMPORTANT: TODO: whether we should keep the storage buffer every time, or always create new ones.\n    // !!!                  This need to be figured out by performance test results.\n    // !!!\n\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    // create gpu buffer\n    const gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    const downloadingData = this.downloadCache.get(id);\n    if (downloadingData) {\n      this.downloadCache.delete(id);\n    }\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const downloadData = this.downloadCache.get(id);\n    if (downloadData) {\n      return downloadData.data;\n    }\n\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: cachedData.originalSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, cachedData.originalSize /* size */\n    );\n    this.backend.flush();\n\n    const readDataPromise = new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n\n    this.downloadCache.set(id, {data: readDataPromise});\n\n    return readDataPromise;\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      buffer.destroy();\n    }\n    for (const buffer of this.buffersPending) {\n      buffer.destroy();\n    }\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport * as binaryOps from './ops/binary-op';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {matMul} from './ops/matmul';\nimport * as pool from './ops/pool';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Elu', [unaryOps.elu, unaryOps.parseEluAttributes]],\n  ['Erf', [unaryOps.erf]],\n  ['Floor', [unaryOps.floor]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      const isVec4 = (((inChannels % 4 === 0 || inChannels % 3 === 0) && isChannelsLast) ||\n                      (outWidth % 4 === 0 && !isChannelsLast)) &&\n          outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] =\n          isVec4 ? [8, 8, 1] : [dispatchX <= 4 ? 4 : 16, dispatchX > 4 && dispatchY <= 4 ? 4 : 16, 1];\n      const elementsPerThread =\n          isVec4 ? [4, 4, 1] : [dispatchX <= 4 ? 1 : 2, dispatchX > 4 && dispatchY <= 4 ? 1 : 2, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[1])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, !isChannelsLast, tileInner) :\n                     makeMatMulPackedSource(\n                         elementsPerThread, workGroupSize, !isChannelsLast, tileInner, false, undefined,\n                         sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol);\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol);\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, isVectorA = false): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = ${isVectorA ? '0' : 'localRow * rowPerThread'};\n  let tileCol = i32(localId.x);\n\n  let globalRow = ${isVectorA ? '0' : 'i32(globalId.y) * rowPerThread'};\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol);\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol);\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], transposeA = false, tileInner = 32,\n     splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol);\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol);\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     typeA = 'f32', typeB = 'f32', typeOutput = 'f32') => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const outputIndicesHelper = createIndicesHelper('output', dimsOutput);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = dimsOutput.length === 0 ? '0u' :\n                (dimsOutput.length === 1)       ? '(*outputIndices)' :\n                                                  `(*outputIndices)[${i + dimsOutput.length - dims.length}]`;\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n  ${outputIndicesHelper.o2iImpl}\n\n  fn calcOffsetA(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsA)};\n  }\n\n  fn calcOffsetB(outputIndices: ptr<function, ${outputIndicesHelper.iType}>) -> u32 {\n    return ${calcOffsetImpl(dimsB)};\n  }\n  `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${outputIndicesHelper.o2iCall('global_idx * 4u', 'outputIndices')}\n      let offsetA = calcOffsetA(&outputIndices);\n      let offsetB = calcOffsetB(&outputIndices);\n      outputData[global_idx] = ${expressionVector('aData[offsetA / 4u]', 'bData[offsetB / 4u]')};`;\n        } else {\n          assignment = `outputData[global_idx] = ${expressionVector('aData[global_idx]', 'bData[global_idx]')};`;\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n        const singleAssignment = (x: number) => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n      ${outputIndicesHelper.o2iCall(`global_idx * 4u + ${x}u`, 'outputIndices')}\n      let offsetA${x} = calcOffsetA(&outputIndices);\n      let offsetB${x} = calcOffsetB(&outputIndices);\n      let indexA${x} = offsetA${x} / 4u;\n      let indexB${x} = offsetB${x} / 4u;\n      let componentA${x} = offsetA${x} % 4u;\n      let componentB${x} = offsetB${x} % 4u;\n      outputData[global_idx][${x}] = ${expressionScalar(expressionA, expressionB)};`;\n        };\n\n        assignment = `\n      ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n      ${singleAssignment(0)}\n      ${singleAssignment(1)}\n      ${singleAssignment(2)}\n      ${singleAssignment(3)}`;\n      }\n\n      return `\n  @group(0) @binding(0) var<storage, read> aData : array<vec4<${typeA}>>;\n  @group(0) @binding(1) var<storage, read> bData : array<vec4<${typeB}>>;\n  @group(0) @binding(2) var<storage, read_write> outputData : array<vec4<${typeOutput}>>;\n\n  ${additionalImplementation ?? ''}\n  ${broadcastImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n    ${assignment}\n  }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 0; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0) {\n          vectorize = true;\n        }\n\n\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () =>\n            ({x: Math.ceil(outputSize / 64 /* workgroup size */ / (vectorize ? 4 : 1) /* vec size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(metadata, inputs[0], inputs[1], funcCall, additionalImplementation)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow', ({scalar: (a, b) => `pow_f32(${a},${b})`, vector: (a, b) => `pow_vf32(${a},${b})`}), `\n    fn pow_f32(a : f32, b : f32) -> f32 {\n      if (b == 0.0) {\n        return 1.0;\n      } else if (a < 0.0 && b != floor(b)) {\n        return pow(a, b); // NaN\n      }\n      return select(sign(a), 1.0, round(abs(b) % 2.0) != 1.0) * pow(abs(a), b);\n    }\n    fn pow_vf32(a : vec4<f32>, b : vec4<f32>) -> vec4<f32> {\n      // TODO: implement vectorized pow\n      return vec4<f32>(pow_f32(a.x, b.x), pow_f32(a.y, b.y), pow_f32(a.z, b.z), pow_f32(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\nexport interface IndicesHelper {\n  /**\n   * WGSL code of function implementation for offset-to-indices\n   */\n  o2iImpl: string;\n  /**\n   * WGSL code of function call for offset-to-indices\n   */\n  o2iCall: (varOffset: string, varIndices: string) => string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   */\n  i2oImpl: string;\n  /**\n   * WGSL code of function implementation for indices-to-offset\n   *\n   * @param isPtr - whether the variable is a pointer. default is false.\n   */\n  i2oExpression: (varIndices: string, isPtr?: boolean) => string;\n  /**\n   * WGSL code of indices variable declaration\n   *\n   * @param v - variable name.\n   * @param init - initial value.\n   */\n  indicesVariableDeclaration: (v: string, init?: string[]) => string;\n  /**\n   * data type of indices\n   */\n  iType: string;\n}\n\nexport const createIndicesHelper = (name: string, shape: readonly number[]): IndicesHelper => {\n  const iType = shape.length < 2 ? 'u32' : `array<u32, ${shape.length}>`;\n\n  const strides = ShapeUtil.computeStrides(shape);\n  let o2iSnippet = '';\n  for (let i = 0; i < shape.length - 1; i++) {\n    o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    (*indices)[${i}] = dim${i};\n    current = rest${i};\n    `;\n  }\n  o2iSnippet += `(*indices)[${shape.length - 1}] = current;`;\n\n  const o2iImpl = shape.length < 2 ? '' : `\n  fn ih_o2i_${name}(offset: u32, indices: ptr<function, ${iType}>) {\n    var current = offset;\n    ${o2iSnippet}\n  }`;\n\n  const o2iCall = (varOffset: string, varIndices: string) =>\n      shape.length < 2 ? `${varIndices}=${varOffset};` : `ih_o2i_${name}(${varOffset}, &${varIndices});`;\n\n  const offsets: string[] = [];\n  if (shape.length === 0) {\n    offsets.push('0u');\n  } else if (shape.length < 2) {\n    offsets.push('(*indices)');\n  } else {\n    for (let i = shape.length - 1; i >= 0; i--) {\n      offsets.push(`${strides[i]}u * ((*indices)[${i}])`);\n    }\n  }\n\n  const i2oImpl = shape.length < 2 ? '' : `\n  fn ih_i2o_${name}(indices: ptr<function, ${iType}>) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n  const i2oExpression = (varIndices: string, isPtr?: boolean) =>\n      shape.length < 2 ? `(${isPtr ? '*' : ''}${varIndices})` : `ih_i2o_${name}(${isPtr ? '' : '&'}${varIndices})`;\n\n  const indicesVariableDeclaration = (v: string, init?: string[]) =>\n      `var ${v}:${iType}${init ? `=${iType}(${init.join(',')})` : ''};`;\n\n  return {o2iImpl, o2iCall, i2oImpl, i2oExpression, indicesVariableDeclaration, iType};\n};\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? '@builtin(global_invocation_id) global_id : vec3<u32>' :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const dataType = 'f32';  // TODO: support other data type\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> x : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> w : array<${dataType}>;`\n      ];\n      if (hasBias) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> b : array<${dataType}>;`);\n      }\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n      const outputIndicesHelper = createIndicesHelper('output', outputShape);\n      const xIndicesHelper = createIndicesHelper('x', xShape);\n      const wIndicesHelper = createIndicesHelper('w', wShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputStorageBuffersDeclarations.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n  ${outputIndicesHelper.o2iImpl}\n  ${xIndicesHelper.i2oImpl}\n  ${wIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('outputIndices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'outputIndices')}\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${dataType} = ${dataType}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          ${\n          xIndicesHelper.indicesVariableDeclaration(\n              'xIndices',\n              isChannelLast ? ['batch', 'xHeight', 'xWidth', 'input_channel'] :\n                              [\n                                'batch', 'input_channel', 'xHeight', 'xWidth'\n                              ])}\n          let xVal = x[${xIndicesHelper.i2oExpression('xIndices')}];\n          ${\n          wIndicesHelper.indicesVariableDeclaration('wIndices', [\n            'output_channel', 'wInChannel', 'wHeight', 'wWidth'\n          ])}\n          let wVal = w[${wIndicesHelper.i2oExpression('wIndices')}];\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  const hasBias = inputs.length === 3;\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  const isChannelsLast = attributes.format === 'NHWC';\n\n  // const batchSize = context.inputs[0].dims[0];\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize =\n      isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth && attributes.autoPad === 'VALID';\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 &&\n       (attributes.autoPad === 'SAME_UPPER' || attributes.autoPad === 'SAME_LOWER' ||\n        attributes.autoPad === 'VALID'))) {\n    // TODO: implement conv2dByMatMul()\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  if (!isChannelsLast || attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.customData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.customData.wT) {\n    context.customData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    if (!isChannelsLast && inputs[2].dims.length === 1) {\n      convInputs.push(inputs[2].reshape([inputs[2].dims[0], 1, 1]));\n    } else {\n      convInputs.push(inputs[2]);\n    }\n  }\n\n  // STEP.3: compute matmul\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== DataType.float) || (inputs[1].dataType !== DataType.float) ||\n      (inputs.length === 3 && inputs[2].dataType !== DataType.float)) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = 'f32';  // TODO: support other data type\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\nimport {getActicationSnippet, InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes):\n        ProgramInfo => {\n          const aShape = inputs[0].dims;\n          const bShape = inputs[1].dims;\n          const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n          if (!outputShape) {\n            throw new Error('Can\\'t use matmul on the given tensors');\n          }\n          const outputSize = ShapeUtil.size(outputShape);\n          // TODO: support broadcasting\n\n          const dataType = 'f32';  // TODO: support other data type\n          const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n          const M = outputShape[outputShape.length - 2];\n          const K = aShape[aShape.length - 1];\n          const N = outputShape[outputShape.length - 1];\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> b : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${dataType}>;\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let stack = global_idx / (M * N);\n    let mn = global_idx % (M * N);\n    let n = global_idx % N;\n    let m = mn / N;\n\n    let offsetA = stack * (M * K);\n    let offsetB = stack * (K * N);\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      value += a[offsetA + m * K + k] * b[offsetB + k * N + n];\n    }\n    ${applyActivation}\n    output[global_idx] = value;\n  }`;\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n          };\n        };\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    inputs: readonly TensorView[], attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst = isChannelsLast ?\n      [inputs[0].dims[0], inputs[0].dims[3], inputs[0].dims[1], inputs[0].dims[2]] :\n      inputs[0].dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, inputDims: readonly number[], outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, dataType: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const xIndicesHelper = createIndicesHelper('x', inputDims);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${xIndicesHelper.i2oExpression('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n            @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n            ${outputIndicesHelper.o2iImpl}\n            ${xIndicesHelper.i2oImpl}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n              ${outputIndicesHelper.indicesVariableDeclaration('xIndices')}\n              ${outputIndicesHelper.o2iCall('global_idx', 'xIndices')}\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${dataType}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: AveragePoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n      const dataType = 'f32';\n\n      const op1 = 'value += x_val;';\n      let op2 = '';\n      if (adjustedAttributes.countIncludePad) {\n        op2 += `value /= ${dataType}(${kernelSize});`;\n      } else {\n        op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n      }\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePoolingCode(\n            shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, dataType, '0.0'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createAveragePoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, isGlobalOperator: boolean,\n     attributes: MaxPoolAttributes): ProgramInfo => {\n      const [adjustedAttributes, outputShape] =\n          getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n      const op1 = `\n      value = max(x_val, value);\n    `;\n      const op2 = '';\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper =>\n            generatePoolingCode(shaderHelper, inputs[0].dims, outputShape, adjustedAttributes, op1, op2, 'f32', '-1e5'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs, metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {createIndicesHelper, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('input should be float tensor');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(a: ptr<function, array<u32, ${rank}>>, i: ptr<function, array<u32, ${rank}>>) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\t(*a)[${perm[i]}]=(*i)[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (input: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = 'f32';  // TODO: support other data type\n  const inputShape = input.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const outputIndicesHelper = createIndicesHelper('output', outputShape);\n  const inputIndicesHelper = createIndicesHelper('a', inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  @group(0) @binding(0) var<storage, read> a : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read_write> output : array<${dataType}>;\n\n  ${permFunctionBody(perm, rank)}\n  ${outputIndicesHelper.o2iImpl}\n  ${inputIndicesHelper.i2oImpl}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    ${outputIndicesHelper.indicesVariableDeclaration('indices')}\n    ${outputIndicesHelper.o2iCall('global_idx', 'indices')}\n    ${inputIndicesHelper.indicesVariableDeclaration('aIndices')}\n    perm(&aIndices, &indices);\n\n    output[global_idx] = a[${inputIndicesHelper.i2oExpression('aIndices')}];\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n      return `\n  @group(0) @binding(0) var<storage, read> inputData : array<vec4<f32>>;\n  @group(0) @binding(1) var<storage, read_write> outputData : array<vec4<f32>>;\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = inputData[global_idx];\n    outputData[global_idx] = ${expression};\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper =>\n          createElementwiseProgramShader(shaderHelper, ShapeUtil.size(input.dims), funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<f32> = vec4(f32(${attributes.min}));\n    const clip_max_: vec4<f32> = vec4(f32(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu = (context: ComputeContext, attributes: EluAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const parseEluAttributes = (attributes: Record<string, unknown>): EluAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const erf = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Erf', a => `erf_vf32(${a})`, `\n  const r0: f32 = 0.3275911;\n  const r1: f32 = 0.254829592;\n  const r2: f32 = -0.284496736;\n  const r3: f32 = 1.421413741;\n  const r4: f32 = -1.453152027;\n  const r5: f32 = 1.061405429;\n\n  fn erf_vf32(v: vec4<f32>) -> vec4<f32> {\n    let absv = abs(v);\n    let x = 1.0 / (1.0 + r0 * absv);\n    return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n  }`));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: GpuData[], outputs: GpuData[], dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n\n    if (this.backend.profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup({layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (this.backend.profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      // eslint-disable-next-line no-bitwise\n      const queryData = this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet, 0, 2, queryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(queryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelName = this.backend.kernels.get(kernelId)![0];\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(queryData.id);\n        this.backend.gpuDataManager.release(syncData.id);\n\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" execution time: ${endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n\n    const code = programInfo.getShaderSource(createShaderHelper(normalizedDispatchGroupSize));\n    const shaderModule = device.createShaderModule({code});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline =\n        device.createComputePipeline({compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto'});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor, TensorView} from '../tensor';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly customData: {[key: string]: unknown};\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env, InferenceSession} from 'onnxruntime-common';\n\nimport {init as initJsep} from './jsep/init';\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {getInstance, initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initWasm = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initOrt = async(numThreads: number, loggingLevel: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : {numThreads, loggingLevel}};\n      proxyWorker!.postMessage(message);\n\n      // TODO: support JSEP in worker\n    });\n  } else {\n    core.initOrt(numThreads, loggingLevel);\n\n    // init JSEP if available\n    await initJsep(getInstance());\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      throw new Error('Can\\'t create run options');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a run config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initOrt, releaseSession, run} from './proxy-wrapper';\nimport {logLevelStringToEnum} from './wasm-common';\n\nlet ortInit: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!ortInit) {\n      await initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel!));\n      ortInit = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof fetch === 'undefined') {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {iterateExtraOptions} from './options-utils';\nimport {allocWasmString} from './string-utils';\nimport {getInstance} from './wasm-factory';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  throw new Error(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported EP: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          throw new Error(`Can't append execution provider: ${epName}`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      throw new Error('Can\\'t create session options');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          throw new Error(`Can't set a session config entry: ${key} - ${value}`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(wasm._free);\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'uint16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {allocWasmString} from './string-utils';\nimport {tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nexport const initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    throw new Error(`Can't initialize onnxruntime. error code = ${errorCode}`);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          throw new Error('Can\\'t create a session');\n        }\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(wasm._free);\n      }\n\n      const inputCount = wasm._OrtGetInputCount(sessionHandle);\n      const outputCount = wasm._OrtGetOutputCount(sessionHandle);\n\n      const inputNames = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNames = [];\n      const outputNamesUTF8Encoded = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an input name');\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          throw new Error('Can\\'t get an output name');\n        }\n        outputNamesUTF8Encoded.push(name);\n        outputNames.push(wasm.UTF8ToString(name));\n      }\n\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n      return [sessionHandle, inputNames, outputNames];\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  inputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  outputNamesUTF8Encoded.forEach(wasm._OrtFree);\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          throw new Error('Can\\'t create a tensor');\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode === 0) {\n        for (let i = 0; i < outputCount; i++) {\n          const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n          const beforeGetTensorDataStack = wasm.stackSave();\n          // stack allocate 4 pointer value\n          const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n          let type: Tensor.Type|undefined, dataOffset = 0;\n          try {\n            errorCode = wasm._OrtGetTensorData(\n                tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n            if (errorCode !== 0) {\n              throw new Error(`Can't access output tensor data. error code = ${errorCode}`);\n            }\n            let tensorDataIndex = tensorDataOffset / 4;\n            const dataType = wasm.HEAPU32[tensorDataIndex++];\n            dataOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n            const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n            const dims = [];\n            for (let i = 0; i < dimsLength; i++) {\n              dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n            }\n            wasm._OrtFree(dimsOffset);\n\n            const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n            type = tensorDataTypeEnumToString(dataType);\n            if (type === 'string') {\n              const stringData: string[] = [];\n              let dataIndex = dataOffset / 4;\n              for (let i = 0; i < size; i++) {\n                const offset = wasm.HEAPU32[dataIndex++];\n                const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n                stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n              }\n              output.push([type, dims, stringData]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                  .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data]);\n            }\n          } finally {\n            wasm.stackRestore(beforeGetTensorDataStack);\n            if (type === 'string' && dataOffset) {\n              wasm._free(dataOffset);\n            }\n            wasm._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n\n      if (errorCode === 0) {\n        return output;\n      } else {\n        throw new Error(`failed to call OrtRun(). error code = ${errorCode}.`);\n      }\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(wasm._OrtReleaseTensor);\n    inputAllocs.forEach(wasm._free);\n\n    wasm._OrtReleaseRunOptions(runOptionsHandle);\n    runOptionsAllocs.forEach(wasm._free);\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    throw new Error('Can\\'t get an profile file name');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\nimport ortWasmFactory from './binding/ort-wasm.js';\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> =\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    !BUILD_DEFS.DISABLE_WASM_THREAD ? require('./binding/ort-wasm-threaded.js') : ortWasmFactory;\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPrefixOverride = typeof flags.wasmPaths === 'string' ? flags.wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(false, useThreads);\n  const wasmOverrideFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof flags.wasmPaths === 'object' ? flags.wasmPaths[wasmOverrideFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName === wasmFileName) {\n          const prefix: string = wasmPrefixOverride ?? scriptDirectory;\n          return wasmPathOverride ?? prefix + wasmOverrideFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.15.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={899:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.iterateExtraOptions=void 0,t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))}},918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(899),a=r(444),o=r(263);t.setRunOptions=e=>{const t=(0,o.getInstance)();let r=0;const i=[],u=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))u.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))u.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(u.terminate=!1);let o=0;if(void 0!==(null==e?void 0:e.tag)&&(o=(0,a.allocWasmString)(e.tag,i)),r=t._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,o),0===r)throw new Error(\\\"Can't create run options\\\");return void 0!==(null==e?void 0:e.extra)&&(0,n.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const o=(0,a.allocWasmString)(e,i),u=(0,a.allocWasmString)(n,i);if(0!==t._OrtAddRunConfigEntry(r,o,u))throw new Error(`Can't set a run config entry: ${e} - ${n}`)})),[r,i]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),i.forEach(t._free),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(899),a=r(444),o=r(263);t.setSessionOptions=e=>{var t,r,i,u;const s=(0,o.getInstance)();let c=0;const f=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),p=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\\\"sequential\\\"),d=\\\"string\\\"==typeof l.logId?(0,a.allocWasmString)(l.logId,f):0,g=null!==(i=l.logSeverityLevel)&&void 0!==i?i:2;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log serverity level is not valid: ${g}`);const h=null!==(u=l.logVerbosityLevel)&&void 0!==u?u:0;if(!Number.isInteger(h)||h<0||h>4)throw new Error(`log verbosity level is not valid: ${h}`);const m=\\\"string\\\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,f):0;if(c=s._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,p,!!l.enableProfiling,0,d,g,h,m),0===c)throw new Error(\\\"Can't create session options\\\");return l.executionProviders&&((e,t,r)=>{for(const n of t){let t=\\\"string\\\"==typeof n?n:n.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof n){const t=n;if(null==t?void 0:t.deviceType){const n=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);if(0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,n,i))throw new Error(`Can't set a session config entry: 'deviceType' - ${t.deviceType}`)}if(null==t?void 0:t.powerPreference){const n=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);if(0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,n,i))throw new Error(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported EP: ${t}`)}const i=(0,a.allocWasmString)(t,r);if(0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,i))throw new Error(`Can't append execution provider: ${t}`)}})(c,l.executionProviders,f),void 0!==l.extra&&(0,n.iterateExtraOptions)(l.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,f),n=(0,a.allocWasmString)(t,f);if(0!==s._OrtAddSessionConfigEntry(c,r,n))throw new Error(`Can't set a session config entry: ${e} - ${t}`)})),[c,f]}catch(e){throw 0!==c&&s._OrtReleaseSessionOptions(c),f.forEach(s._free),e}}},444:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:case 10:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"uint16\\\":return Uint16Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:function(e,t,r){\\\"use strict\\\";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initOrt=void 0;const a=r(918),o=r(622),i=r(444),u=r(917),s=r(263);t.initOrt=(e,t)=>{const r=(0,s.getInstance)()._OrtInit(e,t);if(0!==r)throw new Error(`Can't initialize onnxruntime. error code = ${r}`)};const c=new Map;t.createSessionAllocate=e=>{const t=(0,s.getInstance)(),r=t._malloc(e.byteLength);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,s.getInstance)();let n=0,a=0,i=[];try{if([a,i]=(0,o.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],a),0===n)throw new Error(\\\"Can't create a session\\\")}finally{r._free(e[0]),0!==a&&r._OrtReleaseSessionOptions(a),i.forEach(r._free)}const u=r._OrtGetInputCount(n),f=r._OrtGetOutputCount(n),l=[],p=[],d=[],g=[];for(let e=0;e<u;e++){const t=r._OrtGetInputName(n,e);if(0===t)throw new Error(\\\"Can't get an input name\\\");p.push(t),l.push(r.UTF8ToString(t))}for(let e=0;e<f;e++){const t=r._OrtGetOutputName(n,e);if(0===t)throw new Error(\\\"Can't get an output name\\\");g.push(t),d.push(r.UTF8ToString(t))}return c.set(n,[n,p,g]),[n,l,d]},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,s.getInstance)(),r=c.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=r[1],o=r[2];a.forEach(t._OrtFree),o.forEach(t._OrtFree),t._OrtReleaseSession(n),c.delete(e)},t.run=(e,t,r,o,f)=>n(void 0,void 0,void 0,(function*(){const n=(0,s.getInstance)(),l=c.get(e);if(!l)throw new Error(\\\"invalid session id\\\");const p=l[0],d=l[1],g=l[2],h=t.length,m=o.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,a.setRunOptions)(f);for(let e=0;e<h;e++){const t=r[e][0],a=r[e][1],o=r[e][2];let s,c;if(Array.isArray(o)){c=4*o.length,s=n._malloc(c),w.push(s);let e=s/4;for(let t=0;t<o.length;t++){if(\\\"string\\\"!=typeof o[t])throw new TypeError(`tensor data at index ${t} is not a string`);n.HEAPU32[e++]=(0,i.allocWasmString)(o[t],w)}}else c=o.byteLength,s=n._malloc(c),w.push(s),n.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),s);const f=n.stackSave(),l=n.stackAlloc(4*a.length);try{let e=l/4;a.forEach((t=>n.HEAP32[e++]=t));const r=n._OrtCreateTensor((0,u.tensorDataTypeStringToEnum)(t),s,c,l,a.length);if(0===r)throw new Error(\\\"Can't create a tensor\\\");b.push(r)}finally{n.stackRestore(f)}}const e=n.stackSave(),s=n.stackAlloc(4*h),c=n.stackAlloc(4*h),l=n.stackAlloc(4*m),_=n.stackAlloc(4*m);try{let e=s/4,r=c/4,a=l/4,i=_/4;for(let a=0;a<h;a++)n.HEAPU32[e++]=b[a],n.HEAPU32[r++]=d[t[a]];for(let e=0;e<m;e++)n.HEAPU32[a++]=0,n.HEAPU32[i++]=g[o[e]];let f=n._OrtRun(p,c,s,h,_,m,l,y);const v=n.jsepRunPromise;v&&void 0!==v.then&&(f=yield v);const w=[];if(0===f)for(let e=0;e<m;e++){const t=n.HEAPU32[l/4+e],r=n.stackSave(),a=n.stackAlloc(16);let o,i=0;try{if(f=n._OrtGetTensorData(t,a,a+4,a+8,a+12),0!==f)throw new Error(`Can't access output tensor data. error code = ${f}`);let e=a/4;const r=n.HEAPU32[e++];i=n.HEAPU32[e++];const s=n.HEAPU32[e++],c=n.HEAPU32[e++],l=[];for(let e=0;e<c;e++)l.push(n.HEAPU32[s/4+e]);n._OrtFree(s);const p=0===l.length?1:l.reduce(((e,t)=>e*t));if(o=(0,u.tensorDataTypeEnumToString)(r),\\\"string\\\"===o){const e=[];let t=i/4;for(let r=0;r<p;r++){const a=n.HEAPU32[t++],o=r===p-1?void 0:n.HEAPU32[t]-a;e.push(n.UTF8ToString(a,o))}w.push([o,l,e])}else{const e=new((0,u.tensorTypeToTypedArrayConstructor)(o))(p);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(n.HEAPU8.subarray(i,i+e.byteLength)),w.push([o,l,e])}}finally{n.stackRestore(r),\\\"string\\\"===o&&i&&n._free(i),n._OrtReleaseTensor(t)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{n.stackRestore(e)}}finally{b.forEach(n._OrtReleaseTensor),w.forEach(n._free),n._OrtReleaseRunOptions(y),v.forEach(n._free)}})),t.endProfiling=e=>{const t=(0,s.getInstance)(),r=c.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);if(0===a)throw new Error(\\\"Can't get an profile file name\\\");t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t},i=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(a,o){function i(e){try{s(n.next(e))}catch(e){o(e)}}function u(e){try{s(n.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((n=n.apply(e,t||[])).next())}))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const s=o(r(449)),c=u(r(932)),f=r(474);let l,p=!1,d=!1,g=!1;const h=(e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\";t.initializeWebAssembly=e=>i(void 0,void 0,void 0,(function*(){if(p)return Promise.resolve();if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(g)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");d=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),i=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),u=\\\"string\\\"==typeof e.wasmPaths?e.wasmPaths:void 0,m=h(!1,o),y=h(i,o),v=\\\"object\\\"==typeof e.wasmPaths?e.wasmPaths[y]:void 0;let b=!1;const w=[];if(t>0&&w.push(new Promise((e=>{setTimeout((()=>{b=!0,e()}),t)}))),w.push(new Promise(((e,t)=>{const n=o?f:c.default,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e===m?null!=v?v:(null!=u?u:t)+y:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(\\\"/\\\",\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{d=!1,p=!0,l=t,e()}),(e=>{d=!1,g=!0,t(e)}))}))),yield Promise.race(w),b)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)})),t.getInstance=()=>{if(p&&l)return l;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!p||d||g||(d=!0,null===(e=l.PThread)||void 0===e||e.terminateAllThreads(),l=void 0,d=!1,p=!1,g=!0)}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){function t(){return F.buffer!=x.buffer&&J(),x}function n(){return F.buffer!=x.buffer&&J(),W}function a(){return F.buffer!=x.buffer&&J(),D}function o(){return F.buffer!=x.buffer&&J(),I}function i(){return F.buffer!=x.buffer&&J(),j}function u(){return F.buffer!=x.buffer&&J(),H}function s(){return F.buffer!=x.buffer&&J(),z}var c,f,l;c||(c=void 0!==e?e:{}),c.ready=new Promise((function(e,t){f=e,l=t}));var p,d,g,h=Object.assign({},c),m=\\\"./this.program\\\",y=(e,t)=>{throw t},v=\\\"object\\\"==typeof window,b=\\\"function\\\"==typeof importScripts,w=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,_=c.ENVIRONMENT_IS_PTHREAD||!1,T=\\\"\\\";function O(e){return c.locateFile?c.locateFile(e,T):T+e}if(w){var A=r(384),S=r(908);let t;T=b?S.dirname(T)+\\\"/\\\":\\\"//\\\",p=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),A.readFileSync(e,t?void 0:\\\"utf8\\\")),g=e=>((e=p(e,!0)).buffer||(e=new Uint8Array(e)),e),d=(e,t,r)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),A.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){if(!(e instanceof fe))throw e})),15>process.versions.node.split(\\\".\\\")[0]&&process.on(\\\"unhandledRejection\\\",(function(e){throw e})),y=(e,t)=>{if(R)throw process.exitCode=e,t;if(!(t instanceof fe)){var r=t;t&&\\\"object\\\"==typeof t&&t.stack&&(r=[t,t.stack]),k(\\\"exiting due to exception: \\\"+r)}process.exit(e)},c.inspect=function(){return\\\"[Emscripten Module object]\\\"};try{t=r(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}r.g.Worker=t.Worker}else(v||b)&&(b?T=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(T=document.currentScript.src),_scriptDir&&(T=_scriptDir),T=0!==T.indexOf(\\\"blob:\\\")?T.substr(0,T.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",w||(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},b&&(g=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),d=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));w&&\\\"undefined\\\"==typeof performance&&(r.g.performance=r(953).performance);var E=console.log.bind(console),P=console.warn.bind(console);w&&(E=e=>A.writeSync(1,e+\\\"\\\\n\\\"),P=e=>A.writeSync(2,e+\\\"\\\\n\\\"));var C,M=c.print||E,k=c.printErr||P;Object.assign(c,h),h=null,c.thisProgram&&(m=c.thisProgram),c.quit&&(y=c.quit),c.wasmBinary&&(C=c.wasmBinary);var R=c.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&ie(\\\"no native wasm support detected\\\");var F,U,x,W,D,I,j,H,Y,z,L=!1,N=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function B(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&N)return N.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function G(e,t){return(e>>>=0)?B(n(),e,t):\\\"\\\"}function V(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function $(e,t,r){return V(e,n(),t,r)}function q(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function J(){var e=F.buffer;c.HEAP8=x=new Int8Array(e),c.HEAP16=D=new Int16Array(e),c.HEAP32=j=new Int32Array(e),c.HEAPU8=W=new Uint8Array(e),c.HEAPU16=I=new Uint16Array(e),c.HEAPU32=H=new Uint32Array(e),c.HEAPF32=Y=new Float32Array(e),c.HEAPF64=z=new Float64Array(e)}var Q=c.INITIAL_MEMORY||16777216;if(1048576<=Q||ie(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+Q+\\\"! (STACK_SIZE=1048576)\\\"),_)F=c.wasmMemory;else if(c.wasmMemory)F=c.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:Q/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw k(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),w&&k(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");J(),Q=F.buffer.byteLength;var X,Z=[],K=[],ee=[];function te(){var e=c.preRun.shift();Z.unshift(e)}var re,ne=0,ae=null,oe=null;function ie(e){throw c.onAbort&&c.onAbort(e),k(e=\\\"Aborted(\\\"+e+\\\")\\\"),L=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),l(e),e}function ue(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function se(e){try{if(e==re&&C)return new Uint8Array(C);if(g)return g(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){ie(e)}}function ce(e,t,r){return function(e){if(!C&&(v||b)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return se(e)}));if(d)return new Promise((function(t,r){d(e,(function(e){t(new Uint8Array(e))}),r)}))}return Promise.resolve().then((function(){return se(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,t)})).then((function(e){return e})).then(r,(function(e){k(\\\"failed to asynchronously prepare wasm: \\\"+e),ie(e)}))}function fe(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function le(e){e.terminate(),e.onmessage=()=>{}}function pe(e){(e=me.hb[e])||ie(),me.Mb(e)}function de(e){var t=me.Ab();if(!t)return 6;me.ib.push(t),me.hb[e.fb]=t,t.fb=e.fb;var r={cmd:\\\"run\\\",start_routine:e.Nb,arg:e.xb,pthread_ptr:e.fb};return w&&t.ref(),t.postMessage(r,e.Tb),0}function ge(e){if(_)return Pt(1,1,e);R||(me.Ob(),c.onExit&&c.onExit(e),L=!0),y(e,new fe(e))}function he(e){if(_)throw ve(e),\\\"unwind\\\";ge(e)}ue(re=\\\"ort-wasm-threaded.wasm\\\")||(re=O(re));var me={lb:[],ib:[],vb:[],hb:{},qb:function(){_&&me.Eb()},Vb:function(){},Eb:function(){me.receiveObjectTransfer=me.Lb,me.threadInitTLS=me.ub,me.setExitStatus=me.tb,R=!1},tb:function(){},Xb:[\\\"$terminateWorker\\\"],Ob:function(){for(var e of me.ib)le(e);for(e of me.lb)le(e);me.lb=[],me.ib=[],me.hb=[]},Mb:function(e){var t=e.fb;delete me.hb[t],me.lb.push(e),me.ib.splice(me.ib.indexOf(e),1),e.fb=0,w&&e.unref(),Kt(t)},Lb:function(){},ub:function(){me.vb.forEach((e=>e()))},Kb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(e.fb&&(me.yb=e.fb),r.targetThread&&r.targetThread!=Vt()){var a=me.hb[r.Wb];a?a.postMessage(r,r.transferList):k('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"processProxyingQueue\\\"===n?ct(r.queue):\\\"spawnThread\\\"===n?de(r):\\\"cleanupThread\\\"===n?pe(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=me.hb[r],delete me.hb[r],le(n),Kt(r),me.ib.splice(me.ib.indexOf(n),1),n.fb=0):\\\"cancelThread\\\"===n?me.hb[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,w&&!e.fb&&e.unref(),t(e)):\\\"print\\\"===n?M(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"printErr\\\"===n?k(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?c[r.handler](...r.args):n&&k(\\\"worker sent an unknown command \\\"+n);me.yb=void 0},e.onerror=e=>{throw k(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},w&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})),e.on(\\\"detachedExit\\\",(function(){})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])c.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:c.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:U})})),Jb:function(e){e()},wb:function(){var e=O(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),me.lb.push(e)},Ab:function(){return 0==me.lb.length&&(me.wb(),me.Kb(me.lb[0])),me.lb.pop()}};function ye(e){for(;0<e.length;)e.shift()(c)}function ve(e){if(_)return Pt(2,0,e);try{he(e)}catch(e){e instanceof fe||\\\"unwind\\\"==e||y(1,e)}}c.PThread=me,c.establishStackSpace=function(){var e=Vt(),t=i()[e+52>>2>>>0];rr(t,t-(e=i()[e+56>>2>>>0])),ar(t)};var be=[];function we(e){this.mb=e-24,this.Ib=function(e){u()[this.mb+4>>2>>>0]=e},this.Cb=function(e){u()[this.mb+8>>2>>>0]=e},this.Gb=function(){i()[this.mb>>2>>>0]=0},this.Bb=function(){t()[this.mb+12>>0>>>0]=0},this.Hb=function(){t()[this.mb+13>>0>>>0]=0},this.qb=function(e,t){this.zb(),this.Ib(e),this.Cb(t),this.Gb(),this.Bb(),this.Hb()},this.zb=function(){u()[this.mb+16>>2>>>0]=0}}function _e(e,t,r,n){return _?Pt(3,1,e,t,r,n):Te(e,t,r,n)}function Te(e,t,r,n){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return k(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return _&&0===a.length?_e(e,t,r,n):(e={Nb:r,fb:e,xb:n,Tb:a},_?(e.Ub=\\\"spawnThread\\\",postMessage(e,a),0):de(e))}function Oe(e,t,r){return _?Pt(4,1,e,t,r):0}function Ae(e,t){if(_)return Pt(5,1,e,t)}function Se(e,t){if(_)return Pt(6,1,e,t)}function Ee(e,t,r){if(_)return Pt(7,1,e,t,r)}function Pe(e,t,r){return _?Pt(8,1,e,t,r):0}function Ce(e,t){if(_)return Pt(9,1,e,t)}function Me(e,t,r){if(_)return Pt(10,1,e,t,r)}function ke(e,t,r,n){if(_)return Pt(11,1,e,t,r,n)}function Re(e,t,r,n){if(_)return Pt(12,1,e,t,r,n)}function Fe(e,t,r,n){if(_)return Pt(13,1,e,t,r,n)}function Ue(e){if(_)return Pt(14,1,e)}function xe(e,t){if(_)return Pt(15,1,e,t)}function We(e,t,r){if(_)return Pt(16,1,e,t,r)}function De(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}c.invokeEntryPoint=function(e,t){var r=be[e];r||(e>=be.length&&(be.length=e+1),be[e]=r=X.get(e)),e=r(t),R?me.tb(e):tr(e)};var Ie=void 0;function je(e){for(var t=\\\"\\\";n()[e>>>0];)t+=Ie[n()[e++>>>0]];return t}var He={},Ye={},ze={};function Le(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function Ne(e,t){return{[e=Le(e)]:function(){return t.apply(this,arguments)}}[e]}function Be(e){var t=Error,r=Ne(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var Ge=void 0;function Ve(e){throw new Ge(e)}function $e(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||Ve('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),Ye.hasOwnProperty(e)){if(r.Db)return;Ve(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}Ye[e]=t,delete ze[e],He.hasOwnProperty(e)&&(t=He[e],delete He[e],t.forEach((e=>e())))}var qe=[],Je=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Qe(e){4<e&&0==--Je[e].rb&&(Je[e]=void 0,qe.push(e))}var Xe=e=>(e||Ve(\\\"Cannot use deleted val. handle = \\\"+e),Je[e].value),Ze=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var t=qe.length?qe.pop():Je.length;return Je[t]={rb:1,value:e},t}};function Ke(e){return this.fromWireType(i()[e>>2>>>0])}function et(e,t){switch(t){case 2:return function(e){var t=this.fromWireType;return F.buffer!=x.buffer&&J(),t.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(s()[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}function tt(e,r,s){switch(r){case 0:return s?function(e){return t()[e>>>0]}:function(e){return n()[e>>>0]};case 1:return s?function(e){return a()[e>>>1]}:function(e){return o()[e>>>1]};case 2:return s?function(e){return i()[e>>>2]}:function(e){return u()[e>>>2]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}var rt=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function nt(e,t){for(var r=e>>1,i=r+t/2;!(r>=i)&&o()[r>>>0];)++r;if(32<(r<<=1)-e&&rt)return rt.decode(n().slice(e,r));for(r=\\\"\\\",i=0;!(i>=t/2);++i){var u=a()[e+2*i>>1>>>0];if(0==u)break;r+=String.fromCharCode(u)}return r}function at(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);a()[t>>1>>>0]=i,t+=2}return a()[t>>1>>>0]=0,t-n}function ot(e){return 2*e.length}function it(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=i()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function ut(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),i()[t>>2>>>0]=o,(t+=4)+4>r)break}return i()[t>>2>>>0]=0,t-n}function st(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function ct(e){Atomics.store(i(),e>>2,1),Vt()&&Zt(e),Atomics.compareExchange(i(),e>>2,1,0)}function ft(e,t){var r=Ye[e];if(void 0===r){var n=je(e=Jt(e));qt(e),Ve(t+\\\" has unknown type \\\"+n)}return r}c.executeNotifiedProxyingQueue=ct;var lt={};function pt(e){var t=lt[e];return void 0===t?je(e):t}var dt=[];function gt(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var ht=[],mt={};function yt(e){return u()[e>>>2]+4294967296*i()[e+4>>>2]}function vt(e){return 0==e%4&&(0!=e%100||0==e%400)}var bt,wt,_t=[0,31,60,91,121,152,182,213,244,274,305,335],Tt=[0,31,59,90,120,151,181,212,243,273,304,334];function Ot(e){return(vt(e.getFullYear())?_t:Tt)[e.getMonth()]+e.getDate()-1}function At(e,t,r,n,a,o,i){return _?Pt(17,1,e,t,r,n,a,o,i):-52}function St(e,t,r,n,a,o){if(_)return Pt(18,1,e,t,r,n,a,o)}function Et(e){var r=q(e)+1,n=$t(r);return n&&V(e,t(),n,r),n}function Pt(e,t){var r=arguments.length-2,n=arguments;return function(e){var t=nr();return e=e(),ar(t),e}((()=>{for(var a=or(8*r),o=a>>3,i=0;i<r;i++){var u=n[2+i];s()[o+i>>>0]=u}return Xt(e,r,a,t)}))}wt=w?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Ct,Mt=[],kt={};function Rt(){if(!Ct){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:m||\\\"./this.program\\\"};for(e in kt)void 0===kt[e]?delete t[e]:t[e]=kt[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Ct=r}return Ct}function Ft(e,r){if(_)return Pt(19,1,e,r);var n=0;return Rt().forEach((function(a,o){var i=r+n;for(o=u()[e+4*o>>2>>>0]=i,i=0;i<a.length;++i)t()[o++>>0>>>0]=a.charCodeAt(i);t()[o>>0>>>0]=0,n+=a.length+1})),0}function Ut(e,t){if(_)return Pt(20,1,e,t);var r=Rt();u()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),u()[t>>2>>>0]=n,0}function xt(e){return _?Pt(21,1,e):52}function Wt(e,t,r,n){return _?Pt(22,1,e,t,r,n):52}function Dt(e,t,r,n,a){return _?Pt(23,1,e,t,r,n,a):70}var It=[null,[],[]];function jt(e,t,r,a){if(_)return Pt(24,1,e,t,r,a);for(var o=0,i=0;i<r;i++){var s=u()[t>>2>>>0],c=u()[t+4>>2>>>0];t+=8;for(var f=0;f<c;f++){var l=n()[s+f>>>0],p=It[e];0===l||10===l?((1===e?M:k)(B(p,0)),p.length=0):p.push(l)}o+=c}return u()[a>>2>>>0]=o,0}var Ht=[31,29,31,30,31,30,31,31,30,31,30,31],Yt=[31,28,31,30,31,30,31,31,30,31,30,31];function zt(e,r,n,a){function o(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function u(e,t){return o(e,t,\\\"0\\\")}function s(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.jb;for(e=new Date(new Date(e.kb+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(vt(e.getFullYear())?Ht:Yt)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),r=c(r),0>=s(t,e)?0>=s(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=i()[a+40>>2>>>0];for(var p in a={Rb:i()[a>>2>>>0],Qb:i()[a+4>>2>>>0],ob:i()[a+8>>2>>>0],sb:i()[a+12>>2>>>0],pb:i()[a+16>>2>>>0],kb:i()[a+20>>2>>>0],gb:i()[a+24>>2>>>0],jb:i()[a+28>>2>>>0],Yb:i()[a+32>>2>>>0],Pb:i()[a+36>>2>>>0],Sb:l?G(l):\\\"\\\"},n=G(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),l[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),g=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":function(e){return d[e.gb].substring(0,3)},\\\"%A\\\":function(e){return d[e.gb]},\\\"%b\\\":function(e){return g[e.pb].substring(0,3)},\\\"%B\\\":function(e){return g[e.pb]},\\\"%C\\\":function(e){return u((e.kb+1900)/100|0,2)},\\\"%d\\\":function(e){return u(e.sb,2)},\\\"%e\\\":function(e){return o(e.sb,2,\\\" \\\")},\\\"%g\\\":function(e){return f(e).toString().substring(2)},\\\"%G\\\":function(e){return f(e)},\\\"%H\\\":function(e){return u(e.ob,2)},\\\"%I\\\":function(e){return 0==(e=e.ob)?e=12:12<e&&(e-=12),u(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.pb-1;t+=(vt(e.kb+1900)?Ht:Yt)[r++]);return u(e.sb+t,3)},\\\"%m\\\":function(e){return u(e.pb+1,2)},\\\"%M\\\":function(e){return u(e.Qb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.ob&&12>e.ob?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return u(e.Rb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.gb||7},\\\"%U\\\":function(e){return u(Math.floor((e.jb+7-e.gb)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.jb+7-(e.gb+6)%7)/7);if(2>=(e.gb+371-e.jb-2)%7&&t++,t)53==t&&(4==(r=(e.gb+371-e.jb)%7)||3==r&&vt(e.kb)||(t=1));else{t=52;var r=(e.gb+7-e.jb-1)%7;(4==r||5==r&&vt(e.kb%400-1))&&t++}return u(t,2)},\\\"%w\\\":function(e){return e.gb},\\\"%W\\\":function(e){return u(Math.floor((e.jb+7-(e.gb+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.kb+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.kb+1900},\\\"%z\\\":function(e){var t=0<=(e=e.Pb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.Sb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),l[p](a)));return p=function(e){var t=Array(q(e)+1);return V(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>r?0:(function(e,r){t().set(e,r>>>0)}(p,e),p.length-1)}me.qb();for(var Lt=Array(256),Nt=0;256>Nt;++Nt)Lt[Nt]=String.fromCharCode(Nt);Ie=Lt,Ge=c.BindingError=Be(\\\"BindingError\\\"),c.InternalError=Be(\\\"InternalError\\\"),c.count_emval_handles=function(){for(var e=0,t=5;t<Je.length;++t)void 0!==Je[t]&&++e;return e},c.get_first_emval=function(){for(var e=5;e<Je.length;++e)if(void 0!==Je[e])return Je[e];return null};var Bt=[null,ge,ve,_e,Oe,Ae,Se,Ee,Pe,Ce,Me,ke,Re,Fe,Ue,xe,We,At,St,Ft,Ut,xt,Wt,Dt,jt],Gt={b:function(e,t,r){throw new we(e).qb(t,r),e},pa:function(){ie(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},aa:function(e){Qt(e,!b,1,!v),me.ub()},C:function(e){_?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):pe(e)},U:Te,v:Oe,ha:Ae,Q:Se,S:Ee,L:Pe,fa:Ce,Z:Me,ea:ke,E:Re,R:Fe,O:Ue,ga:xe,P:We,K:function(){},ra:function(e,r,n,o,u){var s=De(n);$e(e,{name:r=je(r),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?o:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===n)var o=t();else if(2===n)o=a();else{if(4!==n)throw new TypeError(\\\"Unknown boolean type size: \\\"+r);o=i()}return this.fromWireType(o[e>>>s])},nb:null})},qa:function(e,t){$e(e,{name:t=je(t),fromWireType:function(e){var t=Xe(e);return Qe(e),t},toWireType:function(e,t){return Ze(t)},argPackAdvance:8,readValueFromPointer:Ke,nb:null})},G:function(e,t,r){r=De(r),$e(e,{name:t=je(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:et(t,r),nb:null})},q:function(e,t,r,n,a){t=je(t),-1===a&&(a=4294967295),a=De(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},$e(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:tt(t,a,0!==n),nb:null})},n:function(e,t,r){function n(e){e>>=2;var t=u();return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];$e(e,{name:r=je(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{Db:!0})},H:function(e,t){var r=\\\"std::string\\\"===(t=je(t));$e(e,{name:t,fromWireType:function(e){var t=u()[e>>2>>>0],a=e+4;if(r)for(var o=a,i=0;i<=t;++i){var s=a+i;if(i==t||0==n()[s>>>0]){if(o=G(o,s-o),void 0===c)var c=o;else c+=String.fromCharCode(0),c+=o;o=s+1}}else{for(c=Array(t),i=0;i<t;++i)c[i]=String.fromCharCode(n()[a+i>>>0]);c=c.join(\\\"\\\")}return qt(e),c},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var a,o=\\\"string\\\"==typeof t;o||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||Ve(\\\"Cannot pass non-string to std::string\\\"),a=r&&o?q(t):t.length;var i=$t(4+a+1),s=i+4>>>0;if(u()[i>>2>>>0]=a,r&&o)$(t,s,a+1);else if(o)for(o=0;o<a;++o){var c=t.charCodeAt(o);255<c&&(qt(s),Ve(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),n()[s+o>>>0]=c}else for(o=0;o<a;++o)n()[s+o>>>0]=t[o];return null!==e&&e.push(qt,i),i},argPackAdvance:8,readValueFromPointer:Ke,nb:function(e){qt(e)}})},x:function(e,t,r){if(r=je(r),2===t)var n=nt,a=at,i=ot,s=()=>o(),c=1;else 4===t&&(n=it,a=ut,i=st,s=()=>u(),c=2);$e(e,{name:r,fromWireType:function(e){for(var r,a=u()[e>>>2],o=s(),i=e+4,f=0;f<=a;++f){var l=e+4+f*t;f!=a&&0!=o[l>>>c]||(i=n(i,l-i),void 0===r?r=i:(r+=String.fromCharCode(0),r+=i),i=l+t)}return qt(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&Ve(\\\"Cannot pass non-string to C++ string type \\\"+r);var o=i(n),s=$t(4+o+t);return s>>>=0,u()[s>>>2]=o>>c,a(n,s+4,o+t),null!==e&&e.push(qt,s),s},argPackAdvance:8,readValueFromPointer:Ke,nb:function(e){qt(e)}})},sa:function(e,t){$e(e,{Fb:!0,name:t=je(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},V:function(){return 1048576},ka:function(){return!0},W:function(e,t,r,n){e==t?setTimeout((()=>ct(n))):_?postMessage({targetThread:e,cmd:\\\"processProxyingQueue\\\",queue:n}):(e=me.hb[e])&&e.postMessage({cmd:\\\"processProxyingQueue\\\",queue:n})},$:function(){return-1},s:function(e,t,r){e=Xe(e),t=ft(t,\\\"emval::as\\\");var n=[],a=Ze(n);return u()[r>>2>>>0]=a,t.toWireType(n,e)},j:function(e,t,r,n,a){e=dt[e],t=Xe(t),r=pt(r);var o=[];return u()[n>>2>>>0]=Ze(o),e(t,r,o,a)},z:function(e,t,r,n){(e=dt[e])(t=Xe(t),r=pt(r),null,n)},c:Qe,I:function(e,t){return(e=Xe(e))==Xe(t)},r:function(e){return 0===e?Ze(gt()):(e=pt(e),Ze(gt()[e]))},i:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=ft(u()[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=ht[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",s=0;s<e-1;++s)i+=(0!==s?\\\", \\\":\\\"\\\")+\\\"arg\\\"+s,a.push(\\\"argType\\\"+s),o.push(r[1+s]);var c=\\\"return function \\\"+Le(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",f=0;for(s=0;s<e-1;++s)c+=\\\"    var arg\\\"+s+\\\" = argType\\\"+s+\\\".readValueFromPointer(args\\\"+(f?\\\"+\\\"+f:\\\"\\\")+\\\");\\\\n\\\",f+=r[s+1].argPackAdvance;for(c+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",s=0;s<e-1;++s)r[s+1].deleteObject&&(c+=\\\"    argType\\\"+s+\\\".deleteObject(arg\\\"+s+\\\");\\\\n\\\");return n.Fb||(c+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(c+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=Ne(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=dt.length;return dt.push(e),t}(e),ht[t]=a},t:function(e,t){return e=Xe(e),t=Xe(t),Ze(e[t])},d:function(e){4<e&&(Je[e].rb+=1)},y:function(e,t,r,n){e=Xe(e);var a=mt[t];return a||(a=function(e){for(var t=\\\"\\\",r=0;r<e;++r)t+=(0!==r?\\\", \\\":\\\"\\\")+\\\"arg\\\"+r;var n=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(r=0;r<e;++r)n+=\\\"var argType\\\"+r+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+r+\\\"');\\\\nvar arg\\\"+r+\\\" = argType\\\"+r+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+r+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",n+\\\"var obj = new constructor(\\\"+t+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(ft,c,Ze,(()=>u()))}(t),mt[t]=a),a(e,r,n)},ta:function(){return Ze([])},l:function(e){e=Xe(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return Ze(t)},e:function(e){return Ze(pt(e))},k:function(){return Ze({})},h:function(e){for(var t=Xe(e);t.length;){var r=t.pop();t.pop()(r)}Qe(e)},f:function(e,t,r){e=Xe(e),t=Xe(t),r=Xe(r),e[t]=r},g:function(e,t){return e=(e=ft(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),Ze(e)},la:function(e,t){e=new Date(1e3*yt(e)),i()[t>>2>>>0]=e.getUTCSeconds(),i()[t+4>>2>>>0]=e.getUTCMinutes(),i()[t+8>>2>>>0]=e.getUTCHours(),i()[t+12>>2>>>0]=e.getUTCDate(),i()[t+16>>2>>>0]=e.getUTCMonth(),i()[t+20>>2>>>0]=e.getUTCFullYear()-1900,i()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[t+28>>2>>>0]=e},ma:function(e,t){e=new Date(1e3*yt(e)),i()[t>>2>>>0]=e.getSeconds(),i()[t+4>>2>>>0]=e.getMinutes(),i()[t+8>>2>>>0]=e.getHours(),i()[t+12>>2>>>0]=e.getDate(),i()[t+16>>2>>>0]=e.getMonth(),i()[t+20>>2>>>0]=e.getFullYear()-1900,i()[t+24>>2>>>0]=e.getDay();var r=0|Ot(e);i()[t+28>>2>>>0]=r,i()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r)),i()[t+32>>2>>>0]=e},na:function(e){var t=new Date(i()[e+20>>2>>>0]+1900,i()[e+16>>2>>>0],i()[e+12>>2>>>0],i()[e+8>>2>>>0],i()[e+4>>2>>>0],i()[e>>2>>>0],0),r=i()[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(o,a);return 0>r?i()[e+32>>2>>>0]=Number(a!=o&&u==n):0<r!=(u==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?u:a)-n))),i()[e+24>>2>>>0]=t.getDay(),r=0|Ot(t),i()[e+28>>2>>>0]=r,i()[e>>2>>>0]=t.getSeconds(),i()[e+4>>2>>>0]=t.getMinutes(),i()[e+8>>2>>>0]=t.getHours(),i()[e+12>>2>>>0]=t.getDate(),i()[e+16>>2>>>0]=t.getMonth(),i()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},X:At,Y:St,oa:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),s=new Date(a,6,1);a=o.getTimezoneOffset();var c=s.getTimezoneOffset(),f=Math.max(a,c);u()[e>>2>>>0]=60*f,i()[t>>2>>>0]=Number(a!=c),e=n(o),t=n(s),e=Et(e),t=Et(t),c<a?(u()[r>>2>>>0]=e,u()[r+4>>2>>>0]=t):(u()[r>>2>>>0]=t,u()[r+4>>2>>>0]=e)},m:function(){ie(\\\"\\\")},ua:function(){ie(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},D:function(){if(!w&&!b){var e=\\\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\\\";bt||(bt={}),bt[e]||(bt[e]=1,w&&(e=\\\"warning: \\\"+e),k(e))}},F:function(){return Date.now()},N:function(){return 4294901760},p:wt,da:function(e,t,r){n().copyWithin(e>>>0,t>>>0,t+r>>>0)},u:function(){return w?r(993).cpus().length:navigator.hardwareConcurrency},_:function(e,t,r){Mt.length=t,r>>=3;for(var n=0;n<t;n++)Mt[n]=s()[r+n>>>0];return Bt[e].apply(null,Mt)},M:function(e){var t=n().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=F.buffer;try{F.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),J();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},ja:function(){throw\\\"unwind\\\"},ba:Ft,ca:Ut,T:he,w:xt,B:Wt,J:Dt,A:jt,a:F||c.wasmMemory,ia:zt,o:function(e,t,r,n){return zt(e,t,r,n)}};!function(){function e(e,t){return e=e.exports,c.asm=e,me.vb.push(c.asm.Ta),X=c.asm.Ya,K.unshift(c.asm.va),U=t,me.Jb((()=>{if(ne--,c.monitorRunDependencies&&c.monitorRunDependencies(ne),0==ne&&(null!==ae&&(clearInterval(ae),ae=null),oe)){var e=oe;oe=null,e()}})),e}var t={a:Gt};if(ne++,c.monitorRunDependencies&&c.monitorRunDependencies(ne),c.instantiateWasm)try{return c.instantiateWasm(t,e)}catch(e){k(\\\"Module.instantiateWasm callback failed with error: \\\"+e),l(e)}(function(e,t){var r=re;return C||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ue(r)||r.startsWith(\\\"file://\\\")||w||\\\"function\\\"!=typeof fetch?ce(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((function(n){return WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return k(\\\"wasm streaming compile failed: \\\"+n),k(\\\"falling back to ArrayBuffer instantiation\\\"),ce(r,e,t)}))}))})(t,(function(t){e(t.instance,t.module)})).catch(l)}(),c._OrtInit=function(){return(c._OrtInit=c.asm.wa).apply(null,arguments)},c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.xa).apply(null,arguments)},c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.ya).apply(null,arguments)},c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.za).apply(null,arguments)},c._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.Aa).apply(null,arguments)},c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.Ba).apply(null,arguments)},c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.Ca).apply(null,arguments)},c._OrtGetInputCount=function(){return(c._OrtGetInputCount=c.asm.Da).apply(null,arguments)},c._OrtGetOutputCount=function(){return(c._OrtGetOutputCount=c.asm.Ea).apply(null,arguments)},c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.Fa).apply(null,arguments)},c._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.Ga).apply(null,arguments)},c._OrtFree=function(){return(c._OrtFree=c.asm.Ha).apply(null,arguments)},c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Ia).apply(null,arguments)},c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.Ja).apply(null,arguments)},c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm.Ka).apply(null,arguments)},c._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.La).apply(null,arguments)},c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.Ma).apply(null,arguments)},c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.Na).apply(null,arguments)},c._OrtRun=function(){return(c._OrtRun=c.asm.Oa).apply(null,arguments)},c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.Pa).apply(null,arguments)};var Vt=c._pthread_self=function(){return(Vt=c._pthread_self=c.asm.Qa).apply(null,arguments)},$t=c._malloc=function(){return($t=c._malloc=c.asm.Ra).apply(null,arguments)},qt=c._free=function(){return(qt=c._free=c.asm.Sa).apply(null,arguments)};c.__emscripten_tls_init=function(){return(c.__emscripten_tls_init=c.asm.Ta).apply(null,arguments)};var Jt=c.___getTypeName=function(){return(Jt=c.___getTypeName=c.asm.Ua).apply(null,arguments)};c.__embind_initialize_bindings=function(){return(c.__embind_initialize_bindings=c.asm.Va).apply(null,arguments)};var Qt=c.__emscripten_thread_init=function(){return(Qt=c.__emscripten_thread_init=c.asm.Wa).apply(null,arguments)};function Xt(){return(Xt=c.asm.Za).apply(null,arguments)}c.__emscripten_thread_crashed=function(){return(c.__emscripten_thread_crashed=c.asm.Xa).apply(null,arguments)};var Zt=c.__emscripten_proxy_execute_task_queue=function(){return(Zt=c.__emscripten_proxy_execute_task_queue=c.asm._a).apply(null,arguments)};function Kt(){return(Kt=c.asm.$a).apply(null,arguments)}var er,tr=c.__emscripten_thread_exit=function(){return(tr=c.__emscripten_thread_exit=c.asm.ab).apply(null,arguments)};function rr(){return(rr=c.asm.bb).apply(null,arguments)}function nr(){return(nr=c.asm.cb).apply(null,arguments)}function ar(){return(ar=c.asm.db).apply(null,arguments)}function or(){return(or=c.asm.eb).apply(null,arguments)}function ir(){function e(){if(!er&&(er=!0,c.calledRun=!0,!L)&&(_||ye(K),f(c),c.onRuntimeInitialized&&c.onRuntimeInitialized(),!_)){if(c.postRun)for(\\\"function\\\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var e=c.postRun.shift();ee.unshift(e)}ye(ee)}}if(!(0<ne))if(_)f(c),_||ye(K),startWorker(c);else{if(c.preRun)for(\\\"function\\\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)te();ye(Z),0<ne||(c.setStatus?(c.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){c.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(c.UTF8ToString=G,c.stringToUTF8=$,c.lengthBytesUTF8=q,c.keepRuntimeAlive=function(){return R},c.wasmMemory=F,c.stackAlloc=or,c.stackSave=nr,c.stackRestore=ar,c.ExitStatus=fe,c.PThread=me,oe=function e(){er||ir(),er||(oe=e)},c.preInit)for(\\\"function\\\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();return ir(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||\\\"/index.js\\\",function(e={}){var t,n,a;t||(t=void 0!==e?e:{}),t.ready=new Promise((function(e,t){n=e,a=t}));var o,i,u,s=Object.assign({},t),c=\\\"./this.program\\\",f=\\\"object\\\"==typeof window,l=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var g=r(384),h=r(908);d=l?h.dirname(d)+\\\"/\\\":\\\"//\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),u=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):h.normalize(e),g.readFile(e,(function(e,n){e?r(e):t(n.buffer)}))},1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),process.on(\\\"uncaughtException\\\",(function(e){throw e})),15>process.versions.node.split(\\\".\\\")[0]&&process.on(\\\"unhandledRejection\\\",(function(e){throw e})),t.inspect=function(){return\\\"[Emscripten Module object]\\\"}}else(f||l)&&(l?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},l&&(u=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var m,y=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,s),s=null,t.thisProgram&&(c=t.thisProgram),t.wasmBinary&&(m=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&B(\\\"no native wasm support detected\\\");var b,w,_,T,O,A,S,E,P,C=!1,M=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function k(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&M)return M.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function R(e,t){return(e>>>=0)?k(_,e,t):\\\"\\\"}function F(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function U(e,t,r){return F(e,_,t,r)}function x(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function W(){var e=b.buffer;t.HEAP8=w=new Int8Array(e),t.HEAP16=T=new Int16Array(e),t.HEAP32=A=new Int32Array(e),t.HEAPU8=_=new Uint8Array(e),t.HEAPU16=O=new Uint16Array(e),t.HEAPU32=S=new Uint32Array(e),t.HEAPF32=E=new Float32Array(e),t.HEAPF64=P=new Float64Array(e)}var D=[],I=[],j=[];function H(){var e=t.preRun.shift();D.unshift(e)}var Y,z=0,L=null,N=null;function B(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),C=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function G(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!G(Y=\\\"ort-wasm.wasm\\\")){var V=Y;Y=t.locateFile?t.locateFile(V,d):d+V}function $(e){try{if(e==Y&&m)return new Uint8Array(m);if(u)return u(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){B(e)}}function q(e,t,r){return function(e){if(!m&&(f||l)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((function(t){if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((function(){return $(e)}));if(i)return new Promise((function(t,r){i(e,(function(e){t(new Uint8Array(e))}),r)}))}return Promise.resolve().then((function(){return $(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,t)})).then((function(e){return e})).then(r,(function(e){v(\\\"failed to asynchronously prepare wasm: \\\"+e),B(e)}))}function J(e){for(;0<e.length;)e.shift()(t)}function Q(e){this.Pa=e-24,this.ab=function(e){S[this.Pa+4>>2>>>0]=e},this.Ya=function(e){S[this.Pa+8>>2>>>0]=e},this.Za=function(){A[this.Pa>>2>>>0]=0},this.Xa=function(){w[this.Pa+12>>0>>>0]=0},this.$a=function(){w[this.Pa+13>>0>>>0]=0},this.Va=function(e,t){this.Wa(),this.ab(e),this.Ya(t),this.Za(),this.Xa(),this.$a()},this.Wa=function(){S[this.Pa+16>>2>>>0]=0}}function X(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\\\"Unknown type size: \\\"+e)}}var Z=void 0;function K(e){for(var t=\\\"\\\";_[e>>>0];)t+=Z[_[e++>>>0]];return t}var ee={},te={},re={};function ne(e){if(void 0===e)return\\\"_unknown\\\";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,\\\"$\\\")).charCodeAt(0);return 48<=t&&57>=t?\\\"_\\\"+e:e}function ae(e,t){return{[e=ne(e)]:function(){return t.apply(this,arguments)}}[e]}function oe(e){var t=Error,r=ae(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+\\\"\\\\n\\\"+t.replace(/^Error(:[^\\\\n]*)?\\\\n/,\\\"\\\"))}));return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\\\": \\\"+this.message},r}var ie=void 0;function ue(e){throw new ie(e)}function se(e,t,r={}){if(!(\\\"argPackAdvance\\\"in t))throw new TypeError(\\\"registerType registeredInstance requires argPackAdvance\\\");var n=t.name;if(e||ue('type \\\"'+n+'\\\" must have a positive integer typeid pointer'),te.hasOwnProperty(e)){if(r.bb)return;ue(\\\"Cannot register type '\\\"+n+\\\"' twice\\\")}te[e]=t,delete re[e],ee.hasOwnProperty(e)&&(t=ee[e],delete ee[e],t.forEach((e=>e())))}var ce=[],fe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function le(e){4<e&&0==--fe[e].Ta&&(fe[e]=void 0,ce.push(e))}var pe=e=>(e||ue(\\\"Cannot use deleted val. handle = \\\"+e),fe[e].value),de=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var t=ce.length?ce.pop():fe.length;return fe[t]={Ta:1,value:e},t}};function ge(e){return this.fromWireType(A[e>>2>>>0])}function he(e,t){switch(t){case 2:return function(e){return this.fromWireType(E[e>>>2])};case 3:return function(e){return this.fromWireType(P[e>>>3])};default:throw new TypeError(\\\"Unknown float type: \\\"+e)}}function me(e,t,r){switch(t){case 0:return r?function(e){return w[e>>>0]}:function(e){return _[e>>>0]};case 1:return r?function(e){return T[e>>>1]}:function(e){return O[e>>>1]};case 2:return r?function(e){return A[e>>>2]}:function(e){return S[e>>>2]};default:throw new TypeError(\\\"Unknown integer type: \\\"+e)}}var ye=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf-16le\\\"):void 0;function ve(e,t){for(var r=e>>1,n=r+t/2;!(r>=n)&&O[r>>>0];)++r;if(32<(r<<=1)-e&&ye)return ye.decode(_.subarray(e>>>0,r>>>0));for(r=\\\"\\\",n=0;!(n>=t/2);++n){var a=T[e+2*n>>1>>>0];if(0==a)break;r+=String.fromCharCode(a)}return r}function be(e,t,r){if(void 0===r&&(r=2147483647),2>r)return 0;var n=t;r=(r-=2)<2*e.length?r/2:e.length;for(var a=0;a<r;++a)T[t>>1>>>0]=e.charCodeAt(a),t+=2;return T[t>>1>>>0]=0,t-n}function we(e){return 2*e.length}function _e(e,t){for(var r=0,n=\\\"\\\";!(r>=t/4);){var a=A[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a)):n+=String.fromCharCode(a)}return n}function Te(e,t,r){if(void 0===r&&(r=2147483647),4>r)return 0;var n=t>>>=0;r=n+r-4;for(var a=0;a<e.length;++a){var o=e.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&e.charCodeAt(++a)),A[t>>2>>>0]=o,(t+=4)+4>r)break}return A[t>>2>>>0]=0,t-n}function Oe(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);55296<=n&&57343>=n&&++r,t+=4}return t}function Ae(e,t){var r=te[e];if(void 0===r){var n=K(e=Qe(e));Je(e),ue(t+\\\" has unknown type \\\"+n)}return r}var Se={};function Ee(e){var t=Se[e];return void 0===t?K(e):t}var Pe=[];function Ce(){return\\\"object\\\"==typeof globalThis?globalThis:Function(\\\"return this\\\")()}var Me=[],ke={};function Re(e){return 0==e%4&&(0!=e%100||0==e%400)}var Fe,Ue=[0,31,60,91,121,152,182,213,244,274,305,335],xe=[0,31,59,90,120,151,181,212,243,273,304,334];function We(e){return(Re(e.getFullYear())?Ue:xe)[e.getMonth()]+e.getDate()-1}function De(e){var t=x(e)+1,r=qe(t);return r&&F(e,w,r,t),r}Fe=p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now();var Ie={};function je(){if(!He){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in Ie)void 0===Ie[e]?delete t[e]:t[e]=Ie[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);He=r}return He}var He,Ye=[null,[],[]],ze=[31,29,31,30,31,30,31,31,30,31,30,31],Le=[31,28,31,30,31,30,31,31,30,31,30,31];function Ne(e,t,r,n){function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Na;for(e=new Date(new Date(e.Oa+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Re(e.getFullYear())?ze:Le)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),r=u(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=A[n+40>>2>>>0];for(var f in n={gb:A[n>>2>>>0],fb:A[n+4>>2>>>0],Ra:A[n+8>>2>>>0],Ua:A[n+12>>2>>>0],Sa:A[n+16>>2>>>0],Oa:A[n+20>>2>>>0],Ja:A[n+24>>2>>>0],Na:A[n+28>>2>>>0],ib:A[n+32>>2>>>0],eb:A[n+36>>2>>>0],hb:c?R(c):\\\"\\\"},r=R(r),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(f,\\\"g\\\"),c[f]);var l=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(f in c={\\\"%a\\\":function(e){return l[e.Ja].substring(0,3)},\\\"%A\\\":function(e){return l[e.Ja]},\\\"%b\\\":function(e){return p[e.Sa].substring(0,3)},\\\"%B\\\":function(e){return p[e.Sa]},\\\"%C\\\":function(e){return o((e.Oa+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.Ua,2)},\\\"%e\\\":function(e){return a(e.Ua,2,\\\" \\\")},\\\"%g\\\":function(e){return s(e).toString().substring(2)},\\\"%G\\\":function(e){return s(e)},\\\"%H\\\":function(e){return o(e.Ra,2)},\\\"%I\\\":function(e){return 0==(e=e.Ra)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.Sa-1;t+=(Re(e.Oa+1900)?ze:Le)[r++]);return o(e.Ua+t,3)},\\\"%m\\\":function(e){return o(e.Sa+1,2)},\\\"%M\\\":function(e){return o(e.fb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ra&&12>e.Ra?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.gb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ja||7},\\\"%U\\\":function(e){return o(Math.floor((e.Na+7-e.Ja)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Na+7-(e.Ja+6)%7)/7);if(2>=(e.Ja+371-e.Na-2)%7&&t++,t)53==t&&(4==(r=(e.Ja+371-e.Na)%7)||3==r&&Re(e.Oa)||(t=1));else{t=52;var r=(e.Ja+7-e.Na-1)%7;(4==r||5==r&&Re(e.Oa%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.Ja},\\\"%W\\\":function(e){return o(Math.floor((e.Na+7-(e.Ja+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Oa+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Oa+1900},\\\"%z\\\":function(e){var t=0<=(e=e.eb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.hb},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(f)&&(r=r.replace(new RegExp(f,\\\"g\\\"),c[f](n)));return f=function(e){var t=Array(x(e)+1);return F(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),f.length>t?0:(w.set(f,e>>>0),f.length-1)}for(var Be=Array(256),Ge=0;256>Ge;++Ge)Be[Ge]=String.fromCharCode(Ge);Z=Be,ie=t.BindingError=oe(\\\"BindingError\\\"),t.InternalError=oe(\\\"InternalError\\\"),t.count_emval_handles=function(){for(var e=0,t=5;t<fe.length;++t)void 0!==fe[t]&&++e;return e},t.get_first_emval=function(){for(var e=5;e<fe.length;++e)if(void 0!==fe[e])return fe[e];return null};var Ve={a:function(e,t,r){throw new Q(e).Va(t,r),e},ca:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},r:function(){return 0},Y:function(){},M:function(){},O:function(){},H:function(){return 0},W:function(){},R:function(){},V:function(){},z:function(){},N:function(){},K:function(){},X:function(){},L:function(){},G:function(){},fa:function(e,t,r,n,a){var o=X(r);se(e,{name:t=K(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:a},argPackAdvance:8,readValueFromPointer:function(e){if(1===r)var n=w;else if(2===r)n=T;else{if(4!==r)throw new TypeError(\\\"Unknown boolean type size: \\\"+t);n=A}return this.fromWireType(n[e>>>o])},Qa:null})},ea:function(e,t){se(e,{name:t=K(t),fromWireType:function(e){var t=pe(e);return le(e),t},toWireType:function(e,t){return de(t)},argPackAdvance:8,readValueFromPointer:ge,Qa:null})},B:function(e,t,r){r=X(r),se(e,{name:t=K(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:he(t,r),Qa:null})},o:function(e,t,r,n,a){t=K(t),-1===a&&(a=4294967295),a=X(r);var o=e=>e;if(0===n){var i=32-8*r;o=e=>e<<i>>>i}r=t.includes(\\\"unsigned\\\")?function(e,t){return t>>>0}:function(e,t){return t},se(e,{name:t,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:me(t,a,0!==n),Qa:null})},l:function(e,t,r){function n(e){e>>=2;var t=S;return new a(t.buffer,t[e+1>>>0],t[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];se(e,{name:r=K(r),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{bb:!0})},C:function(e,t){var r=\\\"std::string\\\"===(t=K(t));se(e,{name:t,fromWireType:function(e){var t=S[e>>2>>>0],n=e+4;if(r)for(var a=n,o=0;o<=t;++o){var i=n+o;if(o==t||0==_[i>>>0]){if(a=R(a,i-a),void 0===u)var u=a;else u+=String.fromCharCode(0),u+=a;a=i+1}}else{for(u=Array(t),o=0;o<t;++o)u[o]=String.fromCharCode(_[n+o>>>0]);u=u.join(\\\"\\\")}return Je(e),u},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n,a=\\\"string\\\"==typeof t;a||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||ue(\\\"Cannot pass non-string to std::string\\\"),n=r&&a?x(t):t.length;var o=qe(4+n+1),i=o+4>>>0;if(S[o>>2>>>0]=n,r&&a)U(t,i,n+1);else if(a)for(a=0;a<n;++a){var u=t.charCodeAt(a);255<u&&(Je(i),ue(\\\"String has UTF-16 code units that do not fit in 8 bits\\\")),_[i+a>>>0]=u}else for(a=0;a<n;++a)_[i+a>>>0]=t[a];return null!==e&&e.push(Je,o),o},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Je(e)}})},t:function(e,t,r){if(r=K(r),2===t)var n=ve,a=be,o=we,i=()=>O,u=1;else 4===t&&(n=_e,a=Te,o=Oe,i=()=>S,u=2);se(e,{name:r,fromWireType:function(e){for(var r,a=S[e>>>2],o=i(),s=e+4,c=0;c<=a;++c){var f=e+4+c*t;c!=a&&0!=o[f>>>u]||(s=n(s,f-s),void 0===r?r=s:(r+=String.fromCharCode(0),r+=s),s=f+t)}return Je(e),r},toWireType:function(e,n){\\\"string\\\"!=typeof n&&ue(\\\"Cannot pass non-string to C++ string type \\\"+r);var i=o(n),s=qe(4+i+t);return S[(s>>>=0)>>>2]=i>>u,a(n,s+4,i+t),null!==e&&e.push(Je,s),s},argPackAdvance:8,readValueFromPointer:ge,Qa:function(e){Je(e)}})},ga:function(e,t){se(e,{cb:!0,name:t=K(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return!0},p:function(e,t,r){e=pe(e),t=Ae(t,\\\"emval::as\\\");var n=[],a=de(n);return S[r>>2>>>0]=a,t.toWireType(n,e)},i:function(e,t,r,n,a){e=Pe[e],t=pe(t),r=Ee(r);var o=[];return S[n>>2>>>0]=de(o),e(t,r,o,a)},u:function(e,t,r,n){(e=Pe[e])(t=pe(t),r=Ee(r),null,n)},b:le,E:function(e,t){return(e=pe(e))==pe(t)},w:function(e){return 0===e?de(Ce()):(e=Ee(e),de(Ce()[e]))},h:function(e,t){var r=function(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=Ae(S[t+4*n>>2>>>0],\\\"parameter \\\"+n);return r}(e,t),n=r[0];t=n.name+\\\"_$\\\"+r.slice(1).map((function(e){return e.name})).join(\\\"_\\\")+\\\"$\\\";var a=Me[t];if(void 0!==a)return a;a=[\\\"retType\\\"];for(var o=[n],i=\\\"\\\",u=0;u<e-1;++u)i+=(0!==u?\\\", \\\":\\\"\\\")+\\\"arg\\\"+u,a.push(\\\"argType\\\"+u),o.push(r[1+u]);var s=\\\"return function \\\"+ne(\\\"methodCaller_\\\"+t)+\\\"(handle, name, destructors, args) {\\\\n\\\",c=0;for(u=0;u<e-1;++u)s+=\\\"    var arg\\\"+u+\\\" = argType\\\"+u+\\\".readValueFromPointer(args\\\"+(c?\\\"+\\\"+c:\\\"\\\")+\\\");\\\\n\\\",c+=r[u+1].argPackAdvance;for(s+=\\\"    var rv = handle[name](\\\"+i+\\\");\\\\n\\\",u=0;u<e-1;++u)r[u+1].deleteObject&&(s+=\\\"    argType\\\"+u+\\\".deleteObject(arg\\\"+u+\\\");\\\\n\\\");return n.cb||(s+=\\\"    return retType.toWireType(destructors, rv);\\\\n\\\"),a.push(s+\\\"};\\\\n\\\"),e=function(e){var t=Function;if(!(t instanceof Function))throw new TypeError(\\\"new_ called with constructor type \\\"+typeof t+\\\" which is not a function\\\");var r=ae(t.name||\\\"unknownFunctionName\\\",(function(){}));return r.prototype=t.prototype,r=new r,(e=t.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var t=Pe.length;return Pe.push(e),t}(e),Me[t]=a},v:function(e,t){return e=pe(e),t=pe(t),de(e[t])},c:function(e){4<e&&(fe[e].Ta+=1)},ia:function(e,r,n,a){e=pe(e);var o=ke[r];return o||(o=function(e){for(var r=\\\"\\\",n=0;n<e;++n)r+=(0!==n?\\\", \\\":\\\"\\\")+\\\"arg\\\"+n;var a=\\\"return function emval_allocator_\\\"+e+\\\"(constructor, argTypes, args) {\\\\n  var HEAPU32 = getMemory();\\\\n\\\";for(n=0;n<e;++n)a+=\\\"var argType\\\"+n+\\\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \\\"+n+\\\"');\\\\nvar arg\\\"+n+\\\" = argType\\\"+n+\\\".readValueFromPointer(args);\\\\nargs += argType\\\"+n+\\\"['argPackAdvance'];\\\\nargTypes += 4;\\\\n\\\";return new Function(\\\"requireRegisteredType\\\",\\\"Module\\\",\\\"valueToHandle\\\",\\\"getMemory\\\",a+\\\"var obj = new constructor(\\\"+r+\\\");\\\\nreturn valueToHandle(obj);\\\\n}\\\\n\\\")(Ae,t,de,(()=>S))}(r),ke[r]=o),o(e,n,a)},D:function(){return de([])},k:function(e){e=pe(e);for(var t=Array(e.length),r=0;r<e.length;r++)t[r]=e[r];return de(t)},d:function(e){return de(Ee(e))},j:function(){return de({})},g:function(e){for(var t=pe(e);t.length;){var r=t.pop();t.pop()(r)}le(e)},e:function(e,t,r){e=pe(e),t=pe(t),r=pe(r),e[t]=r},f:function(e,t){return e=(e=Ae(e,\\\"_emval_take_value\\\")).readValueFromPointer(t),de(e)},_:function(e,t){e=new Date(1e3*(S[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getUTCSeconds(),A[t+4>>2>>>0]=e.getUTCMinutes(),A[t+8>>2>>>0]=e.getUTCHours(),A[t+12>>2>>>0]=e.getUTCDate(),A[t+16>>2>>>0]=e.getUTCMonth(),A[t+20>>2>>>0]=e.getUTCFullYear()-1900,A[t+24>>2>>>0]=e.getUTCDay(),A[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},$:function(e,t){e=new Date(1e3*(S[e>>>2]+4294967296*A[e+4>>>2])),A[t>>2>>>0]=e.getSeconds(),A[t+4>>2>>>0]=e.getMinutes(),A[t+8>>2>>>0]=e.getHours(),A[t+12>>2>>>0]=e.getDate(),A[t+16>>2>>>0]=e.getMonth(),A[t+20>>2>>>0]=e.getFullYear()-1900,A[t+24>>2>>>0]=e.getDay(),A[t+28>>2>>>0]=0|We(e),A[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();A[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},aa:function(e){var t=new Date(A[e+20>>2>>>0]+1900,A[e+16>>2>>>0],A[e+12>>2>>>0],A[e+8>>2>>>0],A[e+4>>2>>>0],A[e>>2>>>0],0),r=A[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?A[e+32>>2>>>0]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),A[e+24>>2>>>0]=t.getDay(),A[e+28>>2>>>0]=0|We(t),A[e>>2>>>0]=t.getSeconds(),A[e+4>>2>>>0]=t.getMinutes(),A[e+8>>2>>>0]=t.getHours(),A[e+12>>2>>>0]=t.getDate(),A[e+16>>2>>>0]=t.getMonth(),A[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},P:function(){return-52},Q:function(){},ba:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var u=i.getTimezoneOffset();S[e>>2>>>0]=60*Math.max(a,u),A[t>>2>>>0]=Number(a!=u),e=n(o),t=n(i),e=De(e),t=De(t),u<a?(S[r>>2>>>0]=e,S[r+4>>2>>>0]=t):(S[r>>2>>>0]=t,S[r+4>>2>>>0]=e)},q:function(){B(\\\"\\\")},ha:function(){B(\\\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\\\")},A:function(){return Date.now()},J:function(){return 4294901760},n:Fe,U:function(e,t,r){_.copyWithin(e>>>0,t>>>0,t+r>>>0)},I:function(e){var t=_.length;if(4294901760<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math,o=a.min;n=Math.max(e,n),n+=(65536-n%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,n)-i.byteLength+65535>>>16),W();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},S:function(e,t){var r=0;return je().forEach((function(n,a){var o=t+r;for(a=S[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)w[a++>>0>>>0]=n.charCodeAt(o);w[a>>0>>>0]=0,r+=n.length+1})),0},T:function(e,t){var r=je();S[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),S[t>>2>>>0]=n,0},s:function(){return 52},y:function(){return 52},F:function(){return 70},x:function(e,t,r,n){for(var a=0,o=0;o<r;o++){var i=S[t>>2>>>0],u=S[t+4>>2>>>0];t+=8;for(var s=0;s<u;s++){var c=_[i+s>>>0],f=Ye[e];0===c||10===c?((1===e?y:v)(k(f,0)),f.length=0):f.push(c)}a+=u}return S[n>>2>>>0]=a,0},da:Ne,m:function(e,t,r,n){return Ne(e,t,r,n)}};!function(){function e(e){if(e=e.exports,t.asm=e,b=t.asm.ja,W(),I.unshift(t.asm.ka),z--,t.monitorRunDependencies&&t.monitorRunDependencies(z),0==z&&(null!==L&&(clearInterval(L),L=null),N)){var r=N;N=null,r()}return e}var r={a:Ve};if(z++,t.monitorRunDependencies&&t.monitorRunDependencies(z),t.instantiateWasm)try{return t.instantiateWasm(r,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var r=Y;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||G(r)||r.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?q(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((function(n){return WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),q(r,e,t)}))}))})(r,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.la).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.ma).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.na).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.oa).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.pa).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.qa).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.ra).apply(null,arguments)},t._OrtGetInputCount=function(){return(t._OrtGetInputCount=t.asm.sa).apply(null,arguments)},t._OrtGetOutputCount=function(){return(t._OrtGetOutputCount=t.asm.ta).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.ua).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.va).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.wa).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.xa).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.ya).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm.za).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.Aa).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.Ba).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.Ca).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.Da).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.Ea).apply(null,arguments)};var $e,qe=t._malloc=function(){return(qe=t._malloc=t.asm.Fa).apply(null,arguments)},Je=t._free=function(){return(Je=t._free=t.asm.Ga).apply(null,arguments)},Qe=t.___getTypeName=function(){return(Qe=t.___getTypeName=t.asm.Ha).apply(null,arguments)};function Xe(){return(Xe=t.asm.Ka).apply(null,arguments)}function Ze(){return(Ze=t.asm.La).apply(null,arguments)}function Ke(){return(Ke=t.asm.Ma).apply(null,arguments)}function et(){function e(){if(!$e&&($e=!0,t.calledRun=!0,!C)){if(J(I),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();j.unshift(e)}J(j)}}if(!(0<z)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)H();J(D),0<z||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t.__embind_initialize_bindings=function(){return(t.__embind_initialize_bindings=t.asm.Ia).apply(null,arguments)},t.UTF8ToString=R,t.stringToUTF8=U,t.lengthBytesUTF8=x,t.stackAlloc=Ke,t.stackSave=Xe,t.stackRestore=Ze,N=function e(){$e||et(),$e||(N=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return et(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=[],d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(e.__embind_initialize_bindings(),n.forEach((a=>{e.executeNotifiedProxyingQueue(a)})),n=[],o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"processProxyingQueue\\\"===r.data.cmd?o?e.executeNotifiedProxyingQueue(r.data.queue):n.push(r.data.queue):r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.g=function(){if(\\\"object\\\"==typeof globalThis)return globalThis;try{return this||new Function(\\\"return this\\\")()}catch(e){if(\\\"object\\\"==typeof window)return window}}(),(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})));break;case\\\"init-ort\\\":try{const{numThreads:t,loggingLevel:n}=r.data.in;(0,e.initOrt)(t,n),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return P.buffer!=x.buffer&&Q(),x}function r(){return P.buffer!=x.buffer&&Q(),D}function t(){return P.buffer!=x.buffer&&Q(),W}function a(){return P.buffer!=x.buffer&&Q(),I}function o(){return P.buffer!=x.buffer&&Q(),U}function i(){return P.buffer!=x.buffer&&Q(),j}function u(){return P.buffer!=x.buffer&&Q(),H}var f,s,c;f||(f=void 0!==e?e:{}),f.ready=new Promise((function(e,n){s=e,c=n}));var l,p,d,h=Object.assign({},f),m=\"./this.program\",b=(e,n)=>{throw n},g=\"object\"==typeof window,y=\"function\"==typeof importScripts,v=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,w=f.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function T(e){return f.locateFile?f.locateFile(e,_):_+e}if(v){var A=require(\"fs\"),O=require(\"path\");let e;_=y?O.dirname(_)+\"/\":__dirname+\"/\",l=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFileSync(e,n?void 0:\"utf8\")),d=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,n,r)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),A.readFile(e,(function(e,t){e?r(e):n(t.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),process.on(\"uncaughtException\",(function(e){if(!(e instanceof se))throw e})),15>process.versions.node.split(\".\")[0]&&process.on(\"unhandledRejection\",(function(e){throw e})),b=(e,n)=>{if(F)throw process.exitCode=e,n;if(!(n instanceof se)){var r=n;n&&\"object\"==typeof n&&n.stack&&(r=[n,n.stack]),M(\"exiting due to exception: \"+r)}process.exit(e)},f.inspect=function(){return\"[Emscripten Module object]\"};try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(g||y)&&(y?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",v||(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},y&&(d=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),p=(e,n,r)=>{var t=new XMLHttpRequest;t.open(\"GET\",e,!0),t.responseType=\"arraybuffer\",t.onload=()=>{200==t.status||0==t.status&&t.response?n(t.response):r()},t.onerror=r,t.send(null)}));v&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var S=console.log.bind(console),E=console.warn.bind(console);v&&(S=e=>A.writeSync(1,e+\"\\n\"),E=e=>A.writeSync(2,e+\"\\n\"));var k,C=f.print||S,M=f.printErr||E;Object.assign(f,h),h=null,f.thisProgram&&(m=f.thisProgram),f.quit&&(b=f.quit),f.wasmBinary&&(k=f.wasmBinary);var F=f.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&oe(\"no native wasm support detected\");var P,R,x,D,W,I,U,j,Y,H,q=!1,z=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function B(e,n,r){var t=(n>>>=0)+r;for(r=n;e[r]&&!(r>=t);)++r;if(16<r-n&&e.buffer&&z)return z.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,r):e.subarray(n,r));for(t=\"\";n<r;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))t+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[n++])?t+=String.fromCharCode(a):(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else t+=String.fromCharCode(a)}return t}function N(e,n){return(e>>>=0)?B(r(),e,n):\"\"}function G(e,n,r,t){if(!(0<t))return 0;var a=r>>>=0;t=r+t-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=t)break;n[r++>>>0]=i}else{if(2047>=i){if(r+1>=t)break;n[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=t)break;n[r++>>>0]=224|i>>12}else{if(r+3>=t)break;n[r++>>>0]=240|i>>18,n[r++>>>0]=128|i>>12&63}n[r++>>>0]=128|i>>6&63}n[r++>>>0]=128|63&i}}return n[r>>>0]=0,r-a}function L(e,n,t){return G(e,r(),n,t)}function V(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);127>=t?n++:2047>=t?n+=2:55296<=t&&57343>=t?(n+=4,++r):n+=3}return n}function Q(){var e=P.buffer;f.HEAP8=x=new Int8Array(e),f.HEAP16=W=new Int16Array(e),f.HEAP32=U=new Int32Array(e),f.HEAPU8=D=new Uint8Array(e),f.HEAPU16=I=new Uint16Array(e),f.HEAPU32=j=new Uint32Array(e),f.HEAPF32=Y=new Float32Array(e),f.HEAPF64=H=new Float64Array(e)}var X=f.INITIAL_MEMORY||16777216;if(1048576<=X||oe(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+X+\"! (STACK_SIZE=1048576)\"),w)P=f.wasmMemory;else if(f.wasmMemory)P=f.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:X/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw M(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),v&&M(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");Q(),X=P.buffer.byteLength;var J,Z=[],$=[],K=[];function ee(){var e=f.preRun.shift();Z.unshift(e)}var ne,re=0,te=null,ae=null;function oe(e){throw f.onAbort&&f.onAbort(e),M(e=\"Aborted(\"+e+\")\"),q=!0,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),c(e),e}function ie(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function ue(e){try{if(e==ne&&k)return new Uint8Array(k);if(d)return d(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){oe(e)}}function fe(e,n,r){return function(e){if(!k&&(g||y)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((function(n){if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((function(){return ue(e)}));if(p)return new Promise((function(n,r){p(e,(function(e){n(new Uint8Array(e))}),r)}))}return Promise.resolve().then((function(){return ue(e)}))}(e).then((function(e){return WebAssembly.instantiate(e,n)})).then((function(e){return e})).then(r,(function(e){M(\"failed to asynchronously prepare wasm: \"+e),oe(e)}))}function se(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function ce(e){e.terminate(),e.onmessage=()=>{}}function le(e){(e=me.hb[e])||oe(),me.Mb(e)}function pe(e){var n=me.Ab();if(!n)return 6;me.ib.push(n),me.hb[e.fb]=n,n.fb=e.fb;var r={cmd:\"run\",start_routine:e.Nb,arg:e.xb,pthread_ptr:e.fb};return v&&n.ref(),n.postMessage(r,e.Tb),0}function de(e){if(w)return kn(1,1,e);F||(me.Ob(),f.onExit&&f.onExit(e),q=!0),b(e,new se(e))}function he(e){if(w)throw ge(e),\"unwind\";de(e)}ie(ne=\"ort-wasm-threaded.wasm\")||(ne=T(ne));var me={lb:[],ib:[],vb:[],hb:{},qb:function(){w&&me.Eb()},Vb:function(){},Eb:function(){me.receiveObjectTransfer=me.Lb,me.threadInitTLS=me.ub,me.setExitStatus=me.tb,F=!1},tb:function(){},Xb:[\"$terminateWorker\"],Ob:function(){for(var e of me.ib)ce(e);for(e of me.lb)ce(e);me.lb=[],me.ib=[],me.hb=[]},Mb:function(e){var n=e.fb;delete me.hb[n],me.lb.push(e),me.ib.splice(me.ib.indexOf(e),1),e.fb=0,v&&e.unref(),Kn(n)},Lb:function(){},ub:function(){me.vb.forEach((e=>e()))},Kb:e=>new Promise((n=>{e.onmessage=r=>{var t=(r=r.data).cmd;if(e.fb&&(me.yb=e.fb),r.targetThread&&r.targetThread!=Ln()){var a=me.hb[r.Wb];a?a.postMessage(r,r.transferList):M('Internal error! Worker sent a message \"'+t+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"processProxyingQueue\"===t?sn(r.queue):\"spawnThread\"===t?pe(r):\"cleanupThread\"===t?le(r.thread):\"killThread\"===t?(r=r.thread,t=me.hb[r],delete me.hb[r],ce(t),Kn(r),me.ib.splice(me.ib.indexOf(t),1),t.fb=0):\"cancelThread\"===t?me.hb[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===t?(e.loaded=!0,v&&!e.fb&&e.unref(),n(e)):\"print\"===t?C(\"Thread \"+r.threadId+\": \"+r.text):\"printErr\"===t?M(\"Thread \"+r.threadId+\": \"+r.text):\"alert\"===t?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===t?f[r.handler](...r.args):t&&M(\"worker sent an unknown command \"+t);me.yb=void 0},e.onerror=e=>{throw M(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},v&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})),e.on(\"detachedExit\",(function(){})));var r,t=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])f.hasOwnProperty(r)&&t.push(r);e.postMessage({cmd:\"load\",handlers:t,urlOrBlob:f.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:R})})),Jb:function(e){e()},wb:function(){var e=T(\"ort-wasm-threaded.worker.js\");e=new Worker(e),me.lb.push(e)},Ab:function(){return 0==me.lb.length&&(me.wb(),me.Kb(me.lb[0])),me.lb.pop()}};function be(e){for(;0<e.length;)e.shift()(f)}function ge(e){if(w)return kn(2,0,e);try{he(e)}catch(e){e instanceof se||\"unwind\"==e||b(1,e)}}f.PThread=me,f.establishStackSpace=function(){var e=Ln(),n=o()[e+52>>2>>>0];rr(n,n-(e=o()[e+56>>2>>>0])),ar(n)};var ye=[];function ve(e){this.mb=e-24,this.Ib=function(e){i()[this.mb+4>>2>>>0]=e},this.Cb=function(e){i()[this.mb+8>>2>>>0]=e},this.Gb=function(){o()[this.mb>>2>>>0]=0},this.Bb=function(){n()[this.mb+12>>0>>>0]=0},this.Hb=function(){n()[this.mb+13>>0>>>0]=0},this.qb=function(e,n){this.zb(),this.Ib(e),this.Cb(n),this.Gb(),this.Bb(),this.Hb()},this.zb=function(){i()[this.mb+16>>2>>>0]=0}}function we(e,n,r,t){return w?kn(3,1,e,n,r,t):_e(e,n,r,t)}function _e(e,n,r,t){if(\"undefined\"==typeof SharedArrayBuffer)return M(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return w&&0===a.length?we(e,n,r,t):(e={Nb:r,fb:e,xb:t,Tb:a},w?(e.Ub=\"spawnThread\",postMessage(e,a),0):pe(e))}function Te(e,n,r){return w?kn(4,1,e,n,r):0}function Ae(e,n){if(w)return kn(5,1,e,n)}function Oe(e,n){if(w)return kn(6,1,e,n)}function Se(e,n,r){if(w)return kn(7,1,e,n,r)}function Ee(e,n,r){return w?kn(8,1,e,n,r):0}function ke(e,n){if(w)return kn(9,1,e,n)}function Ce(e,n,r){if(w)return kn(10,1,e,n,r)}function Me(e,n,r,t){if(w)return kn(11,1,e,n,r,t)}function Fe(e,n,r,t){if(w)return kn(12,1,e,n,r,t)}function Pe(e,n,r,t){if(w)return kn(13,1,e,n,r,t)}function Re(e){if(w)return kn(14,1,e)}function xe(e,n){if(w)return kn(15,1,e,n)}function De(e,n,r){if(w)return kn(16,1,e,n,r)}function We(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+e)}}f.invokeEntryPoint=function(e,n){var r=ye[e];r||(e>=ye.length&&(ye.length=e+1),ye[e]=r=J.get(e)),e=r(n),F?me.tb(e):nr(e)};var Ie=void 0;function Ue(e){for(var n=\"\";r()[e>>>0];)n+=Ie[r()[e++>>>0]];return n}var je={},Ye={},He={};function qe(e){if(void 0===e)return\"_unknown\";var n=(e=e.replace(/[^a-zA-Z0-9_]/g,\"$\")).charCodeAt(0);return 48<=n&&57>=n?\"_\"+e:e}function ze(e,n){return{[e=qe(e)]:function(){return n.apply(this,arguments)}}[e]}function Be(e){var n=Error,r=ze(e,(function(n){this.name=e,this.message=n,void 0!==(n=Error(n).stack)&&(this.stack=this.toString()+\"\\n\"+n.replace(/^Error(:[^\\n]*)?\\n/,\"\"))}));return r.prototype=Object.create(n.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message},r}var Ne=void 0;function Ge(e){throw new Ne(e)}function Le(e,n,r={}){if(!(\"argPackAdvance\"in n))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var t=n.name;if(e||Ge('type \"'+t+'\" must have a positive integer typeid pointer'),Ye.hasOwnProperty(e)){if(r.Db)return;Ge(\"Cannot register type '\"+t+\"' twice\")}Ye[e]=n,delete He[e],je.hasOwnProperty(e)&&(n=je[e],delete je[e],n.forEach((e=>e())))}var Ve=[],Qe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Xe(e){4<e&&0==--Qe[e].rb&&(Qe[e]=void 0,Ve.push(e))}var Je=e=>(e||Ge(\"Cannot use deleted val. handle = \"+e),Qe[e].value),Ze=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Ve.length?Ve.pop():Qe.length;return Qe[n]={rb:1,value:e},n}};function $e(e){return this.fromWireType(o()[e>>2>>>0])}function Ke(e,n){switch(n){case 2:return function(e){var n=this.fromWireType;return P.buffer!=x.buffer&&Q(),n.call(this,Y[e>>>2])};case 3:return function(e){return this.fromWireType(u()[e>>>3])};default:throw new TypeError(\"Unknown float type: \"+e)}}function en(e,u,f){switch(u){case 0:return f?function(e){return n()[e>>>0]}:function(e){return r()[e>>>0]};case 1:return f?function(e){return t()[e>>>1]}:function(e){return a()[e>>>1]};case 2:return f?function(e){return o()[e>>>2]}:function(e){return i()[e>>>2]};default:throw new TypeError(\"Unknown integer type: \"+e)}}var nn=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;function rn(e,n){for(var o=e>>1,i=o+n/2;!(o>=i)&&a()[o>>>0];)++o;if(32<(o<<=1)-e&&nn)return nn.decode(r().slice(e,o));for(o=\"\",i=0;!(i>=n/2);++i){var u=t()[e+2*i>>1>>>0];if(0==u)break;o+=String.fromCharCode(u)}return o}function tn(e,n,r){if(void 0===r&&(r=2147483647),2>r)return 0;var a=n;r=(r-=2)<2*e.length?r/2:e.length;for(var o=0;o<r;++o){var i=e.charCodeAt(o);t()[n>>1>>>0]=i,n+=2}return t()[n>>1>>>0]=0,n-a}function an(e){return 2*e.length}function on(e,n){for(var r=0,t=\"\";!(r>=n/4);){var a=o()[e+4*r>>2>>>0];if(0==a)break;++r,65536<=a?(a-=65536,t+=String.fromCharCode(55296|a>>10,56320|1023&a)):t+=String.fromCharCode(a)}return t}function un(e,n,r){if(void 0===r&&(r=2147483647),4>r)return 0;var t=n>>>=0;r=t+r-4;for(var a=0;a<e.length;++a){var i=e.charCodeAt(a);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++a)),o()[n>>2>>>0]=i,(n+=4)+4>r)break}return o()[n>>2>>>0]=0,n-t}function fn(e){for(var n=0,r=0;r<e.length;++r){var t=e.charCodeAt(r);55296<=t&&57343>=t&&++r,n+=4}return n}function sn(e){Atomics.store(o(),e>>2,1),Ln()&&$n(e),Atomics.compareExchange(o(),e>>2,1,0)}function cn(e,n){var r=Ye[e];if(void 0===r){var t=Ue(e=Xn(e));Qn(e),Ge(n+\" has unknown type \"+t)}return r}f.executeNotifiedProxyingQueue=sn;var ln={};function pn(e){var n=ln[e];return void 0===n?Ue(e):n}var dn=[];function hn(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}var mn=[],bn={};function gn(e){return i()[e>>>2]+4294967296*o()[e+4>>>2]}function yn(e){return 0==e%4&&(0!=e%100||0==e%400)}var vn,wn,_n=[0,31,60,91,121,152,182,213,244,274,305,335],Tn=[0,31,59,90,120,151,181,212,243,273,304,334];function An(e){return(yn(e.getFullYear())?_n:Tn)[e.getMonth()]+e.getDate()-1}function On(e,n,r,t,a,o,i){return w?kn(17,1,e,n,r,t,a,o,i):-52}function Sn(e,n,r,t,a,o){if(w)return kn(18,1,e,n,r,t,a,o)}function En(e){var r=V(e)+1,t=Vn(r);return t&&G(e,n(),t,r),t}function kn(e,n){var r=arguments.length-2,t=arguments;return function(e){var n=tr();return e=e(),ar(n),e}((()=>{for(var a=or(8*r),o=a>>3,i=0;i<r;i++){var f=t[2+i];u()[o+i>>>0]=f}return Zn(e,r,a,n)}))}wn=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Cn,Mn=[],Fn={};function Pn(){if(!Cn){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in Fn)void 0===Fn[e]?delete n[e]:n[e]=Fn[e];var r=[];for(e in n)r.push(e+\"=\"+n[e]);Cn=r}return Cn}function Rn(e,r){if(w)return kn(19,1,e,r);var t=0;return Pn().forEach((function(a,o){var u=r+t;for(o=i()[e+4*o>>2>>>0]=u,u=0;u<a.length;++u)n()[o++>>0>>>0]=a.charCodeAt(u);n()[o>>0>>>0]=0,t+=a.length+1})),0}function xn(e,n){if(w)return kn(20,1,e,n);var r=Pn();i()[e>>2>>>0]=r.length;var t=0;return r.forEach((function(e){t+=e.length+1})),i()[n>>2>>>0]=t,0}function Dn(e){return w?kn(21,1,e):52}function Wn(e,n,r,t){return w?kn(22,1,e,n,r,t):52}function In(e,n,r,t,a){return w?kn(23,1,e,n,r,t,a):70}var Un=[null,[],[]];function jn(e,n,t,a){if(w)return kn(24,1,e,n,t,a);for(var o=0,u=0;u<t;u++){var f=i()[n>>2>>>0],s=i()[n+4>>2>>>0];n+=8;for(var c=0;c<s;c++){var l=r()[f+c>>>0],p=Un[e];0===l||10===l?((1===e?C:M)(B(p,0)),p.length=0):p.push(l)}o+=s}return i()[a>>2>>>0]=o,0}var Yn=[31,29,31,30,31,30,31,31,30,31,30,31],Hn=[31,28,31,30,31,30,31,31,30,31,30,31];function qn(e,r,t,a){function i(e,n,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=r[0]+e;return e}function u(e,n){return i(e,n,\"0\")}function f(e,n){function r(e){return 0>e?-1:0<e?1:0}var t;return 0===(t=r(e.getFullYear()-n.getFullYear()))&&0===(t=r(e.getMonth()-n.getMonth()))&&(t=r(e.getDate()-n.getDate())),t}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.jb;for(e=new Date(new Date(e.kb+1900,0,1).getTime());0<n;){var r=e.getMonth(),t=(yn(e.getFullYear())?Yn:Hn)[r];if(!(n>t-e.getDate())){e.setDate(e.getDate()+n);break}n-=t-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),n=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=f(n,e)?0>=f(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=o()[a+40>>2>>>0];for(var p in a={Rb:o()[a>>2>>>0],Qb:o()[a+4>>2>>>0],ob:o()[a+8>>2>>>0],sb:o()[a+12>>2>>>0],pb:o()[a+16>>2>>>0],kb:o()[a+20>>2>>>0],gb:o()[a+24>>2>>>0],jb:o()[a+28>>2>>>0],Yb:o()[a+32>>2>>>0],Pb:o()[a+36>>2>>>0],Sb:l?N(l):\"\"},t=N(t),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})t=t.replace(new RegExp(p,\"g\"),l[p]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return d[e.gb].substring(0,3)},\"%A\":function(e){return d[e.gb]},\"%b\":function(e){return h[e.pb].substring(0,3)},\"%B\":function(e){return h[e.pb]},\"%C\":function(e){return u((e.kb+1900)/100|0,2)},\"%d\":function(e){return u(e.sb,2)},\"%e\":function(e){return i(e.sb,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return u(e.ob,2)},\"%I\":function(e){return 0==(e=e.ob)?e=12:12<e&&(e-=12),u(e,2)},\"%j\":function(e){for(var n=0,r=0;r<=e.pb-1;n+=(yn(e.kb+1900)?Yn:Hn)[r++]);return u(e.sb+n,3)},\"%m\":function(e){return u(e.pb+1,2)},\"%M\":function(e){return u(e.Qb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.ob&&12>e.ob?\"AM\":\"PM\"},\"%S\":function(e){return u(e.Rb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.gb||7},\"%U\":function(e){return u(Math.floor((e.jb+7-e.gb)/7),2)},\"%V\":function(e){var n=Math.floor((e.jb+7-(e.gb+6)%7)/7);if(2>=(e.gb+371-e.jb-2)%7&&n++,n)53==n&&(4==(r=(e.gb+371-e.jb)%7)||3==r&&yn(e.kb)||(n=1));else{n=52;var r=(e.gb+7-e.jb-1)%7;(4==r||5==r&&yn(e.kb%400-1))&&n++}return u(n,2)},\"%w\":function(e){return e.gb},\"%W\":function(e){return u(Math.floor((e.jb+7-(e.gb+6)%7)/7),2)},\"%y\":function(e){return(e.kb+1900).toString().substring(2)},\"%Y\":function(e){return e.kb+1900},\"%z\":function(e){var n=0<=(e=e.Pb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.Sb},\"%%\":function(){return\"%\"}},t=t.replace(/%%/g,\"\\0\\0\"),l)t.includes(p)&&(t=t.replace(new RegExp(p,\"g\"),l[p](a)));return p=function(e){var n=Array(V(e)+1);return G(e,n,0,n.length),n}(t=t.replace(/\\0\\0/g,\"%\")),p.length>r?0:(function(e,r){n().set(e,r>>>0)}(p,e),p.length-1)}me.qb();for(var zn=Array(256),Bn=0;256>Bn;++Bn)zn[Bn]=String.fromCharCode(Bn);Ie=zn,Ne=f.BindingError=Be(\"BindingError\"),f.InternalError=Be(\"InternalError\"),f.count_emval_handles=function(){for(var e=0,n=5;n<Qe.length;++n)void 0!==Qe[n]&&++e;return e},f.get_first_emval=function(){for(var e=5;e<Qe.length;++e)if(void 0!==Qe[e])return Qe[e];return null};var Nn=[null,de,ge,we,Te,Ae,Oe,Se,Ee,ke,Ce,Me,Fe,Pe,Re,xe,De,On,Sn,Rn,xn,Dn,Wn,In,jn],Gn={b:function(e,n,r){throw new ve(e).qb(n,r),e},pa:function(){oe(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},aa:function(e){Jn(e,!y,1,!g),me.ub()},C:function(e){w?postMessage({cmd:\"cleanupThread\",thread:e}):le(e)},U:_e,v:Te,ha:Ae,Q:Oe,S:Se,L:Ee,fa:ke,Z:Ce,ea:Me,E:Fe,R:Pe,O:Re,ga:xe,P:De,K:function(){},ra:function(e,r,a,i,u){var f=We(a);Le(e,{name:r=Ue(r),fromWireType:function(e){return!!e},toWireType:function(e,n){return n?i:u},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var i=n();else if(2===a)i=t();else{if(4!==a)throw new TypeError(\"Unknown boolean type size: \"+r);i=o()}return this.fromWireType(i[e>>>f])},nb:null})},qa:function(e,n){Le(e,{name:n=Ue(n),fromWireType:function(e){var n=Je(e);return Xe(e),n},toWireType:function(e,n){return Ze(n)},argPackAdvance:8,readValueFromPointer:$e,nb:null})},G:function(e,n,r){r=We(r),Le(e,{name:n=Ue(n),fromWireType:function(e){return e},toWireType:function(e,n){return n},argPackAdvance:8,readValueFromPointer:Ke(n,r),nb:null})},q:function(e,n,r,t,a){n=Ue(n),-1===a&&(a=4294967295),a=We(r);var o=e=>e;if(0===t){var i=32-8*r;o=e=>e<<i>>>i}r=n.includes(\"unsigned\")?function(e,n){return n>>>0}:function(e,n){return n},Le(e,{name:n,fromWireType:o,toWireType:r,argPackAdvance:8,readValueFromPointer:en(n,a,0!==t),nb:null})},n:function(e,n,r){function t(e){e>>=2;var n=i();return new a(n.buffer,n[e+1>>>0],n[e>>>0])}var a=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];Le(e,{name:r=Ue(r),fromWireType:t,argPackAdvance:8,readValueFromPointer:t},{Db:!0})},H:function(e,n){var t=\"std::string\"===(n=Ue(n));Le(e,{name:n,fromWireType:function(e){var n=i()[e>>2>>>0],a=e+4;if(t)for(var o=a,u=0;u<=n;++u){var f=a+u;if(u==n||0==r()[f>>>0]){if(o=N(o,f-o),void 0===s)var s=o;else s+=String.fromCharCode(0),s+=o;o=f+1}}else{for(s=Array(n),u=0;u<n;++u)s[u]=String.fromCharCode(r()[a+u>>>0]);s=s.join(\"\")}return Qn(e),s},toWireType:function(e,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a,o=\"string\"==typeof n;o||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Ge(\"Cannot pass non-string to std::string\"),a=t&&o?V(n):n.length;var u=Vn(4+a+1),f=u+4>>>0;if(i()[u>>2>>>0]=a,t&&o)L(n,f,a+1);else if(o)for(o=0;o<a;++o){var s=n.charCodeAt(o);255<s&&(Qn(f),Ge(\"String has UTF-16 code units that do not fit in 8 bits\")),r()[f+o>>>0]=s}else for(o=0;o<a;++o)r()[f+o>>>0]=n[o];return null!==e&&e.push(Qn,u),u},argPackAdvance:8,readValueFromPointer:$e,nb:function(e){Qn(e)}})},x:function(e,n,r){if(r=Ue(r),2===n)var t=rn,o=tn,u=an,f=()=>a(),s=1;else 4===n&&(t=on,o=un,u=fn,f=()=>i(),s=2);Le(e,{name:r,fromWireType:function(e){for(var r,a=i()[e>>>2],o=f(),u=e+4,c=0;c<=a;++c){var l=e+4+c*n;c!=a&&0!=o[l>>>s]||(u=t(u,l-u),void 0===r?r=u:(r+=String.fromCharCode(0),r+=u),u=l+n)}return Qn(e),r},toWireType:function(e,t){\"string\"!=typeof t&&Ge(\"Cannot pass non-string to C++ string type \"+r);var a=u(t),f=Vn(4+a+n);return f>>>=0,i()[f>>>2]=a>>s,o(t,f+4,a+n),null!==e&&e.push(Qn,f),f},argPackAdvance:8,readValueFromPointer:$e,nb:function(e){Qn(e)}})},sa:function(e,n){Le(e,{Fb:!0,name:n=Ue(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},V:function(){return 1048576},ka:function(){return!0},W:function(e,n,r,t){e==n?setTimeout((()=>sn(t))):w?postMessage({targetThread:e,cmd:\"processProxyingQueue\",queue:t}):(e=me.hb[e])&&e.postMessage({cmd:\"processProxyingQueue\",queue:t})},$:function(){return-1},s:function(e,n,r){e=Je(e),n=cn(n,\"emval::as\");var t=[],a=Ze(t);return i()[r>>2>>>0]=a,n.toWireType(t,e)},j:function(e,n,r,t,a){e=dn[e],n=Je(n),r=pn(r);var o=[];return i()[t>>2>>>0]=Ze(o),e(n,r,o,a)},z:function(e,n,r,t){(e=dn[e])(n=Je(n),r=pn(r),null,t)},c:Xe,I:function(e,n){return(e=Je(e))==Je(n)},r:function(e){return 0===e?Ze(hn()):(e=pn(e),Ze(hn()[e]))},i:function(e,n){var r=function(e,n){for(var r=Array(e),t=0;t<e;++t)r[t]=cn(i()[n+4*t>>2>>>0],\"parameter \"+t);return r}(e,n),t=r[0];n=t.name+\"_$\"+r.slice(1).map((function(e){return e.name})).join(\"_\")+\"$\";var a=mn[n];if(void 0!==a)return a;a=[\"retType\"];for(var o=[t],u=\"\",f=0;f<e-1;++f)u+=(0!==f?\", \":\"\")+\"arg\"+f,a.push(\"argType\"+f),o.push(r[1+f]);var s=\"return function \"+qe(\"methodCaller_\"+n)+\"(handle, name, destructors, args) {\\n\",c=0;for(f=0;f<e-1;++f)s+=\"    var arg\"+f+\" = argType\"+f+\".readValueFromPointer(args\"+(c?\"+\"+c:\"\")+\");\\n\",c+=r[f+1].argPackAdvance;for(s+=\"    var rv = handle[name](\"+u+\");\\n\",f=0;f<e-1;++f)r[f+1].deleteObject&&(s+=\"    argType\"+f+\".deleteObject(arg\"+f+\");\\n\");return t.Fb||(s+=\"    return retType.toWireType(destructors, rv);\\n\"),a.push(s+\"};\\n\"),e=function(e){var n=Function;if(!(n instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof n+\" which is not a function\");var r=ze(n.name||\"unknownFunctionName\",(function(){}));return r.prototype=n.prototype,r=new r,(e=n.apply(r,e))instanceof Object?e:r}(a).apply(null,o),a=function(e){var n=dn.length;return dn.push(e),n}(e),mn[n]=a},t:function(e,n){return e=Je(e),n=Je(n),Ze(e[n])},d:function(e){4<e&&(Qe[e].rb+=1)},y:function(e,n,r,t){e=Je(e);var a=bn[n];return a||(a=function(e){for(var n=\"\",r=0;r<e;++r)n+=(0!==r?\", \":\"\")+\"arg\"+r;var t=\"return function emval_allocator_\"+e+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(r=0;r<e;++r)t+=\"var argType\"+r+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+r+\"');\\nvar arg\"+r+\" = argType\"+r+\".readValueFromPointer(args);\\nargs += argType\"+r+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",t+\"var obj = new constructor(\"+n+\");\\nreturn valueToHandle(obj);\\n}\\n\")(cn,f,Ze,(()=>i()))}(n),bn[n]=a),a(e,r,t)},ta:function(){return Ze([])},l:function(e){e=Je(e);for(var n=Array(e.length),r=0;r<e.length;r++)n[r]=e[r];return Ze(n)},e:function(e){return Ze(pn(e))},k:function(){return Ze({})},h:function(e){for(var n=Je(e);n.length;){var r=n.pop();n.pop()(r)}Xe(e)},f:function(e,n,r){e=Je(e),n=Je(n),r=Je(r),e[n]=r},g:function(e,n){return e=(e=cn(e,\"_emval_take_value\")).readValueFromPointer(n),Ze(e)},la:function(e,n){e=new Date(1e3*gn(e)),o()[n>>2>>>0]=e.getUTCSeconds(),o()[n+4>>2>>>0]=e.getUTCMinutes(),o()[n+8>>2>>>0]=e.getUTCHours(),o()[n+12>>2>>>0]=e.getUTCDate(),o()[n+16>>2>>>0]=e.getUTCMonth(),o()[n+20>>2>>>0]=e.getUTCFullYear()-1900,o()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[n+28>>2>>>0]=e},ma:function(e,n){e=new Date(1e3*gn(e)),o()[n>>2>>>0]=e.getSeconds(),o()[n+4>>2>>>0]=e.getMinutes(),o()[n+8>>2>>>0]=e.getHours(),o()[n+12>>2>>>0]=e.getDate(),o()[n+16>>2>>>0]=e.getMonth(),o()[n+20>>2>>>0]=e.getFullYear()-1900,o()[n+24>>2>>>0]=e.getDay();var r=0|An(e);o()[n+28>>2>>>0]=r,o()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var t=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=t&&e.getTimezoneOffset()==Math.min(t,r)),o()[n+32>>2>>>0]=e},na:function(e){var n=new Date(o()[e+20>>2>>>0]+1900,o()[e+16>>2>>>0],o()[e+12>>2>>>0],o()[e+8>>2>>>0],o()[e+4>>2>>>0],o()[e>>2>>>0],0),r=o()[e+32>>2>>>0],t=n.getTimezoneOffset(),a=new Date(n.getFullYear(),6,1).getTimezoneOffset(),i=new Date(n.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,a);return 0>r?o()[e+32>>2>>>0]=Number(a!=i&&u==t):0<r!=(u==t)&&(a=Math.max(i,a),n.setTime(n.getTime()+6e4*((0<r?u:a)-t))),o()[e+24>>2>>>0]=n.getDay(),r=0|An(n),o()[e+28>>2>>>0]=r,o()[e>>2>>>0]=n.getSeconds(),o()[e+4>>2>>>0]=n.getMinutes(),o()[e+8>>2>>>0]=n.getHours(),o()[e+12>>2>>>0]=n.getDate(),o()[e+16>>2>>>0]=n.getMonth(),o()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},X:On,Y:Sn,oa:function(e,n,r){function t(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var a=(new Date).getFullYear(),u=new Date(a,0,1),f=new Date(a,6,1);a=u.getTimezoneOffset();var s=f.getTimezoneOffset(),c=Math.max(a,s);i()[e>>2>>>0]=60*c,o()[n>>2>>>0]=Number(a!=s),e=t(u),n=t(f),e=En(e),n=En(n),s<a?(i()[r>>2>>>0]=e,i()[r+4>>2>>>0]=n):(i()[r>>2>>>0]=n,i()[r+4>>2>>>0]=e)},m:function(){oe(\"\")},ua:function(){oe(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},D:function(){if(!v&&!y){var e=\"Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread\";vn||(vn={}),vn[e]||(vn[e]=1,v&&(e=\"warning: \"+e),M(e))}},F:function(){return Date.now()},N:function(){return 4294901760},p:wn,da:function(e,n,t){r().copyWithin(e>>>0,n>>>0,n+t>>>0)},u:function(){return v?require(\"os\").cpus().length:navigator.hardwareConcurrency},_:function(e,n,r){Mn.length=n,r>>=3;for(var t=0;t<n;t++)Mn[t]=u()[r+t>>>0];return Nn[e].apply(null,Mn)},M:function(e){var n=r().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var t=1;4>=t;t*=2){var a=n*(1+.2/t);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var u=P.buffer;try{P.grow(i.call(o,4294901760,a)-u.byteLength+65535>>>16),Q();var f=1;break e}catch(e){}f=void 0}if(f)return!0}return!1},ja:function(){throw\"unwind\"},ba:Rn,ca:xn,T:he,w:Dn,B:Wn,J:In,A:jn,a:P||f.wasmMemory,ia:qn,o:function(e,n,r,t){return qn(e,n,r,t)}};!function(){function e(e,n){return e=e.exports,f.asm=e,me.vb.push(f.asm.Ta),J=f.asm.Ya,$.unshift(f.asm.va),R=n,me.Jb((()=>{if(re--,f.monitorRunDependencies&&f.monitorRunDependencies(re),0==re&&(null!==te&&(clearInterval(te),te=null),ae)){var e=ae;ae=null,e()}})),e}var n={a:Gn};if(re++,f.monitorRunDependencies&&f.monitorRunDependencies(re),f.instantiateWasm)try{return f.instantiateWasm(n,e)}catch(e){M(\"Module.instantiateWasm callback failed with error: \"+e),c(e)}(function(e,n){var r=ne;return k||\"function\"!=typeof WebAssembly.instantiateStreaming||ie(r)||r.startsWith(\"file://\")||v||\"function\"!=typeof fetch?fe(r,e,n):fetch(r,{credentials:\"same-origin\"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(n,(function(t){return M(\"wasm streaming compile failed: \"+t),M(\"falling back to ArrayBuffer instantiation\"),fe(r,e,n)}))}))})(n,(function(n){e(n.instance,n.module)})).catch(c)}(),f._OrtInit=function(){return(f._OrtInit=f.asm.wa).apply(null,arguments)},f._OrtCreateSessionOptions=function(){return(f._OrtCreateSessionOptions=f.asm.xa).apply(null,arguments)},f._OrtAppendExecutionProvider=function(){return(f._OrtAppendExecutionProvider=f.asm.ya).apply(null,arguments)},f._OrtAddSessionConfigEntry=function(){return(f._OrtAddSessionConfigEntry=f.asm.za).apply(null,arguments)},f._OrtReleaseSessionOptions=function(){return(f._OrtReleaseSessionOptions=f.asm.Aa).apply(null,arguments)},f._OrtCreateSession=function(){return(f._OrtCreateSession=f.asm.Ba).apply(null,arguments)},f._OrtReleaseSession=function(){return(f._OrtReleaseSession=f.asm.Ca).apply(null,arguments)},f._OrtGetInputCount=function(){return(f._OrtGetInputCount=f.asm.Da).apply(null,arguments)},f._OrtGetOutputCount=function(){return(f._OrtGetOutputCount=f.asm.Ea).apply(null,arguments)},f._OrtGetInputName=function(){return(f._OrtGetInputName=f.asm.Fa).apply(null,arguments)},f._OrtGetOutputName=function(){return(f._OrtGetOutputName=f.asm.Ga).apply(null,arguments)},f._OrtFree=function(){return(f._OrtFree=f.asm.Ha).apply(null,arguments)},f._OrtCreateTensor=function(){return(f._OrtCreateTensor=f.asm.Ia).apply(null,arguments)},f._OrtGetTensorData=function(){return(f._OrtGetTensorData=f.asm.Ja).apply(null,arguments)},f._OrtReleaseTensor=function(){return(f._OrtReleaseTensor=f.asm.Ka).apply(null,arguments)},f._OrtCreateRunOptions=function(){return(f._OrtCreateRunOptions=f.asm.La).apply(null,arguments)},f._OrtAddRunConfigEntry=function(){return(f._OrtAddRunConfigEntry=f.asm.Ma).apply(null,arguments)},f._OrtReleaseRunOptions=function(){return(f._OrtReleaseRunOptions=f.asm.Na).apply(null,arguments)},f._OrtRun=function(){return(f._OrtRun=f.asm.Oa).apply(null,arguments)},f._OrtEndProfiling=function(){return(f._OrtEndProfiling=f.asm.Pa).apply(null,arguments)};var Ln=f._pthread_self=function(){return(Ln=f._pthread_self=f.asm.Qa).apply(null,arguments)},Vn=f._malloc=function(){return(Vn=f._malloc=f.asm.Ra).apply(null,arguments)},Qn=f._free=function(){return(Qn=f._free=f.asm.Sa).apply(null,arguments)};f.__emscripten_tls_init=function(){return(f.__emscripten_tls_init=f.asm.Ta).apply(null,arguments)};var Xn=f.___getTypeName=function(){return(Xn=f.___getTypeName=f.asm.Ua).apply(null,arguments)};f.__embind_initialize_bindings=function(){return(f.__embind_initialize_bindings=f.asm.Va).apply(null,arguments)};var Jn=f.__emscripten_thread_init=function(){return(Jn=f.__emscripten_thread_init=f.asm.Wa).apply(null,arguments)};function Zn(){return(Zn=f.asm.Za).apply(null,arguments)}f.__emscripten_thread_crashed=function(){return(f.__emscripten_thread_crashed=f.asm.Xa).apply(null,arguments)};var $n=f.__emscripten_proxy_execute_task_queue=function(){return($n=f.__emscripten_proxy_execute_task_queue=f.asm._a).apply(null,arguments)};function Kn(){return(Kn=f.asm.$a).apply(null,arguments)}var er,nr=f.__emscripten_thread_exit=function(){return(nr=f.__emscripten_thread_exit=f.asm.ab).apply(null,arguments)};function rr(){return(rr=f.asm.bb).apply(null,arguments)}function tr(){return(tr=f.asm.cb).apply(null,arguments)}function ar(){return(ar=f.asm.db).apply(null,arguments)}function or(){return(or=f.asm.eb).apply(null,arguments)}function ir(){function e(){if(!er&&(er=!0,f.calledRun=!0,!q)&&(w||be($),s(f),f.onRuntimeInitialized&&f.onRuntimeInitialized(),!w)){if(f.postRun)for(\"function\"==typeof f.postRun&&(f.postRun=[f.postRun]);f.postRun.length;){var e=f.postRun.shift();K.unshift(e)}be(K)}}if(!(0<re))if(w)s(f),w||be($),startWorker(f);else{if(f.preRun)for(\"function\"==typeof f.preRun&&(f.preRun=[f.preRun]);f.preRun.length;)ee();be(Z),0<re||(f.setStatus?(f.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){f.setStatus(\"\")}),1),e()}),1)):e())}}if(f.UTF8ToString=N,f.stringToUTF8=L,f.lengthBytesUTF8=V,f.keepRuntimeAlive=function(){return F},f.wasmMemory=P,f.stackAlloc=or,f.stackSave=tr,f.stackRestore=ar,f.ExitStatus=se,f.PThread=me,ae=function e(){er||ir(),er||(ae=e)},f.preInit)for(\"function\"==typeof f.preInit&&(f.preInit=[f.preInit]);0<f.preInit.length;)f.preInit.pop()();return ir(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar e;e||(e=typeof ortWasm !== 'undefined' ? ortWasm : {});var aa,m;e.ready=new Promise(function(a,b){aa=a;m=b});var ba=Object.assign({},e),ca=\"./this.program\",da=\"object\"==typeof window,r=\"function\"==typeof importScripts,ea=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=\"\",fa,w,y;\nif(ea){var fs=require(\"fs\"),ha=require(\"path\");v=r?ha.dirname(v)+\"/\":__dirname+\"/\";fa=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};y=a=>{a=fa(a,!0);a.buffer||(a=new Uint8Array(a));return a};w=(a,b,c)=>{a=a.startsWith(\"file://\")?new URL(a):ha.normalize(a);fs.readFile(a,function(d,g){d?c(d):b(g.buffer)})};1<process.argv.length&&(ca=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);process.on(\"uncaughtException\",function(a){throw a;});\nif(15>process.versions.node.split(\".\")[0])process.on(\"unhandledRejection\",function(a){throw a;});e.inspect=function(){return\"[Emscripten Module object]\"}}else if(da||r)r?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),0!==v.indexOf(\"blob:\")?v=v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):v=\"\",fa=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},r&&(y=a=>{var b=new XMLHttpRequest;\nb.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),w=(a,b,c)=>{var d=new XMLHttpRequest;d.open(\"GET\",a,!0);d.responseType=\"arraybuffer\";d.onload=()=>{200==d.status||0==d.status&&d.response?b(d.response):c()};d.onerror=c;d.send(null)};var ia=e.print||console.log.bind(console),z=e.printErr||console.warn.bind(console);Object.assign(e,ba);ba=null;e.thisProgram&&(ca=e.thisProgram);var A;e.wasmBinary&&(A=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\n\"object\"!=typeof WebAssembly&&B(\"no native wasm support detected\");var C,ja=!1,ka=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction la(a,b,c){b>>>=0;var d=b+c;for(c=b;a[c]&&!(c>=d);)++c;if(16<c-b&&a.buffer&&ka)return ka.decode(a.subarray(b,c));for(d=\"\";b<c;){var g=a[b++];if(g&128){var h=a[b++]&63;if(192==(g&224))d+=String.fromCharCode((g&31)<<6|h);else{var k=a[b++]&63;g=224==(g&240)?(g&15)<<12|h<<6|k:(g&7)<<18|h<<12|k<<6|a[b++]&63;65536>g?d+=String.fromCharCode(g):(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else d+=String.fromCharCode(g)}return d}function D(a,b){return(a>>>=0)?la(F,a,b):\"\"}\nfunction ma(a,b,c,d){c>>>=0;if(!(0<d))return 0;var g=c;d=c+d-1;for(var h=0;h<a.length;++h){var k=a.charCodeAt(h);if(55296<=k&&57343>=k){var l=a.charCodeAt(++h);k=65536+((k&1023)<<10)|l&1023}if(127>=k){if(c>=d)break;b[c++>>>0]=k}else{if(2047>=k){if(c+1>=d)break;b[c++>>>0]=192|k>>6}else{if(65535>=k){if(c+2>=d)break;b[c++>>>0]=224|k>>12}else{if(c+3>=d)break;b[c++>>>0]=240|k>>18;b[c++>>>0]=128|k>>12&63}b[c++>>>0]=128|k>>6&63}b[c++>>>0]=128|k&63}}b[c>>>0]=0;return c-g}\nfunction na(a,b,c){return ma(a,F,b,c)}function G(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);127>=d?b++:2047>=d?b+=2:55296<=d&&57343>=d?(b+=4,++c):b+=3}return b}var H,F,J,K,L,M,oa,pa;function qa(){var a=C.buffer;e.HEAP8=H=new Int8Array(a);e.HEAP16=J=new Int16Array(a);e.HEAP32=L=new Int32Array(a);e.HEAPU8=F=new Uint8Array(a);e.HEAPU16=K=new Uint16Array(a);e.HEAPU32=M=new Uint32Array(a);e.HEAPF32=oa=new Float32Array(a);e.HEAPF64=pa=new Float64Array(a)}var ra=[],sa=[],ta=[];\nfunction ua(){var a=e.preRun.shift();ra.unshift(a)}var N=0,va=null,O=null;function B(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";z(a);ja=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function wa(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var P;P=\"ort-wasm.wasm\";if(!wa(P)){var xa=P;P=e.locateFile?e.locateFile(xa,v):v+xa}\nfunction ya(a){try{if(a==P&&A)return new Uint8Array(A);if(y)return y(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){B(b)}}\nfunction za(a){if(!A&&(da||r)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(function(b){if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(function(){return ya(a)});if(w)return new Promise(function(b,c){w(a,function(d){b(new Uint8Array(d))},c)})}return Promise.resolve().then(function(){return ya(a)})}\nfunction Aa(a,b,c){return za(a).then(function(d){return WebAssembly.instantiate(d,b)}).then(function(d){return d}).then(c,function(d){z(\"failed to asynchronously prepare wasm: \"+d);B(d)})}\nfunction Ba(a,b){var c=P;return A||\"function\"!=typeof WebAssembly.instantiateStreaming||wa(c)||c.startsWith(\"file://\")||ea||\"function\"!=typeof fetch?Aa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(function(d){return WebAssembly.instantiateStreaming(d,a).then(b,function(g){z(\"wasm streaming compile failed: \"+g);z(\"falling back to ArrayBuffer instantiation\");return Aa(c,a,b)})})}function Ca(a){for(;0<a.length;)a.shift()(e)}\nfunction Da(a){this.Pa=a-24;this.ab=function(b){M[this.Pa+4>>2>>>0]=b};this.Ya=function(b){M[this.Pa+8>>2>>>0]=b};this.Za=function(){L[this.Pa>>2>>>0]=0};this.Xa=function(){H[this.Pa+12>>0>>>0]=0};this.$a=function(){H[this.Pa+13>>0>>>0]=0};this.Va=function(b,c){this.Wa();this.ab(b);this.Ya(c);this.Za();this.Xa();this.$a()};this.Wa=function(){M[this.Pa+16>>2>>>0]=0}}var Ea=0;\nfunction Fa(a){switch(a){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(\"Unknown type size: \"+a);}}var Ga=void 0;function Q(a){for(var b=\"\";F[a>>>0];)b+=Ga[F[a++>>>0]];return b}var Ha={},Ia={},Ja={};function Ka(a){if(void 0===a)return\"_unknown\";a=a.replace(/[^a-zA-Z0-9_]/g,\"$\");var b=a.charCodeAt(0);return 48<=b&&57>=b?\"_\"+a:a}function La(a,b){a=Ka(a);return{[a]:function(){return b.apply(this,arguments)}}[a]}\nfunction Ma(a){var b=Error,c=La(a,function(d){this.name=a;this.message=d;d=Error(d).stack;void 0!==d&&(this.stack=this.toString()+\"\\n\"+d.replace(/^Error(:[^\\n]*)?\\n/,\"\"))});c.prototype=Object.create(b.prototype);c.prototype.constructor=c;c.prototype.toString=function(){return void 0===this.message?this.name:this.name+\": \"+this.message};return c}var Na=void 0;function R(a){throw new Na(a);}\nfunction S(a,b,c={}){if(!(\"argPackAdvance\"in b))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");var d=b.name;a||R('type \"'+d+'\" must have a positive integer typeid pointer');if(Ia.hasOwnProperty(a)){if(c.bb)return;R(\"Cannot register type '\"+d+\"' twice\")}Ia[a]=b;delete Ja[a];Ha.hasOwnProperty(a)&&(b=Ha[a],delete Ha[a],b.forEach(g=>g()))}var Oa=[],T=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Pa(a){4<a&&0===--T[a].Ta&&(T[a]=void 0,Oa.push(a))}\nvar U=a=>{a||R(\"Cannot use deleted val. handle = \"+a);return T[a].value},V=a=>{switch(a){case void 0:return 1;case null:return 2;case !0:return 3;case !1:return 4;default:var b=Oa.length?Oa.pop():T.length;T[b]={Ta:1,value:a};return b}};function Qa(a){return this.fromWireType(L[a>>2>>>0])}function Ra(a,b){switch(b){case 2:return function(c){return this.fromWireType(oa[c>>>2])};case 3:return function(c){return this.fromWireType(pa[c>>>3])};default:throw new TypeError(\"Unknown float type: \"+a);}}\nfunction Sa(a,b,c){switch(b){case 0:return c?function(d){return H[d>>>0]}:function(d){return F[d>>>0]};case 1:return c?function(d){return J[d>>>1]}:function(d){return K[d>>>1]};case 2:return c?function(d){return L[d>>>2]}:function(d){return M[d>>>2]};default:throw new TypeError(\"Unknown integer type: \"+a);}}var Ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf-16le\"):void 0;\nfunction Ua(a,b){var c=a>>1;for(var d=c+b/2;!(c>=d)&&K[c>>>0];)++c;c<<=1;if(32<c-a&&Ta)return Ta.decode(F.subarray(a>>>0,c>>>0));c=\"\";for(d=0;!(d>=b/2);++d){var g=J[a+2*d>>1>>>0];if(0==g)break;c+=String.fromCharCode(g)}return c}function Va(a,b,c){void 0===c&&(c=2147483647);if(2>c)return 0;c-=2;var d=b;c=c<2*a.length?c/2:a.length;for(var g=0;g<c;++g)J[b>>1>>>0]=a.charCodeAt(g),b+=2;J[b>>1>>>0]=0;return b-d}function Wa(a){return 2*a.length}\nfunction Xa(a,b){for(var c=0,d=\"\";!(c>=b/4);){var g=L[a+4*c>>2>>>0];if(0==g)break;++c;65536<=g?(g-=65536,d+=String.fromCharCode(55296|g>>10,56320|g&1023)):d+=String.fromCharCode(g)}return d}function Ya(a,b,c){b>>>=0;void 0===c&&(c=2147483647);if(4>c)return 0;var d=b;c=d+c-4;for(var g=0;g<a.length;++g){var h=a.charCodeAt(g);if(55296<=h&&57343>=h){var k=a.charCodeAt(++g);h=65536+((h&1023)<<10)|k&1023}L[b>>2>>>0]=h;b+=4;if(b+4>c)break}L[b>>2>>>0]=0;return b-d}\nfunction Za(a){for(var b=0,c=0;c<a.length;++c){var d=a.charCodeAt(c);55296<=d&&57343>=d&&++c;b+=4}return b}function W(a,b){var c=Ia[a];if(void 0===c){a=$a(a);var d=Q(a);X(a);R(b+\" has unknown type \"+d)}return c}var ab={};function Y(a){var b=ab[a];return void 0===b?Q(a):b}var cb=[];function db(){return\"object\"==typeof globalThis?globalThis:Function(\"return this\")()}function eb(a){var b=cb.length;cb.push(a);return b}\nfunction fb(a,b){for(var c=Array(a),d=0;d<a;++d)c[d]=W(M[b+4*d>>2>>>0],\"parameter \"+d);return c}function gb(a){var b=Function;if(!(b instanceof Function))throw new TypeError(\"new_ called with constructor type \"+typeof b+\" which is not a function\");var c=La(b.name||\"unknownFunctionName\",function(){});c.prototype=b.prototype;c=new c;a=b.apply(c,a);return a instanceof Object?a:c}var hb=[];\nfunction ib(a){for(var b=\"\",c=0;c<a;++c)b+=(0!==c?\", \":\"\")+\"arg\"+c;var d=\"return function emval_allocator_\"+a+\"(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n\";for(c=0;c<a;++c)d+=\"var argType\"+c+\" = requireRegisteredType(HEAPU32[((argTypes)>>2)], 'parameter \"+c+\"');\\nvar arg\"+c+\" = argType\"+c+\".readValueFromPointer(args);\\nargs += argType\"+c+\"['argPackAdvance'];\\nargTypes += 4;\\n\";return(new Function(\"requireRegisteredType\",\"Module\",\"valueToHandle\",\"getMemory\",d+(\"var obj = new constructor(\"+\nb+\");\\nreturn valueToHandle(obj);\\n}\\n\")))(W,e,V,()=>M)}var jb={};function Z(a){return 0===a%4&&(0!==a%100||0===a%400)}var kb=[0,31,60,91,121,152,182,213,244,274,305,335],lb=[0,31,59,90,120,151,181,212,243,273,304,334];function mb(a){return(Z(a.getFullYear())?kb:lb)[a.getMonth()]+a.getDate()-1}function nb(a){var b=G(a)+1,c=ob(b);c&&ma(a,H,c,b);return c}var pb;pb=ea?()=>{var a=process.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now();var qb={};\nfunction rb(){if(!sb){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:ca||\"./this.program\"},b;for(b in qb)void 0===qb[b]?delete a[b]:a[b]=qb[b];var c=[];for(b in a)c.push(b+\"=\"+a[b]);sb=c}return sb}var sb,tb=[null,[],[]],ub=[31,29,31,30,31,30,31,31,30,31,30,31],vb=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction wb(a){var b=Array(G(a)+1);ma(a,b,0,b.length);return b}\nfunction xb(a,b,c,d){function g(f,q,t){for(f=\"number\"==typeof f?f.toString():f||\"\";f.length<q;)f=t[0]+f;return f}function h(f,q){return g(f,q,\"0\")}function k(f,q){function t(bb){return 0>bb?-1:0<bb?1:0}var I;0===(I=t(f.getFullYear()-q.getFullYear()))&&0===(I=t(f.getMonth()-q.getMonth()))&&(I=t(f.getDate()-q.getDate()));return I}function l(f){switch(f.getDay()){case 0:return new Date(f.getFullYear()-1,11,29);case 1:return f;case 2:return new Date(f.getFullYear(),0,3);case 3:return new Date(f.getFullYear(),\n0,2);case 4:return new Date(f.getFullYear(),0,1);case 5:return new Date(f.getFullYear()-1,11,31);case 6:return new Date(f.getFullYear()-1,11,30)}}function n(f){var q=f.Na;for(f=new Date((new Date(f.Oa+1900,0,1)).getTime());0<q;){var t=f.getMonth(),I=(Z(f.getFullYear())?ub:vb)[t];if(q>I-f.getDate())q-=I-f.getDate()+1,f.setDate(1),11>t?f.setMonth(t+1):(f.setMonth(0),f.setFullYear(f.getFullYear()+1));else{f.setDate(f.getDate()+q);break}}t=new Date(f.getFullYear()+1,0,4);q=l(new Date(f.getFullYear(),\n0,4));t=l(t);return 0>=k(q,f)?0>=k(t,f)?f.getFullYear()+1:f.getFullYear():f.getFullYear()-1}var p=L[d+40>>2>>>0];d={gb:L[d>>2>>>0],fb:L[d+4>>2>>>0],Ra:L[d+8>>2>>>0],Ua:L[d+12>>2>>>0],Sa:L[d+16>>2>>>0],Oa:L[d+20>>2>>>0],Ja:L[d+24>>2>>>0],Na:L[d+28>>2>>>0],ib:L[d+32>>2>>>0],eb:L[d+36>>2>>>0],hb:p?D(p):\"\"};c=D(c);p={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in p)c=c.replace(new RegExp(u,\"g\"),p[u]);var x=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),E=\"January February March April May June July August September October November December\".split(\" \");p={\"%a\":function(f){return x[f.Ja].substring(0,3)},\"%A\":function(f){return x[f.Ja]},\"%b\":function(f){return E[f.Sa].substring(0,\n3)},\"%B\":function(f){return E[f.Sa]},\"%C\":function(f){return h((f.Oa+1900)/100|0,2)},\"%d\":function(f){return h(f.Ua,2)},\"%e\":function(f){return g(f.Ua,2,\" \")},\"%g\":function(f){return n(f).toString().substring(2)},\"%G\":function(f){return n(f)},\"%H\":function(f){return h(f.Ra,2)},\"%I\":function(f){f=f.Ra;0==f?f=12:12<f&&(f-=12);return h(f,2)},\"%j\":function(f){for(var q=0,t=0;t<=f.Sa-1;q+=(Z(f.Oa+1900)?ub:vb)[t++]);return h(f.Ua+q,3)},\"%m\":function(f){return h(f.Sa+1,2)},\"%M\":function(f){return h(f.fb,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(f){return 0<=f.Ra&&12>f.Ra?\"AM\":\"PM\"},\"%S\":function(f){return h(f.gb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(f){return f.Ja||7},\"%U\":function(f){return h(Math.floor((f.Na+7-f.Ja)/7),2)},\"%V\":function(f){var q=Math.floor((f.Na+7-(f.Ja+6)%7)/7);2>=(f.Ja+371-f.Na-2)%7&&q++;if(q)53==q&&(t=(f.Ja+371-f.Na)%7,4==t||3==t&&Z(f.Oa)||(q=1));else{q=52;var t=(f.Ja+7-f.Na-1)%7;(4==t||5==t&&Z(f.Oa%400-1))&&q++}return h(q,2)},\"%w\":function(f){return f.Ja},\"%W\":function(f){return h(Math.floor((f.Na+\n7-(f.Ja+6)%7)/7),2)},\"%y\":function(f){return(f.Oa+1900).toString().substring(2)},\"%Y\":function(f){return f.Oa+1900},\"%z\":function(f){f=f.eb;var q=0<=f;f=Math.abs(f)/60;return(q?\"+\":\"-\")+String(\"0000\"+(f/60*100+f%60)).slice(-4)},\"%Z\":function(f){return f.hb},\"%%\":function(){return\"%\"}};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in p)c.includes(u)&&(c=c.replace(new RegExp(u,\"g\"),p[u](d)));c=c.replace(/\\0\\0/g,\"%\");u=wb(c);if(u.length>b)return 0;H.set(u,a>>>0);return u.length-1}\nfor(var yb=Array(256),zb=0;256>zb;++zb)yb[zb]=String.fromCharCode(zb);Ga=yb;Na=e.BindingError=Ma(\"BindingError\");e.InternalError=Ma(\"InternalError\");e.count_emval_handles=function(){for(var a=0,b=5;b<T.length;++b)void 0!==T[b]&&++a;return a};e.get_first_emval=function(){for(var a=5;a<T.length;++a)if(void 0!==T[a])return T[a];return null};\nvar Ab={a:function(a,b,c){(new Da(a)).Va(b,c);Ea++;throw a;},ca:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},r:function(){return 0},Y:function(){},M:function(){},O:function(){},H:function(){return 0},W:function(){},R:function(){},V:function(){},z:function(){},N:function(){},K:function(){},X:function(){},L:function(){},G:function(){},fa:function(a,b,c,d,g){var h=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(k){return!!k},\ntoWireType:function(k,l){return l?d:g},argPackAdvance:8,readValueFromPointer:function(k){if(1===c)var l=H;else if(2===c)l=J;else if(4===c)l=L;else throw new TypeError(\"Unknown boolean type size: \"+b);return this.fromWireType(l[k>>>h])},Qa:null})},ea:function(a,b){b=Q(b);S(a,{name:b,fromWireType:function(c){var d=U(c);Pa(c);return d},toWireType:function(c,d){return V(d)},argPackAdvance:8,readValueFromPointer:Qa,Qa:null})},B:function(a,b,c){c=Fa(c);b=Q(b);S(a,{name:b,fromWireType:function(d){return d},\ntoWireType:function(d,g){return g},argPackAdvance:8,readValueFromPointer:Ra(b,c),Qa:null})},o:function(a,b,c,d,g){b=Q(b);-1===g&&(g=4294967295);g=Fa(c);var h=l=>l;if(0===d){var k=32-8*c;h=l=>l<<k>>>k}c=b.includes(\"unsigned\")?function(l,n){return n>>>0}:function(l,n){return n};S(a,{name:b,fromWireType:h,toWireType:c,argPackAdvance:8,readValueFromPointer:Sa(b,g,0!==d),Qa:null})},l:function(a,b,c){function d(h){h>>=2;var k=M;return new g(k.buffer,k[h+1>>>0],k[h>>>0])}var g=[Int8Array,Uint8Array,Int16Array,\nUint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][b];c=Q(c);S(a,{name:c,fromWireType:d,argPackAdvance:8,readValueFromPointer:d},{bb:!0})},C:function(a,b){b=Q(b);var c=\"std::string\"===b;S(a,{name:b,fromWireType:function(d){var g=M[d>>2>>>0],h=d+4;if(c)for(var k=h,l=0;l<=g;++l){var n=h+l;if(l==g||0==F[n>>>0]){k=D(k,n-k);if(void 0===p)var p=k;else p+=String.fromCharCode(0),p+=k;k=n+1}}else{p=Array(g);for(l=0;l<g;++l)p[l]=String.fromCharCode(F[h+l>>>0]);p=p.join(\"\")}X(d);return p},toWireType:function(d,\ng){g instanceof ArrayBuffer&&(g=new Uint8Array(g));var h,k=\"string\"==typeof g;k||g instanceof Uint8Array||g instanceof Uint8ClampedArray||g instanceof Int8Array||R(\"Cannot pass non-string to std::string\");c&&k?h=G(g):h=g.length;var l=ob(4+h+1);var n=l+4>>>0;M[l>>2>>>0]=h;if(c&&k)na(g,n,h+1);else if(k)for(k=0;k<h;++k){var p=g.charCodeAt(k);255<p&&(X(n),R(\"String has UTF-16 code units that do not fit in 8 bits\"));F[n+k>>>0]=p}else for(k=0;k<h;++k)F[n+k>>>0]=g[k];null!==d&&d.push(X,l);return l},argPackAdvance:8,\nreadValueFromPointer:Qa,Qa:function(d){X(d)}})},t:function(a,b,c){c=Q(c);if(2===b){var d=Ua;var g=Va;var h=Wa;var k=()=>K;var l=1}else 4===b&&(d=Xa,g=Ya,h=Za,k=()=>M,l=2);S(a,{name:c,fromWireType:function(n){for(var p=M[n>>>2],u=k(),x,E=n+4,f=0;f<=p;++f){var q=n+4+f*b;if(f==p||0==u[q>>>l])E=d(E,q-E),void 0===x?x=E:(x+=String.fromCharCode(0),x+=E),E=q+b}X(n);return x},toWireType:function(n,p){\"string\"!=typeof p&&R(\"Cannot pass non-string to C++ string type \"+c);var u=h(p),x=ob(4+u+b);x>>>=0;M[x>>>\n2]=u>>l;g(p,x+4,u+b);null!==n&&n.push(X,x);return x},argPackAdvance:8,readValueFromPointer:Qa,Qa:function(n){X(n)}})},ga:function(a,b){b=Q(b);S(a,{cb:!0,name:b,argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},Z:function(){return!0},p:function(a,b,c){a=U(a);b=W(b,\"emval::as\");var d=[],g=V(d);M[c>>2>>>0]=g;return b.toWireType(d,a)},i:function(a,b,c,d,g){a=cb[a];b=U(b);c=Y(c);var h=[];M[d>>2>>>0]=V(h);return a(b,c,h,g)},u:function(a,b,c,d){a=cb[a];b=U(b);c=Y(c);a(b,c,null,d)},b:Pa,\nE:function(a,b){a=U(a);b=U(b);return a==b},w:function(a){if(0===a)return V(db());a=Y(a);return V(db()[a])},h:function(a,b){var c=fb(a,b),d=c[0];b=d.name+\"_$\"+c.slice(1).map(function(u){return u.name}).join(\"_\")+\"$\";var g=hb[b];if(void 0!==g)return g;g=[\"retType\"];for(var h=[d],k=\"\",l=0;l<a-1;++l)k+=(0!==l?\", \":\"\")+\"arg\"+l,g.push(\"argType\"+l),h.push(c[1+l]);var n=\"return function \"+Ka(\"methodCaller_\"+b)+\"(handle, name, destructors, args) {\\n\",p=0;for(l=0;l<a-1;++l)n+=\"    var arg\"+l+\" = argType\"+l+\n\".readValueFromPointer(args\"+(p?\"+\"+p:\"\")+\");\\n\",p+=c[l+1].argPackAdvance;n+=\"    var rv = handle[name](\"+k+\");\\n\";for(l=0;l<a-1;++l)c[l+1].deleteObject&&(n+=\"    argType\"+l+\".deleteObject(arg\"+l+\");\\n\");d.cb||(n+=\"    return retType.toWireType(destructors, rv);\\n\");g.push(n+\"};\\n\");a=gb(g).apply(null,h);g=eb(a);return hb[b]=g},v:function(a,b){a=U(a);b=U(b);return V(a[b])},c:function(a){4<a&&(T[a].Ta+=1)},ia:function(a,b,c,d){a=U(a);var g=jb[b];g||(g=ib(b),jb[b]=g);return g(a,c,d)},D:function(){return V([])},\nk:function(a){a=U(a);for(var b=Array(a.length),c=0;c<a.length;c++)b[c]=a[c];return V(b)},d:function(a){return V(Y(a))},j:function(){return V({})},g:function(a){for(var b=U(a);b.length;){var c=b.pop();b.pop()(c)}Pa(a)},e:function(a,b,c){a=U(a);b=U(b);c=U(c);a[b]=c},f:function(a,b){a=W(a,\"_emval_take_value\");a=a.readValueFromPointer(b);return V(a)},_:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getUTCSeconds();L[b+4>>2>>>0]=a.getUTCMinutes();L[b+8>>2>>>0]=a.getUTCHours();\nL[b+12>>2>>>0]=a.getUTCDate();L[b+16>>2>>>0]=a.getUTCMonth();L[b+20>>2>>>0]=a.getUTCFullYear()-1900;L[b+24>>2>>>0]=a.getUTCDay();L[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},$:function(a,b){a=new Date(1E3*(M[a>>>2]+4294967296*L[a+4>>>2]));L[b>>2>>>0]=a.getSeconds();L[b+4>>2>>>0]=a.getMinutes();L[b+8>>2>>>0]=a.getHours();L[b+12>>2>>>0]=a.getDate();L[b+16>>2>>>0]=a.getMonth();L[b+20>>2>>>0]=a.getFullYear()-1900;L[b+24>>2>>>0]=a.getDay();L[b+28>>2>>>0]=mb(a)|0;L[b+36>>\n2>>>0]=-(60*a.getTimezoneOffset());var c=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),d=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();L[b+32>>2>>>0]=(c!=d&&a.getTimezoneOffset()==Math.min(d,c))|0},aa:function(a){var b=new Date(L[a+20>>2>>>0]+1900,L[a+16>>2>>>0],L[a+12>>2>>>0],L[a+8>>2>>>0],L[a+4>>2>>>0],L[a>>2>>>0],0),c=L[a+32>>2>>>0],d=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),h=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),k=Math.min(h,g);0>c?\nL[a+32>>2>>>0]=Number(g!=h&&k==d):0<c!=(k==d)&&(g=Math.max(h,g),b.setTime(b.getTime()+6E4*((0<c?k:g)-d)));L[a+24>>2>>>0]=b.getDay();L[a+28>>2>>>0]=mb(b)|0;L[a>>2>>>0]=b.getSeconds();L[a+4>>2>>>0]=b.getMinutes();L[a+8>>2>>>0]=b.getHours();L[a+12>>2>>>0]=b.getDate();L[a+16>>2>>>0]=b.getMonth();L[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},P:function(){return-52},Q:function(){},ba:function(a,b,c){function d(n){return(n=n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?n[1]:\"GMT\"}var g=(new Date).getFullYear(),\nh=new Date(g,0,1),k=new Date(g,6,1);g=h.getTimezoneOffset();var l=k.getTimezoneOffset();M[a>>2>>>0]=60*Math.max(g,l);L[b>>2>>>0]=Number(g!=l);a=d(h);b=d(k);a=nb(a);b=nb(b);l<g?(M[c>>2>>>0]=a,M[c+4>>2>>>0]=b):(M[c>>2>>>0]=b,M[c+4>>2>>>0]=a)},q:function(){B(\"\")},ha:function(){B(\"To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking\")},A:function(){return Date.now()},J:function(){return 4294901760},n:pb,U:function(a,b,c){F.copyWithin(a>>>0,b>>>\n0,b+c>>>0)},I:function(a){var b=F.length;a>>>=0;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var d=b*(1+.2/c);d=Math.min(d,a+100663296);var g=Math,h=g.min;d=Math.max(a,d);d+=(65536-d%65536)%65536;a:{var k=C.buffer;try{C.grow(h.call(g,4294901760,d)-k.byteLength+65535>>>16);qa();var l=1;break a}catch(n){}l=void 0}if(l)return!0}return!1},S:function(a,b){var c=0;rb().forEach(function(d,g){var h=b+c;g=M[a+4*g>>2>>>0]=h;for(h=0;h<d.length;++h)H[g++>>0>>>0]=d.charCodeAt(h);H[g>>0>>>0]=0;c+=d.length+1});\nreturn 0},T:function(a,b){var c=rb();M[a>>2>>>0]=c.length;var d=0;c.forEach(function(g){d+=g.length+1});M[b>>2>>>0]=d;return 0},s:function(){return 52},y:function(){return 52},F:function(){return 70},x:function(a,b,c,d){for(var g=0,h=0;h<c;h++){var k=M[b>>2>>>0],l=M[b+4>>2>>>0];b+=8;for(var n=0;n<l;n++){var p=F[k+n>>>0],u=tb[a];0===p||10===p?((1===a?ia:z)(la(u,0)),u.length=0):u.push(p)}g+=l}M[d>>2>>>0]=g;return 0},da:xb,m:function(a,b,c,d){return xb(a,b,c,d)}};\n(function(){function a(c){c=c.exports;e.asm=c;C=e.asm.ja;qa();sa.unshift(e.asm.ka);N--;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(0==N&&(null!==va&&(clearInterval(va),va=null),O)){var d=O;O=null;d()}return c}var b={a:Ab};N++;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){z(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}Ba(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=function(){return(e._OrtInit=e.asm.la).apply(null,arguments)};e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.ma).apply(null,arguments)};e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.na).apply(null,arguments)};e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.oa).apply(null,arguments)};e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.pa).apply(null,arguments)};\ne._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.qa).apply(null,arguments)};e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.ra).apply(null,arguments)};e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.sa).apply(null,arguments)};e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.ta).apply(null,arguments)};e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.ua).apply(null,arguments)};\ne._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.va).apply(null,arguments)};e._OrtFree=function(){return(e._OrtFree=e.asm.wa).apply(null,arguments)};e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.xa).apply(null,arguments)};e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.ya).apply(null,arguments)};e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm.za).apply(null,arguments)};\ne._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.Aa).apply(null,arguments)};e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.Ba).apply(null,arguments)};e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.Ca).apply(null,arguments)};e._OrtRun=function(){return(e._OrtRun=e.asm.Da).apply(null,arguments)};e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.Ea).apply(null,arguments)};\nvar ob=e._malloc=function(){return(ob=e._malloc=e.asm.Fa).apply(null,arguments)},X=e._free=function(){return(X=e._free=e.asm.Ga).apply(null,arguments)},$a=e.___getTypeName=function(){return($a=e.___getTypeName=e.asm.Ha).apply(null,arguments)};e.__embind_initialize_bindings=function(){return(e.__embind_initialize_bindings=e.asm.Ia).apply(null,arguments)};function Bb(){return(Bb=e.asm.Ka).apply(null,arguments)}function Cb(){return(Cb=e.asm.La).apply(null,arguments)}\nfunction Db(){return(Db=e.asm.Ma).apply(null,arguments)}e.UTF8ToString=D;e.stringToUTF8=na;e.lengthBytesUTF8=G;e.stackAlloc=Db;e.stackSave=Bb;e.stackRestore=Cb;var Eb;O=function Fb(){Eb||Gb();Eb||(O=Fb)};\nfunction Gb(){function a(){if(!Eb&&(Eb=!0,e.calledRun=!0,!ja)){Ca(sa);aa(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ta.unshift(b)}Ca(ta)}}if(!(0<N)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ua();Ca(ra);0<N||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Gb();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","backends","backendsSortedByPriority","registerBackend","name","backend","priority","init","createSessionHandler","TypeError","currentBackend","undefined","Error","i","indexOf","splice","length","push","env","constructor","this","wasm","webgl","webgpu","logLevelInternal","logLevel","value","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Map","Float32Array","Uint8Array","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isBigIntChecked","Tensor","arg0","arg1","arg2","type","data","dims","isBigInt64ArrayAvailable","BigInt64Array","from","isBigUint64ArrayAvailable","BigUint64Array","set","checkBigInt","Array","isArray","typedArrayConstructor","get","firstElementType","mappedType","size","dim","Number","isSafeInteger","RangeError","calculateSize","static","buffer","options","height","width","norm","normMean","normBias","mean","bias","inputformat","bitmapFormat","outputformat","tensorFormat","offset","float32Data","step","rImagePointer","gImagePointer","bImagePointer","aImagePointer","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","image","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isURL","String","tensorConfig","canvas","document","createElement","pixels2DContext","getContext","resizedHeight","resizedWidth","drawImage","getImageData","bufferToTensor","Promise","resolve","reject","context","newImage","Image","crossOrigin","src","onload","img","format","tempCanvas","putImageData","toImageData","channels","createImageData","reshape","InferenceSession","handler","async","feeds","fetches","isFetchesEmpty","outputNames","isFetches","arg1Keys","Object","getOwnPropertyNames","v","inputNames","results","run","returnValue","key","hasOwnProperty","call","arg3","filePathOrUint8Array","ArrayBuffer","SharedArrayBuffer","byteOffset","byteLength","backendHints","executionProviders","map","backendNames","errors","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","err","join","resolveBackend","startProfiling","endProfiling","onnxjsBackend","pathOrBuffer","session","Session","loadModel","OnnxjsSessionHandler","initializeFlags","initTimeout","simd","proxy","numThreads","isInteger","numCpuLogicalCores","navigator","cpus","hardwareConcurrency","Math","min","ceil","wasmBackend","initWasm","OnnxruntimeWebAssemblySessionHandler","AttributeWithCacheKeyImpl","attribute","assign","cacheKey","_cacheKey","sort","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","attr","onnx","AttributeProto","getValue","getType","delete","getFloat","defaultValue","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","maybeLong","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","obj","o","initialize","dispose","isBackend","WebGLBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","warning","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","version","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","a","c","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","outputTextureData","createTextureData","build","setArtifact","runProgram","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","adjustedKernelShape","adjustedLayout","numberData","numFeatureMaps","oldRowSize","newRowSize","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","RED","RGBA32F","RGBA","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","isEmptyArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","_dataType","len","checkFn","delayFn","_counter","maxCounter","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","OffscreenCanvas","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","WebGLContext","webgl2","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","bind","logInternal","stack","Date","toISOString","previousConfig","Event","startTime","endCallback","timer","ctx","checkTimer","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","_fetches","_options","inputMap","feed","outputMap","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","fetch","promisify","readFile","response","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","FLOAT16","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","profilingEnabled","currentKernelCustomData","kernelCustomData","gpu","adapter","requestAdapter","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","features","profilingMode","requiredFeatures","device","requestDevice","gpuDataManager","createGpuDataManager","kernelPersistentData","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputTensorShapes","inputGpuDataTypes","inputTensorShapesToString","inputGpuDataTypesToString","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","alloc","id","free","ptr","release","createKernel","kernelId","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","kernelEntry","TensorViewImpl","getFloat32Array","HEAP8","newDims","ComputeContextImpl","customData","contextDataOffset","heapU32","HEAPU32","opKernelContext","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","WebGpuBackend","isSourceGpu","HEAPU8","dataOffset","logLevelPrefix","LOG","messageLevel","logLevelStringToEnum","level","args","isChannelLast","calcNormalizedBufferSize","guid","GpuDataManagerImpl","storageCache","downloadCache","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","GpuDataType","default","cachedData","downloadData","gpuReadBuffer","MAP_READ","readDataPromise","mapAsync","GPUMapMode","READ","destroy","acosh","asinh","atanh","pool","clipV10","cosh","erf","parseGlobalMaxPoolAttributes","reciprocal","sinh","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","workPerThread","workgroupSize","transposeA","splitK","splitedDimInner","isVectorA","tileAWidth","tileAHight","rowPerThreadB","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","outputSize","vectorize","sharedDimension","dimA","shaderHelper","dimsOutput","doBroadcast","typeA","typeB","typeOutput","vecSize","expressionScalar","expressionVector","scalar","vector","broadcastImpl","outputIndicesHelper","createIndicesHelper","calcOffsetImpl","o2iImpl","iType","assignment","indicesVariableDeclaration","o2iCall","singleAssignment","expressionA","expressionB","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createBinaryOpProgramShader","createBinaryOpProgramInfo","WORKGROUP_SIZE","o2iSnippet","varOffset","varIndices","i2oImpl","i2oExpression","isPtr","ShaderHelperImpl","workgroupSizeX","workgroupSizeY","workgroupSizeZ","is1DimensionDispatch","createShaderHelper","createGroupedConvProgramInfoLoader","squeezeOutputShapeFunction","getActicationSnippet","inputStorageBuffersDeclarations","xIndicesHelper","wIndicesHelper","createGroupedConvProgramInfo","weightTransposeAttribute","auto_pad","kernel_shape","wIsConst","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","transposedWeight","wT","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","activation_params","calculateAlpha","calculateC","m","broadcastM","broadcastN","offsetC","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","permAttr","inputIndicesHelper","permFunctionBody","datasize","expression","createElementwiseProgramShader","writeTimestamp","setPipeline","computePipeline","entries","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","queryData","QUERY_RESOLVE","syncData","resolveQuerySet","kernelName","mappedData","startTimeU64","endTimeU64","profilingTimeBase","normalizedDispatchGroupSize","code","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","iterateExtraOptions","prefix","seen","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initOrt","loggingLevel","core","getInstance","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","extra","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","ortInit","path","modelData","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","dataLength","lengthBytesUTF8","_malloc","stringToUTF8","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","dateType","tensorTypeToTypedArrayConstructor","errorCode","_OrtInit","activeSessions","modelDataOffset","sessionHandle","_OrtCreateSession","_OrtGetInputCount","outputCount","_OrtGetOutputCount","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","dimIndex","HEAP32","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactoryThreaded","getWasmFileName","useSimd","useThreads","flags","timeout","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","isSimdSupported","wasmPrefixOverride","wasmFileName","wasmOverrideFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","scriptSourceCode","what","race","PThread","terminateAllThreads","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","P","Q","W","I","U","u","H","ready","l","h","importScripts","process","versions","ENVIRONMENT_IS_PTHREAD","T","A","O","dirname","__dirname","startsWith","normalize","readFileSync","argv","on","se","F","exitCode","exit","inspect","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onerror","S","E","warn","writeSync","print","printErr","thisProgram","quit","wasmBinary","noExitRuntime","oe","R","Y","q","fromCharCode","G","charCodeAt","L","V","HEAP16","HEAPU16","HEAPF32","HEAPF64","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","J","Z","$","ee","preRun","ne","re","te","ae","onAbort","RuntimeError","ie","ue","fe","credentials","ok","catch","instantiate","ce","le","me","hb","Mb","pe","Ab","ib","cmd","start_routine","Nb","xb","pthread_ptr","ref","Tb","de","kn","Ob","onExit","he","ge","lb","vb","qb","Eb","Vb","receiveObjectTransfer","Lb","threadInitTLS","ub","setExitStatus","tb","Xb","unref","Kn","Kb","yb","targetThread","Ln","Wb","transferList","sn","thread","loaded","threadId","text","alert","filename","lineno","handlers","urlOrBlob","wasmModule","Jb","wb","be","establishStackSpace","rr","ar","ye","ve","mb","Ib","Cb","Gb","Bb","Hb","zb","we","_e","Ub","Te","Ae","Oe","Se","Ee","ke","Ce","Me","Fe","Pe","Re","xe","De","We","invokeEntryPoint","nr","Ie","Ue","je","Ye","He","qe","ze","apply","arguments","Be","prototype","Ne","Ge","Le","Db","Ve","Qe","Xe","rb","Je","Ze","$e","fromWireType","Ke","en","nn","rn","tn","an","un","fn","Atomics","store","$n","compareExchange","cn","Xn","Qn","executeNotifiedProxyingQueue","ln","pn","dn","hn","globalThis","Function","mn","bn","gn","yn","vn","wn","_n","Tn","An","getFullYear","getMonth","getDate","On","Sn","En","Vn","tr","Zn","hrtime","timeOrigin","Cn","Mn","Fn","Pn","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Rn","xn","Dn","Wn","In","Un","jn","Yn","Hn","qn","getDay","jb","kb","getTime","setDate","setMonth","setFullYear","Rb","Qb","ob","sb","pb","gb","Yb","Pb","Sb","includes","zn","Bn","BindingError","InternalError","count_emval_handles","get_first_emval","Nn","Gn","pa","aa","Jn","ha","fa","ea","ga","ra","toWireType","argPackAdvance","readValueFromPointer","nb","qa","Uint8ClampedArray","sa","Fb","ka","deleteObject","ta","la","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","ma","getSeconds","getMinutes","getHours","getTimezoneOffset","na","setTime","getYear","oa","toTimeString","ua","da","copyWithin","grow","ja","ba","ia","asm","Ta","Ya","va","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","wa","xa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","Na","Oa","Pa","_pthread_self","Qa","Ra","Sa","__emscripten_tls_init","___getTypeName","Ua","__embind_initialize_bindings","Va","__emscripten_thread_init","Wa","Za","__emscripten_thread_crashed","Xa","__emscripten_proxy_execute_task_queue","_a","$a","er","__emscripten_thread_exit","ab","cb","db","eb","ir","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","isNode","global","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}